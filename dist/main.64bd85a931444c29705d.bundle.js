/*! For license information please see main.64bd85a931444c29705d.bundle.js.LICENSE.txt */
(()=>{var e,t,n,r,o,u,a={1872:(e,t,n)=>{"use strict";n.d(t,{DY:()=>a,dd:()=>i});var r=n(5893),o=n(7294),u=(0,o.createContext)({}),a=function(e){var t=e.children,n=(0,o.useState)(!1),a=n[0],i=n[1],l=(0,o.useState)(""),s=l[0],c=l[1],f={toggleModalHandler:function(e){return i(e||function(e){return!e})},isModalOpen:a,setId:function(e){c(e)},modalId:s,closeModal:function(){return i(!1)}};return(0,r.jsx)(u.Provider,{value:f,children:(0,r.jsx)(r.Fragment,{children:t})})},i=function(){return(0,o.useContext)(u)}},2779:(e,t,n)=>{"use strict";n.d(t,{E:()=>Ft,T:()=>St});var r={};n.r(r),n.d(r,{hasBrowserEnv:()=>ye,hasStandardBrowserEnv:()=>Ce,hasStandardBrowserWebWorkerEnv:()=>be,navigator:()=>ve,origin:()=>Ee});var o=n(5162),u=n(5007),a=n(596),i=n(5849),l=function(){return l=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},l.apply(this,arguments)};function s(e,t){return function(){return e.apply(t,arguments)}}const{toString:c}=Object.prototype,{getPrototypeOf:f}=Object,d=(p=Object.create(null),e=>{const t=c.call(e);return p[t]||(p[t]=t.slice(8,-1).toLowerCase())});var p;const h=e=>(e=e.toLowerCase(),t=>d(t)===e),g=e=>t=>typeof t===e,{isArray:m}=Array,A=g("undefined"),y=h("ArrayBuffer"),v=g("string"),C=g("function"),b=g("number"),E=e=>null!==e&&"object"==typeof e,w=e=>{if("object"!==d(e))return!1;const t=f(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},B=h("Date"),x=h("File"),k=h("Blob"),F=h("FileList"),S=h("URLSearchParams"),[D,O,P,j]=["ReadableStream","Request","Response","Headers"].map(h);function _(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),m(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),u=o.length;let a;for(r=0;r<u;r++)a=o[r],t.call(null,e[a],a,e)}}function N(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const R="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,z=e=>!A(e)&&e!==R,T=(L="undefined"!=typeof Uint8Array&&f(Uint8Array),e=>L&&e instanceof L);var L;const M=h("HTMLFormElement"),I=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),U=h("RegExp"),q=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};_(n,((n,o)=>{let u;!1!==(u=t(n,o,e))&&(r[o]=u||n)})),Object.defineProperties(e,r)},H="abcdefghijklmnopqrstuvwxyz",W="0123456789",V={DIGIT:W,ALPHA:H,ALPHA_DIGIT:H+H.toUpperCase()+W},$=h("AsyncFunction"),Z=(K="function"==typeof setImmediate,Y=C(R.postMessage),K?setImmediate:Y?(Q=`axios@${Math.random()}`,X=[],R.addEventListener("message",(({source:e,data:t})=>{e===R&&t===Q&&X.length&&X.shift()()}),!1),e=>{X.push(e),R.postMessage(Q,"*")}):e=>setTimeout(e));var K,Y,Q,X;const J="undefined"!=typeof queueMicrotask?queueMicrotask.bind(R):"undefined"!=typeof process&&process.nextTick||Z,G={isArray:m,isArrayBuffer:y,isBuffer:function(e){return null!==e&&!A(e)&&null!==e.constructor&&!A(e.constructor)&&C(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||C(e.append)&&("formdata"===(t=d(e))||"object"===t&&C(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&y(e.buffer),t},isString:v,isNumber:b,isBoolean:e=>!0===e||!1===e,isObject:E,isPlainObject:w,isReadableStream:D,isRequest:O,isResponse:P,isHeaders:j,isUndefined:A,isDate:B,isFile:x,isBlob:k,isRegExp:U,isFunction:C,isStream:e=>E(e)&&C(e.pipe),isURLSearchParams:S,isTypedArray:T,isFileList:F,forEach:_,merge:function e(){const{caseless:t}=z(this)&&this||{},n={},r=(r,o)=>{const u=t&&N(n,o)||o;w(n[u])&&w(r)?n[u]=e(n[u],r):w(r)?n[u]=e({},r):m(r)?n[u]=r.slice():n[u]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&_(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(_(t,((t,r)=>{n&&C(t)?e[r]=s(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,u,a;const i={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),u=o.length;u-- >0;)a=o[u],r&&!r(a,e,t)||i[a]||(t[a]=e[a],i[a]=!0);e=!1!==n&&f(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:d,kindOfTest:h,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(m(e))return e;let t=e.length;if(!b(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:M,hasOwnProperty:I,hasOwnProp:I,reduceDescriptors:q,freezeMethods:e=>{q(e,((t,n)=>{if(C(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];C(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return m(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:N,global:R,isContextDefined:z,ALPHABET:V,generateString:(e=16,t=V.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&C(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(E(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=m(e)?[]:{};return _(e,((e,t)=>{const u=n(e,r+1);!A(u)&&(o[t]=u)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:$,isThenable:e=>e&&(E(e)||C(e))&&C(e.then)&&C(e.catch),setImmediate:Z,asap:J};function ee(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o,this.status=o.status?o.status:null)}G.inherits(ee,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:G.toJSONObject(this.config),code:this.code,status:this.status}}});const te=ee.prototype,ne={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{ne[e]={value:e}})),Object.defineProperties(ee,ne),Object.defineProperty(te,"isAxiosError",{value:!0}),ee.from=(e,t,n,r,o,u)=>{const a=Object.create(te);return G.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ee.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,u&&Object.assign(a,u),a};const re=ee;function oe(e){return G.isPlainObject(e)||G.isArray(e)}function ue(e){return G.endsWith(e,"[]")?e.slice(0,-2):e}function ae(e,t,n){return e?e.concat(t).map((function(e,t){return e=ue(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const ie=G.toFlatObject(G,{},null,(function(e){return/^is[A-Z]/.test(e)})),le=function(e,t,n){if(!G.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=G.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!G.isUndefined(t[e])}))).metaTokens,o=n.visitor||s,u=n.dots,a=n.indexes,i=(n.Blob||"undefined"!=typeof Blob&&Blob)&&G.isSpecCompliantForm(t);if(!G.isFunction(o))throw new TypeError("visitor must be a function");function l(e){if(null===e)return"";if(G.isDate(e))return e.toISOString();if(!i&&G.isBlob(e))throw new re("Blob is not supported. Use a Buffer instead.");return G.isArrayBuffer(e)||G.isTypedArray(e)?i&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,o){let i=e;if(e&&!o&&"object"==typeof e)if(G.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(G.isArray(e)&&function(e){return G.isArray(e)&&!e.some(oe)}(e)||(G.isFileList(e)||G.endsWith(n,"[]"))&&(i=G.toArray(e)))return n=ue(n),i.forEach((function(e,r){!G.isUndefined(e)&&null!==e&&t.append(!0===a?ae([n],r,u):null===a?n:n+"[]",l(e))})),!1;return!!oe(e)||(t.append(ae(o,n,u),l(e)),!1)}const c=[],f=Object.assign(ie,{defaultVisitor:s,convertValue:l,isVisitable:oe});if(!G.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!G.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),G.forEach(n,(function(n,u){!0===(!(G.isUndefined(n)||null===n)&&o.call(t,n,G.isString(u)?u.trim():u,r,f))&&e(n,r?r.concat(u):[u])})),c.pop()}}(e),t};function se(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function ce(e,t){this._pairs=[],e&&le(e,this,t)}const fe=ce.prototype;fe.append=function(e,t){this._pairs.push([e,t])},fe.toString=function(e){const t=e?function(t){return e.call(this,t,se)}:se;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const de=ce;function pe(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function he(e,t,n){if(!t)return e;const r=n&&n.encode||pe,o=n&&n.serialize;let u;if(u=o?o(t,n):G.isURLSearchParams(t)?t.toString():new de(t,n).toString(r),u){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+u}return e}const ge=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){G.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},me={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Ae={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:de,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},ye="undefined"!=typeof window&&"undefined"!=typeof document,ve="object"==typeof navigator&&navigator||void 0,Ce=ye&&(!ve||["ReactNative","NativeScript","NS"].indexOf(ve.product)<0),be="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,Ee=ye&&window.location.href||"http://localhost",we={...r,...Ae},Be=function(e){function t(e,n,r,o){let u=e[o++];if("__proto__"===u)return!0;const a=Number.isFinite(+u),i=o>=e.length;return u=!u&&G.isArray(r)?r.length:u,i?(G.hasOwnProp(r,u)?r[u]=[r[u],n]:r[u]=n,!a):(r[u]&&G.isObject(r[u])||(r[u]=[]),t(e,n,r[u],o)&&G.isArray(r[u])&&(r[u]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let u;for(r=0;r<o;r++)u=n[r],t[u]=e[u];return t}(r[u])),!a)}if(G.isFormData(e)&&G.isFunction(e.entries)){const n={};return G.forEachEntry(e,((e,r)=>{t(function(e){return G.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},xe={transitional:me,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=G.isObject(e);if(o&&G.isHTMLForm(e)&&(e=new FormData(e)),G.isFormData(e))return r?JSON.stringify(Be(e)):e;if(G.isArrayBuffer(e)||G.isBuffer(e)||G.isStream(e)||G.isFile(e)||G.isBlob(e)||G.isReadableStream(e))return e;if(G.isArrayBufferView(e))return e.buffer;if(G.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let u;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return le(e,new we.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return we.isNode&&G.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((u=G.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return le(u?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(G.isString(e))try{return(0,JSON.parse)(e),G.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||xe.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(G.isResponse(e)||G.isReadableStream(e))return e;if(e&&G.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw re.from(e,re.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:we.classes.FormData,Blob:we.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};G.forEach(["delete","get","head","post","put","patch"],(e=>{xe.headers[e]={}}));const ke=xe,Fe=G.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Se=Symbol("internals");function De(e){return e&&String(e).trim().toLowerCase()}function Oe(e){return!1===e||null==e?e:G.isArray(e)?e.map(Oe):String(e)}function Pe(e,t,n,r,o){return G.isFunction(r)?r.call(this,t,n):(o&&(t=n),G.isString(t)?G.isString(r)?-1!==t.indexOf(r):G.isRegExp(r)?r.test(t):void 0:void 0)}class je{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=De(t);if(!o)throw new Error("header name must be a non-empty string");const u=G.findKey(r,o);(!u||void 0===r[u]||!0===n||void 0===n&&!1!==r[u])&&(r[u||t]=Oe(e))}const u=(e,t)=>G.forEach(e,((e,n)=>o(e,n,t)));if(G.isPlainObject(e)||e instanceof this.constructor)u(e,t);else if(G.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))u((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&Fe[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(G.isHeaders(e))for(const[t,r]of e.entries())o(r,t,n);else null!=e&&o(t,e,n);return this}get(e,t){if(e=De(e)){const n=G.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(G.isFunction(t))return t.call(this,e,n);if(G.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=De(e)){const n=G.findKey(this,e);return!(!n||void 0===this[n]||t&&!Pe(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=De(e)){const o=G.findKey(n,e);!o||t&&!Pe(0,n[o],o,t)||(delete n[o],r=!0)}}return G.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!Pe(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return G.forEach(this,((r,o)=>{const u=G.findKey(n,o);if(u)return t[u]=Oe(r),void delete t[o];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete t[o],t[a]=Oe(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return G.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&G.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[Se]=this[Se]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=De(e);t[r]||(function(e,t){const n=G.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return G.isArray(e)?e.forEach(r):r(e),this}}je.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),G.reduceDescriptors(je.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),G.freezeMethods(je);const _e=je;function Ne(e,t){const n=this||ke,r=t||n,o=_e.from(r.headers);let u=r.data;return G.forEach(e,(function(e){u=e.call(n,u,o.normalize(),t?t.status:void 0)})),o.normalize(),u}function Re(e){return!(!e||!e.__CANCEL__)}function ze(e,t,n){re.call(this,null==e?"canceled":e,re.ERR_CANCELED,t,n),this.name="CanceledError"}G.inherits(ze,re,{__CANCEL__:!0});const Te=ze;function Le(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new re("Request failed with status code "+n.status,[re.ERR_BAD_REQUEST,re.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const Me=(e,t,n=3)=>{let r=0;const o=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,u=0,a=0;return t=void 0!==t?t:1e3,function(i){const l=Date.now(),s=r[a];o||(o=l),n[u]=i,r[u]=l;let c=a,f=0;for(;c!==u;)f+=n[c++],c%=e;if(u=(u+1)%e,u===a&&(a=(a+1)%e),l-o<t)return;const d=s&&l-s;return d?Math.round(1e3*f/d):void 0}}(50,250);return function(e,t){let n,r,o=0,u=1e3/t;const a=(t,u=Date.now())=>{o=u,n=null,r&&(clearTimeout(r),r=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),i=t-o;i>=u?a(e,t):(n=e,r||(r=setTimeout((()=>{r=null,a(n)}),u-i)))},()=>n&&a(n)]}((n=>{const u=n.loaded,a=n.lengthComputable?n.total:void 0,i=u-r,l=o(i);r=u,e({loaded:u,total:a,progress:a?u/a:void 0,bytes:i,rate:l||void 0,estimated:l&&a&&u<=a?(a-u)/l:void 0,event:n,lengthComputable:null!=a,[t?"download":"upload"]:!0})}),n)},Ie=(e,t)=>{const n=null!=e;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},Ue=e=>(...t)=>G.asap((()=>e(...t))),qe=we.hasStandardBrowserEnv?function(){const e=we.navigator&&/(msie|trident)/i.test(we.navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=G.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0},He=we.hasStandardBrowserEnv?{write(e,t,n,r,o,u){const a=[e+"="+encodeURIComponent(t)];G.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),G.isString(r)&&a.push("path="+r),G.isString(o)&&a.push("domain="+o),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function We(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Ve=e=>e instanceof _e?{...e}:e;function $e(e,t){t=t||{};const n={};function r(e,t,n){return G.isPlainObject(e)&&G.isPlainObject(t)?G.merge.call({caseless:n},e,t):G.isPlainObject(t)?G.merge({},t):G.isArray(t)?t.slice():t}function o(e,t,n){return G.isUndefined(t)?G.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function u(e,t){if(!G.isUndefined(t))return r(void 0,t)}function a(e,t){return G.isUndefined(t)?G.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function i(n,o,u){return u in t?r(n,o):u in e?r(void 0,n):void 0}const l={url:u,method:u,data:u,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:i,headers:(e,t)=>o(Ve(e),Ve(t),!0)};return G.forEach(Object.keys(Object.assign({},e,t)),(function(r){const u=l[r]||o,a=u(e[r],t[r],r);G.isUndefined(a)&&u!==i||(n[r]=a)})),n}const Ze=e=>{const t=$e({},e);let n,{data:r,withXSRFToken:o,xsrfHeaderName:u,xsrfCookieName:a,headers:i,auth:l}=t;if(t.headers=i=_e.from(i),t.url=he(We(t.baseURL,t.url),e.params,e.paramsSerializer),l&&i.set("Authorization","Basic "+btoa((l.username||"")+":"+(l.password?unescape(encodeURIComponent(l.password)):""))),G.isFormData(r))if(we.hasStandardBrowserEnv||we.hasStandardBrowserWebWorkerEnv)i.setContentType(void 0);else if(!1!==(n=i.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];i.setContentType([e||"multipart/form-data",...t].join("; "))}if(we.hasStandardBrowserEnv&&(o&&G.isFunction(o)&&(o=o(t)),o||!1!==o&&qe(t.url))){const e=u&&a&&He.read(a);e&&i.set(u,e)}return t},Ke="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Ze(e);let o=r.data;const u=_e.from(r.headers).normalize();let a,i,l,s,c,{responseType:f,onUploadProgress:d,onDownloadProgress:p}=r;function h(){s&&s(),c&&c(),r.cancelToken&&r.cancelToken.unsubscribe(a),r.signal&&r.signal.removeEventListener("abort",a)}let g=new XMLHttpRequest;function m(){if(!g)return;const r=_e.from("getAllResponseHeaders"in g&&g.getAllResponseHeaders());Le((function(e){t(e),h()}),(function(e){n(e),h()}),{data:f&&"text"!==f&&"json"!==f?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:r,config:e,request:g}),g=null}g.open(r.method.toUpperCase(),r.url,!0),g.timeout=r.timeout,"onloadend"in g?g.onloadend=m:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(m)},g.onabort=function(){g&&(n(new re("Request aborted",re.ECONNABORTED,e,g)),g=null)},g.onerror=function(){n(new re("Network Error",re.ERR_NETWORK,e,g)),g=null},g.ontimeout=function(){let t=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const o=r.transitional||me;r.timeoutErrorMessage&&(t=r.timeoutErrorMessage),n(new re(t,o.clarifyTimeoutError?re.ETIMEDOUT:re.ECONNABORTED,e,g)),g=null},void 0===o&&u.setContentType(null),"setRequestHeader"in g&&G.forEach(u.toJSON(),(function(e,t){g.setRequestHeader(t,e)})),G.isUndefined(r.withCredentials)||(g.withCredentials=!!r.withCredentials),f&&"json"!==f&&(g.responseType=r.responseType),p&&([l,c]=Me(p,!0),g.addEventListener("progress",l)),d&&g.upload&&([i,s]=Me(d),g.upload.addEventListener("progress",i),g.upload.addEventListener("loadend",s)),(r.cancelToken||r.signal)&&(a=t=>{g&&(n(!t||t.type?new Te(null,e,g):t),g.abort(),g=null)},r.cancelToken&&r.cancelToken.subscribe(a),r.signal&&(r.signal.aborted?a():r.signal.addEventListener("abort",a)));const A=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);A&&-1===we.protocols.indexOf(A)?n(new re("Unsupported protocol "+A+":",re.ERR_BAD_REQUEST,e)):g.send(o||null)}))},Ye=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,r=new AbortController;const o=function(e){if(!n){n=!0,a();const t=e instanceof Error?e:this.reason;r.abort(t instanceof re?t:new Te(t instanceof Error?t.message:t))}};let u=t&&setTimeout((()=>{u=null,o(new re(`timeout ${t} of ms exceeded`,re.ETIMEDOUT))}),t);const a=()=>{e&&(u&&clearTimeout(u),u=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(o):e.removeEventListener("abort",o)})),e=null)};e.forEach((e=>e.addEventListener("abort",o)));const{signal:i}=r;return i.unsubscribe=()=>G.asap(a),i}},Qe=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,o=0;for(;o<n;)r=o+t,yield e.slice(o,r),o=r},Xe=(e,t,n,r)=>{const o=async function*(e,t){for await(const n of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}}(e))yield*Qe(n,t)}(e,t);let u,a=0,i=e=>{u||(u=!0,r&&r(e))};return new ReadableStream({async pull(e){try{const{done:t,value:r}=await o.next();if(t)return i(),void e.close();let u=r.byteLength;if(n){let e=a+=u;n(e)}e.enqueue(new Uint8Array(r))}catch(e){throw i(e),e}},cancel:e=>(i(e),o.return())},{highWaterMark:2})},Je="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Ge=Je&&"function"==typeof ReadableStream,et=Je&&("function"==typeof TextEncoder?(tt=new TextEncoder,e=>tt.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var tt;const nt=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},rt=Ge&&nt((()=>{let e=!1;const t=new Request(we.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),ot=Ge&&nt((()=>G.isReadableStream(new Response("").body))),ut={stream:ot&&(e=>e.body)};var at;Je&&(at=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!ut[e]&&(ut[e]=G.isFunction(at[e])?t=>t[e]():(t,n)=>{throw new re(`Response type '${e}' is not supported`,re.ERR_NOT_SUPPORT,n)})})));const it={http:null,xhr:Ke,fetch:Je&&(async e=>{let{url:t,method:n,data:r,signal:o,cancelToken:u,timeout:a,onDownloadProgress:i,onUploadProgress:l,responseType:s,headers:c,withCredentials:f="same-origin",fetchOptions:d}=Ze(e);s=s?(s+"").toLowerCase():"text";let p,h=Ye([o,u&&u.toAbortSignal()],a);const g=h&&h.unsubscribe&&(()=>{h.unsubscribe()});let m;try{if(l&&rt&&"get"!==n&&"head"!==n&&0!==(m=await(async(e,t)=>{const n=G.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(G.isBlob(e))return e.size;if(G.isSpecCompliantForm(e)){const t=new Request(we.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return G.isArrayBufferView(e)||G.isArrayBuffer(e)?e.byteLength:(G.isURLSearchParams(e)&&(e+=""),G.isString(e)?(await et(e)).byteLength:void 0)})(t):n})(c,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});if(G.isFormData(r)&&(e=n.headers.get("content-type"))&&c.setContentType(e),n.body){const[e,t]=Ie(m,Me(Ue(l)));r=Xe(n.body,65536,e,t)}}G.isString(f)||(f=f?"include":"omit");const o="credentials"in Request.prototype;p=new Request(t,{...d,signal:h,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",credentials:o?f:void 0});let u=await fetch(p);const a=ot&&("stream"===s||"response"===s);if(ot&&(i||a&&g)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=u[t]}));const t=G.toFiniteNumber(u.headers.get("content-length")),[n,r]=i&&Ie(t,Me(Ue(i),!0))||[];u=new Response(Xe(u.body,65536,n,(()=>{r&&r(),g&&g()})),e)}s=s||"text";let A=await ut[G.findKey(ut,s)||"text"](u,e);return!a&&g&&g(),await new Promise(((t,n)=>{Le(t,n,{data:A,headers:_e.from(u.headers),status:u.status,statusText:u.statusText,config:e,request:p})}))}catch(t){if(g&&g(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new re("Network Error",re.ERR_NETWORK,e,p),{cause:t.cause||t});throw re.from(t,t&&t.code,e,p)}})};G.forEach(it,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const lt=e=>`- ${e}`,st=e=>G.isFunction(e)||null===e||!1===e,ct=e=>{e=G.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let u=0;u<t;u++){let t;if(n=e[u],r=n,!st(n)&&(r=it[(t=String(n)).toLowerCase()],void 0===r))throw new re(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+u]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(lt).join("\n"):" "+lt(e[0]):"as no adapter specified";throw new re("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function ft(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Te(null,e)}function dt(e){return ft(e),e.headers=_e.from(e.headers),e.data=Ne.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),ct(e.adapter||ke.adapter)(e).then((function(t){return ft(e),t.data=Ne.call(e,e.transformResponse,t),t.headers=_e.from(t.headers),t}),(function(t){return Re(t)||(ft(e),t&&t.response&&(t.response.data=Ne.call(e,e.transformResponse,t.response),t.response.headers=_e.from(t.response.headers))),Promise.reject(t)}))}const pt={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{pt[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const ht={};pt.transitional=function(e,t,n){function r(e,t){return"[Axios v1.7.7] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,u)=>{if(!1===e)throw new re(r(o," has been removed"+(t?" in "+t:"")),re.ERR_DEPRECATED);return t&&!ht[o]&&(ht[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,u)}};const gt={assertOptions:function(e,t,n){if("object"!=typeof e)throw new re("options must be an object",re.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const u=r[o],a=t[u];if(a){const t=e[u],n=void 0===t||a(t,u,e);if(!0!==n)throw new re("option "+u+" must be "+n,re.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new re("Unknown option "+u,re.ERR_BAD_OPTION)}},validators:pt},mt=gt.validators;class At{constructor(e){this.defaults=e,this.interceptors={request:new ge,response:new ge}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=$e(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&gt.assertOptions(n,{silentJSONParsing:mt.transitional(mt.boolean),forcedJSONParsing:mt.transitional(mt.boolean),clarifyTimeoutError:mt.transitional(mt.boolean)},!1),null!=r&&(G.isFunction(r)?t.paramsSerializer={serialize:r}:gt.assertOptions(r,{encode:mt.function,serialize:mt.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let u=o&&G.merge(o.common,o[t.method]);o&&G.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=_e.concat(u,o);const a=[];let i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const l=[];let s;this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)}));let c,f=0;if(!i){const e=[dt.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,l),c=e.length,s=Promise.resolve(t);f<c;)s=s.then(e[f++],e[f++]);return s}c=a.length;let d=t;for(f=0;f<c;){const e=a[f++],t=a[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{s=dt.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,c=l.length;f<c;)s=s.then(l[f++],l[f++]);return s}getUri(e){return he(We((e=$e(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}G.forEach(["delete","get","head","options"],(function(e){At.prototype[e]=function(t,n){return this.request($e(n||{},{method:e,url:t,data:(n||{}).data}))}})),G.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request($e(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}At.prototype[e]=t(),At.prototype[e+"Form"]=t(!0)}));const yt=At;class vt{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Te(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new vt((function(t){e=t})),cancel:e}}}const Ct=vt,bt={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(bt).forEach((([e,t])=>{bt[t]=e}));const Et=bt,wt=function e(t){const n=new yt(t),r=s(yt.prototype.request,n);return G.extend(r,yt.prototype,n,{allOwnKeys:!0}),G.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e($e(t,n))},r}(ke);wt.Axios=yt,wt.CanceledError=Te,wt.CancelToken=Ct,wt.isCancel=Re,wt.VERSION="1.7.7",wt.toFormData=le,wt.AxiosError=re,wt.Cancel=wt.CanceledError,wt.all=function(e){return Promise.all(e)},wt.spread=function(e){return function(t){return e.apply(null,t)}},wt.isAxiosError=function(e){return G.isObject(e)&&!0===e.isAxiosError},wt.mergeConfig=$e,wt.AxiosHeaders=_e,wt.formToJSON=e=>Be(G.isHTMLForm(e)?new FormData(e):e),wt.getAdapter=ct,wt.HttpStatusCode=Et,wt.default=wt;const Bt=wt;var xt=n(7762),kt=Bt.create({baseURL:"http://localhost:8000",headers:{Authorization:localStorage.getItem(xt.z)}}),Ft=function(e,t){var n,r,u,s={user:a.M3},c={api:kt,navigate:e},f=(n=l({},s),r=(0,i.UY)(n),u=[],{getReducerMap:function(){return n},reduce:function(e,t){if(u.length>0){e=l({},e);for(var n=0,o=u;n<o.length;n++)delete e[o[n]];u=[]}return r(e,t)},add:function(e,t){e&&!n[e]&&(n[e]=t,r=(0,i.UY)(n))},remove:function(e){e&&n[e]&&(delete n[e],u.push(e),r=(0,i.UY)(n))}}),d=(0,o.xC)({reducer:f.reduce,middleware:function(e){return e({thunk:{extraArgument:c}})},devTools:!1,preloadedState:t});return d.reducerManager=f,d},St=u.I0},1230:(e,t,n)=>{"use strict";n.d(t,{BY:()=>u,n5:()=>o,hI:()=>r.hI});var r=n(596),o=function(e){var t,n;return(null===(n=null===(t=null==e?void 0:e.user)||void 0===t?void 0:t.authData)||void 0===n?void 0:n.id)||""},u=function(e){var t;return(null===(t=null==e?void 0:e.user)||void 0===t?void 0:t.authorized)||!1}},596:(e,t,n)=>{"use strict";n.d(t,{hI:()=>a,M3:()=>i});var r=n(5162),o=n(7762),u=(0,r.oM)({name:"user",initialState:{authData:{id:"",username:""},authorized:!1},reducers:{login:function(e,t){e.authData.id=t.payload.id,e.authData.username=t.payload.username,e.authorized=!0;var n={id:t.payload.id,username:t.payload.username};localStorage.setItem(o.z,JSON.stringify(n))},logout:function(e,t){e.authorized=!1,e.authData={id:"",username:""},localStorage.removeItem(o.z)},updateUser:function(e){var t=JSON.parse(localStorage.getItem(o.z));null!=t&&(e.authData.id=t.id,e.authData.username=t.username,e.authorized=!0)}}}),a=u.actions,i=u.reducer},5682:(e,t,n)=>{"use strict";n.d(t,{U0:()=>r,aA:()=>o.a}),n(3446);var r=(0,n(7294).lazy)((function(){return n.e(117).then(n.bind(n,3117))})),o=n(8793)},8793:(e,t,n)=>{"use strict";n.d(t,{a:()=>u});var r=n(5162),o=n(1230),u=(0,r.hg)("login/loginByUserName",(function(e,t){return n=void 0,r=void 0,a=function(){var n,r,u,a,i;return function(e,t){var n,r,o,u,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u&&(u=0,i[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(l){switch(l.label){case 0:return l.trys.push([0,2,,3]),[4,t.extra.api.post("/login",e)];case 1:return(n=l.sent()).data?(t.dispatch(o.hI.login(n.data)),[2,n.data]):[2,t.rejectWithValue("No data in response")];case 2:return r=l.sent(),u=(null===(i=null===(a=r.response)||void 0===a?void 0:a.data)||void 0===i?void 0:i.message)||"Failed to login",[2,t.rejectWithValue(u)];case 3:return[2]}}))},new((u=void 0)||(u=Promise))((function(e,t){function o(e){try{l(a.next(e))}catch(e){t(e)}}function i(e){try{l(a.throw(e))}catch(e){t(e)}}function l(t){var n;t.done?e(t.value):(n=t.value,n instanceof u?n:new u((function(e){e(n)}))).then(o,i)}l((a=a.apply(n,r||[])).next())}));var n,r,u,a}))},3446:(e,t,n)=>{"use strict";n.d(t,{OU:()=>a});var r=n(5162),o=n(5682),u=(0,r.oM)({name:"loginForm",initialState:{isLoading:!1,password:"",username:"",error:""},reducers:{setUsername:function(e,t){e.username=t.payload},setPassword:function(e,t){e.password=t.payload},setError:function(e,t){e.error=t.payload}},extraReducers:function(e){e.addCase(o.aA.fulfilled,(function(e,t){e.error="",e.isLoading=!1})).addCase(o.aA.rejected,(function(e,t){e.error=t.payload,e.isLoading=!1})).addCase(o.aA.pending,(function(e,t){e.isLoading=!0,e.error=""}))}}),a=(u.actions,u.reducer)},7762:(e,t,n)=>{"use strict";n.d(t,{z:()=>r});var r="user"},3005:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,u=t.length;o<u;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};function o(e,t,n){return void 0===t&&(t={}),void 0===n&&(n=[]),r(r([e],n.filter(Boolean),!0),Object.entries(t).filter((function(e){e[0];var t=e[1];return Boolean(t)})).map((function(e){return e[0]})),!0).join(" ")}},3556:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var r=n(5893),o=n(7294),u=n(3005);const a={button:"V1xcToqa",outline:"b1WFHlvg",rounded:"W4zjaqeH"};var i=(0,o.memo)((function(e){var t,n=e.otherClasses,o=e.onClick,i=e.variants,l=e.children;return(0,r.jsx)("button",{"data-testid":"button_test",onClick:o,className:(0,u.A)(a.button,(t={},t[a.outline]=null==i?void 0:i.find((function(e){return"outline"==e})),t[a.primary]=null==i?void 0:i.find((function(e){return"primary"==e})),t[a.rounded]=null==i?void 0:i.find((function(e){return"rounded"==e})),t[a.secondary]=null==i?void 0:i.find((function(e){return"secondary"==e})),t),[n]),children:l})}))},4417:(e,t,n)=>{"use strict";n.d(t,{a:()=>u});var r=n(5893),o=n(3005);const u=function(e){var t=e.someClasses;return function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}}(e,["someClasses"]),(0,r.jsxs)("div",{className:(0,o.A)("pCh3zPzW",{},[t]),children:[(0,r.jsx)("div",{}),(0,r.jsx)("div",{}),(0,r.jsx)("div",{}),(0,r.jsx)("div",{}),(0,r.jsx)("div",{}),(0,r.jsx)("div",{}),(0,r.jsx)("div",{}),(0,r.jsx)("div",{})]})}},5380:(e,t,n)=>{"use strict";n.d(t,{x:()=>i});var r=n(5893),o=n(7294),u=n(3005);const a={Text:"jrhzYrHX",small:"pIEZmV70",medium:"bzcswVjl",large:"vz5A8Oad",primary:"vTVoqUMt",secondary:"Bu4CjzKF",error:"VCxWSrMC",success:"SEw807aY",warning:"QxKll2Al",normal:"HjqpOnrY",bold:"ulbeq1aZ",left:"H_2z_7MJ",center:"GnZ1kyrP",right:"UlVcGHPS"};var i=(0,o.memo)((function(e){var t=e.tag,n=void 0===t?"p":t,o=e.size,i=void 0===o?"medium":o,l=e.color,s=e.weight,c=void 0===s?"normal":s,f=e.align,d=void 0===f?"left":f,p=e.children,h=e.className,g=(0,u.A)(a.Text,{},[a[i],a[l],a[c],a[d],h]);return(0,r.jsx)(n,{className:g,children:p})}))},6486:(e,t,n)=>{var r=n(6133),o=n(3427);e.exports=function(e,t,n){var u=o(e,t);return n||(u=u.replace(/ (?=\d)/g,"_")),u.replace(/ (.)/g,(function(e,n){return r(n,t)}))}},6166:e=>{var t={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{İ:"i",I:"ı",İ:"i"}},az:{regexp:/[\u0130]/g,map:{İ:"i",I:"ı",İ:"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇",Į:"į̇",Ì:"i̇̀",Í:"i̇́",Ĩ:"i̇̃"}}};e.exports=function(e,n){var r=t[n];return e=null==e?"":String(e),r&&(e=e.replace(r.regexp,(function(e){return r.map[e]}))),e.toLowerCase()}},3427:(e,t,n)=>{var r=n(6166),o=n(9791),u=n(2287),a=n(1252);e.exports=function(e,t,n){return null==e?"":(n="string"!=typeof n?" ":n,e=String(e).replace(u,"$1 $2").replace(a,"$1 $2").replace(o,(function(e,t,r){return 0===t||t===r.length-e.length?"":n})),r(e,t))}},2287:e=>{e.exports=/([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g},1252:e=>{e.exports=/([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g},9791:e=>{e.exports=/[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g},4098:function(e,t){var n="undefined"!=typeof self?self:this,r=function(){function e(){this.fetch=!1,this.DOMException=n.DOMException}return e.prototype=n,new e}();!function(e){!function(t){var n="URLSearchParams"in e,r="Symbol"in e&&"iterator"in Symbol,o="FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),u="FormData"in e,a="ArrayBuffer"in e;if(a)var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(e){return e&&i.indexOf(Object.prototype.toString.call(e))>-1};function s(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function c(e){return"string"!=typeof e&&(e=String(e)),e}function f(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return r&&(t[Symbol.iterator]=function(){return t}),t}function d(e){this.map={},e instanceof d?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function h(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function g(e){var t=new FileReader,n=h(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function A(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:o&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:u&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:n&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():a&&o&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(e)||l(e))?this._bodyArrayBuffer=m(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},o&&(this.blob=function(){var e=p(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(g)}),this.text=function(){var e,t,n,r=p(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,n=h(t=new FileReader),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},u&&(this.formData=function(){return this.text().then(C)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(e,t){e=s(e),t=c(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},d.prototype.delete=function(e){delete this.map[s(e)]},d.prototype.get=function(e){return e=s(e),this.has(e)?this.map[e]:null},d.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},d.prototype.set=function(e,t){this.map[s(e)]=c(t)},d.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},d.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),f(e)},d.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),f(e)},d.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),f(e)},r&&(d.prototype[Symbol.iterator]=d.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(e,t){var n,r,o=(t=t||{}).body;if(e instanceof v){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new d(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new d(t.headers)),this.method=(r=(n=t.method||this.method||"GET").toUpperCase(),y.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function C(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function b(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new d(t.headers),this.url=t.url||"",this._initBody(e)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},A.call(v.prototype),A.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},b.error=function(){var e=new b(null,{status:0,statusText:""});return e.type="error",e};var E=[301,302,303,307,308];b.redirect=function(e,t){if(-1===E.indexOf(t))throw new RangeError("Invalid status code");return new b(null,{status:t,headers:{location:e}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function w(e,n){return new Promise((function(r,u){var a=new v(e,n);if(a.signal&&a.signal.aborted)return u(new t.DOMException("Aborted","AbortError"));var i=new XMLHttpRequest;function l(){i.abort()}i.onload=function(){var e,t,n={status:i.status,statusText:i.statusText,headers:(e=i.getAllResponseHeaders()||"",t=new d,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}})),t)};n.url="responseURL"in i?i.responseURL:n.headers.get("X-Request-URL");var o="response"in i?i.response:i.responseText;r(new b(o,n))},i.onerror=function(){u(new TypeError("Network request failed"))},i.ontimeout=function(){u(new TypeError("Network request failed"))},i.onabort=function(){u(new t.DOMException("Aborted","AbortError"))},i.open(a.method,a.url,!0),"include"===a.credentials?i.withCredentials=!0:"omit"===a.credentials&&(i.withCredentials=!1),"responseType"in i&&o&&(i.responseType="blob"),a.headers.forEach((function(e,t){i.setRequestHeader(t,e)})),a.signal&&(a.signal.addEventListener("abort",l),i.onreadystatechange=function(){4===i.readyState&&a.signal.removeEventListener("abort",l)}),i.send(void 0===a._bodyInit?null:a._bodyInit)}))}w.polyfill=!0,e.fetch||(e.fetch=w,e.Headers=d,e.Request=v,e.Response=b),t.Headers=d,t.Request=v,t.Response=b,t.fetch=w,Object.defineProperty(t,"__esModule",{value:!0})}({})}(r),r.fetch.ponyfill=!0,delete r.fetch.polyfill;var o=r;(t=o.fetch).default=o.fetch,t.fetch=o.fetch,t.Headers=o.Headers,t.Request=o.Request,t.Response=o.Response,e.exports=t},5712:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(7537),o=n.n(r),u=n(3645),a=n.n(u),i=n(1667),l=n.n(i),s=new URL(n(9362),n.b),c=new URL(n(2429),n.b),f=new URL(n(4120),n.b),d=a()(o()),p=l()(s),h=l()(c),g=l()(f);d.push([e.id,"/* required styles */\r\n\r\n.leaflet-pane,\r\n.leaflet-tile,\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow,\r\n.leaflet-tile-container,\r\n.leaflet-pane > svg,\r\n.leaflet-pane > canvas,\r\n.leaflet-zoom-box,\r\n.leaflet-image-layer,\r\n.leaflet-layer {\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\t}\r\n.leaflet-container {\r\n\toverflow: hidden;\r\n\t}\r\n.leaflet-tile,\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow {\r\n\t-webkit-user-select: none;\r\n\t   -moz-user-select: none;\r\n\t        user-select: none;\r\n\t  -webkit-user-drag: none;\r\n\t}\r\n/* Prevents IE11 from highlighting tiles in blue */\r\n.leaflet-tile::selection {\r\n\tbackground: transparent;\r\n}\r\n/* Safari renders non-retina tile on retina better with this, but Chrome is worse */\r\n.leaflet-safari .leaflet-tile {\r\n\timage-rendering: -webkit-optimize-contrast;\r\n\t}\r\n/* hack that prevents hw layers \"stretching\" when loading new tiles */\r\n.leaflet-safari .leaflet-tile-container {\r\n\twidth: 1600px;\r\n\theight: 1600px;\r\n\t-webkit-transform-origin: 0 0;\r\n\t}\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow {\r\n\tdisplay: block;\r\n\t}\r\n/* .leaflet-container svg: reset svg max-width decleration shipped in Joomla! (joomla.org) 3.x */\r\n/* .leaflet-container img: map is broken in FF if you have max-width: 100% on tiles */\r\n.leaflet-container .leaflet-overlay-pane svg {\r\n\tmax-width: none !important;\r\n\tmax-height: none !important;\r\n\t}\r\n.leaflet-container .leaflet-marker-pane img,\r\n.leaflet-container .leaflet-shadow-pane img,\r\n.leaflet-container .leaflet-tile-pane img,\r\n.leaflet-container img.leaflet-image-layer,\r\n.leaflet-container .leaflet-tile {\r\n\tmax-width: none !important;\r\n\tmax-height: none !important;\r\n\twidth: auto;\r\n\tpadding: 0;\r\n\t}\r\n\r\n.leaflet-container img.leaflet-tile {\r\n\t/* See: https://bugs.chromium.org/p/chromium/issues/detail?id=600120 */\r\n\tmix-blend-mode: plus-lighter;\r\n}\r\n\r\n.leaflet-container.leaflet-touch-zoom {\r\n\t-ms-touch-action: pan-x pan-y;\r\n\ttouch-action: pan-x pan-y;\r\n\t}\r\n.leaflet-container.leaflet-touch-drag {\r\n\t-ms-touch-action: pinch-zoom;\r\n\t/* Fallback for FF which doesn't support pinch-zoom */\r\n\ttouch-action: none;\r\n\ttouch-action: pinch-zoom;\r\n}\r\n.leaflet-container.leaflet-touch-drag.leaflet-touch-zoom {\r\n\t-ms-touch-action: none;\r\n\ttouch-action: none;\r\n}\r\n.leaflet-container {\r\n\t-webkit-tap-highlight-color: transparent;\r\n}\r\n.leaflet-container a {\r\n\t-webkit-tap-highlight-color: rgba(51, 181, 229, 0.4);\r\n}\r\n.leaflet-tile {\r\n\tfilter: inherit;\r\n\tvisibility: hidden;\r\n\t}\r\n.leaflet-tile-loaded {\r\n\tvisibility: inherit;\r\n\t}\r\n.leaflet-zoom-box {\r\n\twidth: 0;\r\n\theight: 0;\r\n\t-moz-box-sizing: border-box;\r\n\t     box-sizing: border-box;\r\n\tz-index: 800;\r\n\t}\r\n/* workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=888319 */\r\n.leaflet-overlay-pane svg {\r\n\t-moz-user-select: none;\r\n\t}\r\n\r\n.leaflet-pane         { z-index: 400; }\r\n\r\n.leaflet-tile-pane    { z-index: 200; }\r\n.leaflet-overlay-pane { z-index: 400; }\r\n.leaflet-shadow-pane  { z-index: 500; }\r\n.leaflet-marker-pane  { z-index: 600; }\r\n.leaflet-tooltip-pane   { z-index: 650; }\r\n.leaflet-popup-pane   { z-index: 700; }\r\n\r\n.leaflet-map-pane canvas { z-index: 100; }\r\n.leaflet-map-pane svg    { z-index: 200; }\r\n\r\n.leaflet-vml-shape {\r\n\twidth: 1px;\r\n\theight: 1px;\r\n\t}\r\n.lvml {\r\n\tbehavior: url(#default#VML);\r\n\tdisplay: inline-block;\r\n\tposition: absolute;\r\n\t}\r\n\r\n\r\n/* control positioning */\r\n\r\n.leaflet-control {\r\n\tposition: relative;\r\n\tz-index: 800;\r\n\tpointer-events: visiblePainted; /* IE 9-10 doesn't have auto */\r\n\tpointer-events: auto;\r\n\t}\r\n.leaflet-top,\r\n.leaflet-bottom {\r\n\tposition: absolute;\r\n\tz-index: 1000;\r\n\tpointer-events: none;\r\n\t}\r\n.leaflet-top {\r\n\ttop: 0;\r\n\t}\r\n.leaflet-right {\r\n\tright: 0;\r\n\t}\r\n.leaflet-bottom {\r\n\tbottom: 0;\r\n\t}\r\n.leaflet-left {\r\n\tleft: 0;\r\n\t}\r\n.leaflet-control {\r\n\tfloat: left;\r\n\tclear: both;\r\n\t}\r\n.leaflet-right .leaflet-control {\r\n\tfloat: right;\r\n\t}\r\n.leaflet-top .leaflet-control {\r\n\tmargin-top: 10px;\r\n\t}\r\n.leaflet-bottom .leaflet-control {\r\n\tmargin-bottom: 10px;\r\n\t}\r\n.leaflet-left .leaflet-control {\r\n\tmargin-left: 10px;\r\n\t}\r\n.leaflet-right .leaflet-control {\r\n\tmargin-right: 10px;\r\n\t}\r\n\r\n\r\n/* zoom and fade animations */\r\n\r\n.leaflet-fade-anim .leaflet-popup {\r\n\topacity: 0;\r\n\t-webkit-transition: opacity 0.2s linear;\r\n\t   -moz-transition: opacity 0.2s linear;\r\n\t        transition: opacity 0.2s linear;\r\n\t}\r\n.leaflet-fade-anim .leaflet-map-pane .leaflet-popup {\r\n\topacity: 1;\r\n\t}\r\n.leaflet-zoom-animated {\r\n\t-webkit-transform-origin: 0 0;\r\n\t    -ms-transform-origin: 0 0;\r\n\t        transform-origin: 0 0;\r\n\t}\r\nsvg.leaflet-zoom-animated {\r\n\twill-change: transform;\r\n}\r\n\r\n.leaflet-zoom-anim .leaflet-zoom-animated {\r\n\t-webkit-transition: -webkit-transform 0.25s cubic-bezier(0,0,0.25,1);\r\n\t   -moz-transition:    -moz-transform 0.25s cubic-bezier(0,0,0.25,1);\r\n\t        transition:         transform 0.25s cubic-bezier(0,0,0.25,1);\r\n\t}\r\n.leaflet-zoom-anim .leaflet-tile,\r\n.leaflet-pan-anim .leaflet-tile {\r\n\t-webkit-transition: none;\r\n\t   -moz-transition: none;\r\n\t        transition: none;\r\n\t}\r\n\r\n.leaflet-zoom-anim .leaflet-zoom-hide {\r\n\tvisibility: hidden;\r\n\t}\r\n\r\n\r\n/* cursors */\r\n\r\n.leaflet-interactive {\r\n\tcursor: pointer;\r\n\t}\r\n.leaflet-grab {\r\n\tcursor: -webkit-grab;\r\n\tcursor:    -moz-grab;\r\n\tcursor:         grab;\r\n\t}\r\n.leaflet-crosshair,\r\n.leaflet-crosshair .leaflet-interactive {\r\n\tcursor: crosshair;\r\n\t}\r\n.leaflet-popup-pane,\r\n.leaflet-control {\r\n\tcursor: auto;\r\n\t}\r\n.leaflet-dragging .leaflet-grab,\r\n.leaflet-dragging .leaflet-grab .leaflet-interactive,\r\n.leaflet-dragging .leaflet-marker-draggable {\r\n\tcursor: move;\r\n\tcursor: -webkit-grabbing;\r\n\tcursor:    -moz-grabbing;\r\n\tcursor:         grabbing;\r\n\t}\r\n\r\n/* marker & overlays interactivity */\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow,\r\n.leaflet-image-layer,\r\n.leaflet-pane > svg path,\r\n.leaflet-tile-container {\r\n\tpointer-events: none;\r\n\t}\r\n\r\n.leaflet-marker-icon.leaflet-interactive,\r\n.leaflet-image-layer.leaflet-interactive,\r\n.leaflet-pane > svg path.leaflet-interactive,\r\nsvg.leaflet-image-layer.leaflet-interactive path {\r\n\tpointer-events: visiblePainted; /* IE 9-10 doesn't have auto */\r\n\tpointer-events: auto;\r\n\t}\r\n\r\n/* visual tweaks */\r\n\r\n.leaflet-container {\r\n\tbackground: #ddd;\r\n\toutline-offset: 1px;\r\n\t}\r\n.leaflet-container a {\r\n\tcolor: #0078A8;\r\n\t}\r\n.leaflet-zoom-box {\r\n\tborder: 2px dotted #38f;\r\n\tbackground: rgba(255,255,255,0.5);\r\n\t}\r\n\r\n\r\n/* general typography */\r\n.leaflet-container {\r\n\tfont-family: \"Helvetica Neue\", Arial, Helvetica, sans-serif;\r\n\tfont-size: 12px;\r\n\tfont-size: 0.75rem;\r\n\tline-height: 1.5;\r\n\t}\r\n\r\n\r\n/* general toolbar styles */\r\n\r\n.leaflet-bar {\r\n\tbox-shadow: 0 1px 5px rgba(0,0,0,0.65);\r\n\tborder-radius: 4px;\r\n\t}\r\n.leaflet-bar a {\r\n\tbackground-color: #fff;\r\n\tborder-bottom: 1px solid #ccc;\r\n\twidth: 26px;\r\n\theight: 26px;\r\n\tline-height: 26px;\r\n\tdisplay: block;\r\n\ttext-align: center;\r\n\ttext-decoration: none;\r\n\tcolor: black;\r\n\t}\r\n.leaflet-bar a,\r\n.leaflet-control-layers-toggle {\r\n\tbackground-position: 50% 50%;\r\n\tbackground-repeat: no-repeat;\r\n\tdisplay: block;\r\n\t}\r\n.leaflet-bar a:hover,\r\n.leaflet-bar a:focus {\r\n\tbackground-color: #f4f4f4;\r\n\t}\r\n.leaflet-bar a:first-child {\r\n\tborder-top-left-radius: 4px;\r\n\tborder-top-right-radius: 4px;\r\n\t}\r\n.leaflet-bar a:last-child {\r\n\tborder-bottom-left-radius: 4px;\r\n\tborder-bottom-right-radius: 4px;\r\n\tborder-bottom: none;\r\n\t}\r\n.leaflet-bar a.leaflet-disabled {\r\n\tcursor: default;\r\n\tbackground-color: #f4f4f4;\r\n\tcolor: #bbb;\r\n\t}\r\n\r\n.leaflet-touch .leaflet-bar a {\r\n\twidth: 30px;\r\n\theight: 30px;\r\n\tline-height: 30px;\r\n\t}\r\n.leaflet-touch .leaflet-bar a:first-child {\r\n\tborder-top-left-radius: 2px;\r\n\tborder-top-right-radius: 2px;\r\n\t}\r\n.leaflet-touch .leaflet-bar a:last-child {\r\n\tborder-bottom-left-radius: 2px;\r\n\tborder-bottom-right-radius: 2px;\r\n\t}\r\n\r\n/* zoom control */\r\n\r\n.leaflet-control-zoom-in,\r\n.leaflet-control-zoom-out {\r\n\tfont: bold 18px 'Lucida Console', Monaco, monospace;\r\n\ttext-indent: 1px;\r\n\t}\r\n\r\n.leaflet-touch .leaflet-control-zoom-in, .leaflet-touch .leaflet-control-zoom-out  {\r\n\tfont-size: 22px;\r\n\t}\r\n\r\n\r\n/* layers control */\r\n\r\n.leaflet-control-layers {\r\n\tbox-shadow: 0 1px 5px rgba(0,0,0,0.4);\r\n\tbackground: #fff;\r\n\tborder-radius: 5px;\r\n\t}\r\n.leaflet-control-layers-toggle {\r\n\tbackground-image: url("+p+");\r\n\twidth: 36px;\r\n\theight: 36px;\r\n\t}\r\n.leaflet-retina .leaflet-control-layers-toggle {\r\n\tbackground-image: url("+h+");\r\n\tbackground-size: 26px 26px;\r\n\t}\r\n.leaflet-touch .leaflet-control-layers-toggle {\r\n\twidth: 44px;\r\n\theight: 44px;\r\n\t}\r\n.leaflet-control-layers .leaflet-control-layers-list,\r\n.leaflet-control-layers-expanded .leaflet-control-layers-toggle {\r\n\tdisplay: none;\r\n\t}\r\n.leaflet-control-layers-expanded .leaflet-control-layers-list {\r\n\tdisplay: block;\r\n\tposition: relative;\r\n\t}\r\n.leaflet-control-layers-expanded {\r\n\tpadding: 6px 10px 6px 6px;\r\n\tcolor: #333;\r\n\tbackground: #fff;\r\n\t}\r\n.leaflet-control-layers-scrollbar {\r\n\toverflow-y: scroll;\r\n\toverflow-x: hidden;\r\n\tpadding-right: 5px;\r\n\t}\r\n.leaflet-control-layers-selector {\r\n\tmargin-top: 2px;\r\n\tposition: relative;\r\n\ttop: 1px;\r\n\t}\r\n.leaflet-control-layers label {\r\n\tdisplay: block;\r\n\tfont-size: 13px;\r\n\tfont-size: 1.08333em;\r\n\t}\r\n.leaflet-control-layers-separator {\r\n\theight: 0;\r\n\tborder-top: 1px solid #ddd;\r\n\tmargin: 5px -10px 5px -6px;\r\n\t}\r\n\r\n/* Default icon URLs */\r\n.leaflet-default-icon-path { /* used only in path-guessing heuristic, see L.Icon.Default */\r\n\tbackground-image: url("+g+');\r\n\t}\r\n\r\n\r\n/* attribution and scale controls */\r\n\r\n.leaflet-container .leaflet-control-attribution {\r\n\tbackground: #fff;\r\n\tbackground: rgba(255, 255, 255, 0.8);\r\n\tmargin: 0;\r\n\t}\r\n.leaflet-control-attribution,\r\n.leaflet-control-scale-line {\r\n\tpadding: 0 5px;\r\n\tcolor: #333;\r\n\tline-height: 1.4;\r\n\t}\r\n.leaflet-control-attribution a {\r\n\ttext-decoration: none;\r\n\t}\r\n.leaflet-control-attribution a:hover,\r\n.leaflet-control-attribution a:focus {\r\n\ttext-decoration: underline;\r\n\t}\r\n.leaflet-attribution-flag {\r\n\tdisplay: inline !important;\r\n\tvertical-align: baseline !important;\r\n\twidth: 1em;\r\n\theight: 0.6669em;\r\n\t}\r\n.leaflet-left .leaflet-control-scale {\r\n\tmargin-left: 5px;\r\n\t}\r\n.leaflet-bottom .leaflet-control-scale {\r\n\tmargin-bottom: 5px;\r\n\t}\r\n.leaflet-control-scale-line {\r\n\tborder: 2px solid #777;\r\n\tborder-top: none;\r\n\tline-height: 1.1;\r\n\tpadding: 2px 5px 1px;\r\n\twhite-space: nowrap;\r\n\t-moz-box-sizing: border-box;\r\n\t     box-sizing: border-box;\r\n\tbackground: rgba(255, 255, 255, 0.8);\r\n\ttext-shadow: 1px 1px #fff;\r\n\t}\r\n.leaflet-control-scale-line:not(:first-child) {\r\n\tborder-top: 2px solid #777;\r\n\tborder-bottom: none;\r\n\tmargin-top: -2px;\r\n\t}\r\n.leaflet-control-scale-line:not(:first-child):not(:last-child) {\r\n\tborder-bottom: 2px solid #777;\r\n\t}\r\n\r\n.leaflet-touch .leaflet-control-attribution,\r\n.leaflet-touch .leaflet-control-layers,\r\n.leaflet-touch .leaflet-bar {\r\n\tbox-shadow: none;\r\n\t}\r\n.leaflet-touch .leaflet-control-layers,\r\n.leaflet-touch .leaflet-bar {\r\n\tborder: 2px solid rgba(0,0,0,0.2);\r\n\tbackground-clip: padding-box;\r\n\t}\r\n\r\n\r\n/* popup */\r\n\r\n.leaflet-popup {\r\n\tposition: absolute;\r\n\ttext-align: center;\r\n\tmargin-bottom: 20px;\r\n\t}\r\n.leaflet-popup-content-wrapper {\r\n\tpadding: 1px;\r\n\ttext-align: left;\r\n\tborder-radius: 12px;\r\n\t}\r\n.leaflet-popup-content {\r\n\tmargin: 13px 24px 13px 20px;\r\n\tline-height: 1.3;\r\n\tfont-size: 13px;\r\n\tfont-size: 1.08333em;\r\n\tmin-height: 1px;\r\n\t}\r\n.leaflet-popup-content p {\r\n\tmargin: 17px 0;\r\n\tmargin: 1.3em 0;\r\n\t}\r\n.leaflet-popup-tip-container {\r\n\twidth: 40px;\r\n\theight: 20px;\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\tmargin-top: -1px;\r\n\tmargin-left: -20px;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\t}\r\n.leaflet-popup-tip {\r\n\twidth: 17px;\r\n\theight: 17px;\r\n\tpadding: 1px;\r\n\r\n\tmargin: -10px auto 0;\r\n\tpointer-events: auto;\r\n\r\n\t-webkit-transform: rotate(45deg);\r\n\t   -moz-transform: rotate(45deg);\r\n\t    -ms-transform: rotate(45deg);\r\n\t        transform: rotate(45deg);\r\n\t}\r\n.leaflet-popup-content-wrapper,\r\n.leaflet-popup-tip {\r\n\tbackground: white;\r\n\tcolor: #333;\r\n\tbox-shadow: 0 3px 14px rgba(0,0,0,0.4);\r\n\t}\r\n.leaflet-container a.leaflet-popup-close-button {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tborder: none;\r\n\ttext-align: center;\r\n\twidth: 24px;\r\n\theight: 24px;\r\n\tfont: 16px/24px Tahoma, Verdana, sans-serif;\r\n\tcolor: #757575;\r\n\ttext-decoration: none;\r\n\tbackground: transparent;\r\n\t}\r\n.leaflet-container a.leaflet-popup-close-button:hover,\r\n.leaflet-container a.leaflet-popup-close-button:focus {\r\n\tcolor: #585858;\r\n\t}\r\n.leaflet-popup-scrolled {\r\n\toverflow: auto;\r\n\t}\r\n\r\n.leaflet-oldie .leaflet-popup-content-wrapper {\r\n\t-ms-zoom: 1;\r\n\t}\r\n.leaflet-oldie .leaflet-popup-tip {\r\n\twidth: 24px;\r\n\tmargin: 0 auto;\r\n\r\n\t-ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678)";\r\n\tfilter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678);\r\n\t}\r\n\r\n.leaflet-oldie .leaflet-control-zoom,\r\n.leaflet-oldie .leaflet-control-layers,\r\n.leaflet-oldie .leaflet-popup-content-wrapper,\r\n.leaflet-oldie .leaflet-popup-tip {\r\n\tborder: 1px solid #999;\r\n\t}\r\n\r\n\r\n/* div icon */\r\n\r\n.leaflet-div-icon {\r\n\tbackground: #fff;\r\n\tborder: 1px solid #666;\r\n\t}\r\n\r\n\r\n/* Tooltip */\r\n/* Base styles for the element that has a tooltip */\r\n.leaflet-tooltip {\r\n\tposition: absolute;\r\n\tpadding: 6px;\r\n\tbackground-color: #fff;\r\n\tborder: 1px solid #fff;\r\n\tborder-radius: 3px;\r\n\tcolor: #222;\r\n\twhite-space: nowrap;\r\n\t-webkit-user-select: none;\r\n\t-moz-user-select: none;\r\n\t-ms-user-select: none;\r\n\tuser-select: none;\r\n\tpointer-events: none;\r\n\tbox-shadow: 0 1px 3px rgba(0,0,0,0.4);\r\n\t}\r\n.leaflet-tooltip.leaflet-interactive {\r\n\tcursor: pointer;\r\n\tpointer-events: auto;\r\n\t}\r\n.leaflet-tooltip-top:before,\r\n.leaflet-tooltip-bottom:before,\r\n.leaflet-tooltip-left:before,\r\n.leaflet-tooltip-right:before {\r\n\tposition: absolute;\r\n\tpointer-events: none;\r\n\tborder: 6px solid transparent;\r\n\tbackground: transparent;\r\n\tcontent: "";\r\n\t}\r\n\r\n/* Directions */\r\n\r\n.leaflet-tooltip-bottom {\r\n\tmargin-top: 6px;\r\n}\r\n.leaflet-tooltip-top {\r\n\tmargin-top: -6px;\r\n}\r\n.leaflet-tooltip-bottom:before,\r\n.leaflet-tooltip-top:before {\r\n\tleft: 50%;\r\n\tmargin-left: -6px;\r\n\t}\r\n.leaflet-tooltip-top:before {\r\n\tbottom: 0;\r\n\tmargin-bottom: -12px;\r\n\tborder-top-color: #fff;\r\n\t}\r\n.leaflet-tooltip-bottom:before {\r\n\ttop: 0;\r\n\tmargin-top: -12px;\r\n\tmargin-left: -6px;\r\n\tborder-bottom-color: #fff;\r\n\t}\r\n.leaflet-tooltip-left {\r\n\tmargin-left: -6px;\r\n}\r\n.leaflet-tooltip-right {\r\n\tmargin-left: 6px;\r\n}\r\n.leaflet-tooltip-left:before,\r\n.leaflet-tooltip-right:before {\r\n\ttop: 50%;\r\n\tmargin-top: -6px;\r\n\t}\r\n.leaflet-tooltip-left:before {\r\n\tright: 0;\r\n\tmargin-right: -12px;\r\n\tborder-left-color: #fff;\r\n\t}\r\n.leaflet-tooltip-right:before {\r\n\tleft: 0;\r\n\tmargin-left: -12px;\r\n\tborder-right-color: #fff;\r\n\t}\r\n\r\n/* Printing */\r\n\r\n@media print {\r\n\t/* Prevent printers from removing background-images of controls. */\r\n\t.leaflet-control {\r\n\t\t-webkit-print-color-adjust: exact;\r\n\t\tprint-color-adjust: exact;\r\n\t\t}\r\n\t}\r\n',"",{version:3,sources:["webpack://./node_modules/leaflet/dist/leaflet.css"],names:[],mappings:"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",sourcesContent:['/* required styles */\r\n\r\n.leaflet-pane,\r\n.leaflet-tile,\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow,\r\n.leaflet-tile-container,\r\n.leaflet-pane > svg,\r\n.leaflet-pane > canvas,\r\n.leaflet-zoom-box,\r\n.leaflet-image-layer,\r\n.leaflet-layer {\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\t}\r\n.leaflet-container {\r\n\toverflow: hidden;\r\n\t}\r\n.leaflet-tile,\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow {\r\n\t-webkit-user-select: none;\r\n\t   -moz-user-select: none;\r\n\t        user-select: none;\r\n\t  -webkit-user-drag: none;\r\n\t}\r\n/* Prevents IE11 from highlighting tiles in blue */\r\n.leaflet-tile::selection {\r\n\tbackground: transparent;\r\n}\r\n/* Safari renders non-retina tile on retina better with this, but Chrome is worse */\r\n.leaflet-safari .leaflet-tile {\r\n\timage-rendering: -webkit-optimize-contrast;\r\n\t}\r\n/* hack that prevents hw layers "stretching" when loading new tiles */\r\n.leaflet-safari .leaflet-tile-container {\r\n\twidth: 1600px;\r\n\theight: 1600px;\r\n\t-webkit-transform-origin: 0 0;\r\n\t}\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow {\r\n\tdisplay: block;\r\n\t}\r\n/* .leaflet-container svg: reset svg max-width decleration shipped in Joomla! (joomla.org) 3.x */\r\n/* .leaflet-container img: map is broken in FF if you have max-width: 100% on tiles */\r\n.leaflet-container .leaflet-overlay-pane svg {\r\n\tmax-width: none !important;\r\n\tmax-height: none !important;\r\n\t}\r\n.leaflet-container .leaflet-marker-pane img,\r\n.leaflet-container .leaflet-shadow-pane img,\r\n.leaflet-container .leaflet-tile-pane img,\r\n.leaflet-container img.leaflet-image-layer,\r\n.leaflet-container .leaflet-tile {\r\n\tmax-width: none !important;\r\n\tmax-height: none !important;\r\n\twidth: auto;\r\n\tpadding: 0;\r\n\t}\r\n\r\n.leaflet-container img.leaflet-tile {\r\n\t/* See: https://bugs.chromium.org/p/chromium/issues/detail?id=600120 */\r\n\tmix-blend-mode: plus-lighter;\r\n}\r\n\r\n.leaflet-container.leaflet-touch-zoom {\r\n\t-ms-touch-action: pan-x pan-y;\r\n\ttouch-action: pan-x pan-y;\r\n\t}\r\n.leaflet-container.leaflet-touch-drag {\r\n\t-ms-touch-action: pinch-zoom;\r\n\t/* Fallback for FF which doesn\'t support pinch-zoom */\r\n\ttouch-action: none;\r\n\ttouch-action: pinch-zoom;\r\n}\r\n.leaflet-container.leaflet-touch-drag.leaflet-touch-zoom {\r\n\t-ms-touch-action: none;\r\n\ttouch-action: none;\r\n}\r\n.leaflet-container {\r\n\t-webkit-tap-highlight-color: transparent;\r\n}\r\n.leaflet-container a {\r\n\t-webkit-tap-highlight-color: rgba(51, 181, 229, 0.4);\r\n}\r\n.leaflet-tile {\r\n\tfilter: inherit;\r\n\tvisibility: hidden;\r\n\t}\r\n.leaflet-tile-loaded {\r\n\tvisibility: inherit;\r\n\t}\r\n.leaflet-zoom-box {\r\n\twidth: 0;\r\n\theight: 0;\r\n\t-moz-box-sizing: border-box;\r\n\t     box-sizing: border-box;\r\n\tz-index: 800;\r\n\t}\r\n/* workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=888319 */\r\n.leaflet-overlay-pane svg {\r\n\t-moz-user-select: none;\r\n\t}\r\n\r\n.leaflet-pane         { z-index: 400; }\r\n\r\n.leaflet-tile-pane    { z-index: 200; }\r\n.leaflet-overlay-pane { z-index: 400; }\r\n.leaflet-shadow-pane  { z-index: 500; }\r\n.leaflet-marker-pane  { z-index: 600; }\r\n.leaflet-tooltip-pane   { z-index: 650; }\r\n.leaflet-popup-pane   { z-index: 700; }\r\n\r\n.leaflet-map-pane canvas { z-index: 100; }\r\n.leaflet-map-pane svg    { z-index: 200; }\r\n\r\n.leaflet-vml-shape {\r\n\twidth: 1px;\r\n\theight: 1px;\r\n\t}\r\n.lvml {\r\n\tbehavior: url(#default#VML);\r\n\tdisplay: inline-block;\r\n\tposition: absolute;\r\n\t}\r\n\r\n\r\n/* control positioning */\r\n\r\n.leaflet-control {\r\n\tposition: relative;\r\n\tz-index: 800;\r\n\tpointer-events: visiblePainted; /* IE 9-10 doesn\'t have auto */\r\n\tpointer-events: auto;\r\n\t}\r\n.leaflet-top,\r\n.leaflet-bottom {\r\n\tposition: absolute;\r\n\tz-index: 1000;\r\n\tpointer-events: none;\r\n\t}\r\n.leaflet-top {\r\n\ttop: 0;\r\n\t}\r\n.leaflet-right {\r\n\tright: 0;\r\n\t}\r\n.leaflet-bottom {\r\n\tbottom: 0;\r\n\t}\r\n.leaflet-left {\r\n\tleft: 0;\r\n\t}\r\n.leaflet-control {\r\n\tfloat: left;\r\n\tclear: both;\r\n\t}\r\n.leaflet-right .leaflet-control {\r\n\tfloat: right;\r\n\t}\r\n.leaflet-top .leaflet-control {\r\n\tmargin-top: 10px;\r\n\t}\r\n.leaflet-bottom .leaflet-control {\r\n\tmargin-bottom: 10px;\r\n\t}\r\n.leaflet-left .leaflet-control {\r\n\tmargin-left: 10px;\r\n\t}\r\n.leaflet-right .leaflet-control {\r\n\tmargin-right: 10px;\r\n\t}\r\n\r\n\r\n/* zoom and fade animations */\r\n\r\n.leaflet-fade-anim .leaflet-popup {\r\n\topacity: 0;\r\n\t-webkit-transition: opacity 0.2s linear;\r\n\t   -moz-transition: opacity 0.2s linear;\r\n\t        transition: opacity 0.2s linear;\r\n\t}\r\n.leaflet-fade-anim .leaflet-map-pane .leaflet-popup {\r\n\topacity: 1;\r\n\t}\r\n.leaflet-zoom-animated {\r\n\t-webkit-transform-origin: 0 0;\r\n\t    -ms-transform-origin: 0 0;\r\n\t        transform-origin: 0 0;\r\n\t}\r\nsvg.leaflet-zoom-animated {\r\n\twill-change: transform;\r\n}\r\n\r\n.leaflet-zoom-anim .leaflet-zoom-animated {\r\n\t-webkit-transition: -webkit-transform 0.25s cubic-bezier(0,0,0.25,1);\r\n\t   -moz-transition:    -moz-transform 0.25s cubic-bezier(0,0,0.25,1);\r\n\t        transition:         transform 0.25s cubic-bezier(0,0,0.25,1);\r\n\t}\r\n.leaflet-zoom-anim .leaflet-tile,\r\n.leaflet-pan-anim .leaflet-tile {\r\n\t-webkit-transition: none;\r\n\t   -moz-transition: none;\r\n\t        transition: none;\r\n\t}\r\n\r\n.leaflet-zoom-anim .leaflet-zoom-hide {\r\n\tvisibility: hidden;\r\n\t}\r\n\r\n\r\n/* cursors */\r\n\r\n.leaflet-interactive {\r\n\tcursor: pointer;\r\n\t}\r\n.leaflet-grab {\r\n\tcursor: -webkit-grab;\r\n\tcursor:    -moz-grab;\r\n\tcursor:         grab;\r\n\t}\r\n.leaflet-crosshair,\r\n.leaflet-crosshair .leaflet-interactive {\r\n\tcursor: crosshair;\r\n\t}\r\n.leaflet-popup-pane,\r\n.leaflet-control {\r\n\tcursor: auto;\r\n\t}\r\n.leaflet-dragging .leaflet-grab,\r\n.leaflet-dragging .leaflet-grab .leaflet-interactive,\r\n.leaflet-dragging .leaflet-marker-draggable {\r\n\tcursor: move;\r\n\tcursor: -webkit-grabbing;\r\n\tcursor:    -moz-grabbing;\r\n\tcursor:         grabbing;\r\n\t}\r\n\r\n/* marker & overlays interactivity */\r\n.leaflet-marker-icon,\r\n.leaflet-marker-shadow,\r\n.leaflet-image-layer,\r\n.leaflet-pane > svg path,\r\n.leaflet-tile-container {\r\n\tpointer-events: none;\r\n\t}\r\n\r\n.leaflet-marker-icon.leaflet-interactive,\r\n.leaflet-image-layer.leaflet-interactive,\r\n.leaflet-pane > svg path.leaflet-interactive,\r\nsvg.leaflet-image-layer.leaflet-interactive path {\r\n\tpointer-events: visiblePainted; /* IE 9-10 doesn\'t have auto */\r\n\tpointer-events: auto;\r\n\t}\r\n\r\n/* visual tweaks */\r\n\r\n.leaflet-container {\r\n\tbackground: #ddd;\r\n\toutline-offset: 1px;\r\n\t}\r\n.leaflet-container a {\r\n\tcolor: #0078A8;\r\n\t}\r\n.leaflet-zoom-box {\r\n\tborder: 2px dotted #38f;\r\n\tbackground: rgba(255,255,255,0.5);\r\n\t}\r\n\r\n\r\n/* general typography */\r\n.leaflet-container {\r\n\tfont-family: "Helvetica Neue", Arial, Helvetica, sans-serif;\r\n\tfont-size: 12px;\r\n\tfont-size: 0.75rem;\r\n\tline-height: 1.5;\r\n\t}\r\n\r\n\r\n/* general toolbar styles */\r\n\r\n.leaflet-bar {\r\n\tbox-shadow: 0 1px 5px rgba(0,0,0,0.65);\r\n\tborder-radius: 4px;\r\n\t}\r\n.leaflet-bar a {\r\n\tbackground-color: #fff;\r\n\tborder-bottom: 1px solid #ccc;\r\n\twidth: 26px;\r\n\theight: 26px;\r\n\tline-height: 26px;\r\n\tdisplay: block;\r\n\ttext-align: center;\r\n\ttext-decoration: none;\r\n\tcolor: black;\r\n\t}\r\n.leaflet-bar a,\r\n.leaflet-control-layers-toggle {\r\n\tbackground-position: 50% 50%;\r\n\tbackground-repeat: no-repeat;\r\n\tdisplay: block;\r\n\t}\r\n.leaflet-bar a:hover,\r\n.leaflet-bar a:focus {\r\n\tbackground-color: #f4f4f4;\r\n\t}\r\n.leaflet-bar a:first-child {\r\n\tborder-top-left-radius: 4px;\r\n\tborder-top-right-radius: 4px;\r\n\t}\r\n.leaflet-bar a:last-child {\r\n\tborder-bottom-left-radius: 4px;\r\n\tborder-bottom-right-radius: 4px;\r\n\tborder-bottom: none;\r\n\t}\r\n.leaflet-bar a.leaflet-disabled {\r\n\tcursor: default;\r\n\tbackground-color: #f4f4f4;\r\n\tcolor: #bbb;\r\n\t}\r\n\r\n.leaflet-touch .leaflet-bar a {\r\n\twidth: 30px;\r\n\theight: 30px;\r\n\tline-height: 30px;\r\n\t}\r\n.leaflet-touch .leaflet-bar a:first-child {\r\n\tborder-top-left-radius: 2px;\r\n\tborder-top-right-radius: 2px;\r\n\t}\r\n.leaflet-touch .leaflet-bar a:last-child {\r\n\tborder-bottom-left-radius: 2px;\r\n\tborder-bottom-right-radius: 2px;\r\n\t}\r\n\r\n/* zoom control */\r\n\r\n.leaflet-control-zoom-in,\r\n.leaflet-control-zoom-out {\r\n\tfont: bold 18px \'Lucida Console\', Monaco, monospace;\r\n\ttext-indent: 1px;\r\n\t}\r\n\r\n.leaflet-touch .leaflet-control-zoom-in, .leaflet-touch .leaflet-control-zoom-out  {\r\n\tfont-size: 22px;\r\n\t}\r\n\r\n\r\n/* layers control */\r\n\r\n.leaflet-control-layers {\r\n\tbox-shadow: 0 1px 5px rgba(0,0,0,0.4);\r\n\tbackground: #fff;\r\n\tborder-radius: 5px;\r\n\t}\r\n.leaflet-control-layers-toggle {\r\n\tbackground-image: url(images/layers.png);\r\n\twidth: 36px;\r\n\theight: 36px;\r\n\t}\r\n.leaflet-retina .leaflet-control-layers-toggle {\r\n\tbackground-image: url(images/layers-2x.png);\r\n\tbackground-size: 26px 26px;\r\n\t}\r\n.leaflet-touch .leaflet-control-layers-toggle {\r\n\twidth: 44px;\r\n\theight: 44px;\r\n\t}\r\n.leaflet-control-layers .leaflet-control-layers-list,\r\n.leaflet-control-layers-expanded .leaflet-control-layers-toggle {\r\n\tdisplay: none;\r\n\t}\r\n.leaflet-control-layers-expanded .leaflet-control-layers-list {\r\n\tdisplay: block;\r\n\tposition: relative;\r\n\t}\r\n.leaflet-control-layers-expanded {\r\n\tpadding: 6px 10px 6px 6px;\r\n\tcolor: #333;\r\n\tbackground: #fff;\r\n\t}\r\n.leaflet-control-layers-scrollbar {\r\n\toverflow-y: scroll;\r\n\toverflow-x: hidden;\r\n\tpadding-right: 5px;\r\n\t}\r\n.leaflet-control-layers-selector {\r\n\tmargin-top: 2px;\r\n\tposition: relative;\r\n\ttop: 1px;\r\n\t}\r\n.leaflet-control-layers label {\r\n\tdisplay: block;\r\n\tfont-size: 13px;\r\n\tfont-size: 1.08333em;\r\n\t}\r\n.leaflet-control-layers-separator {\r\n\theight: 0;\r\n\tborder-top: 1px solid #ddd;\r\n\tmargin: 5px -10px 5px -6px;\r\n\t}\r\n\r\n/* Default icon URLs */\r\n.leaflet-default-icon-path { /* used only in path-guessing heuristic, see L.Icon.Default */\r\n\tbackground-image: url(images/marker-icon.png);\r\n\t}\r\n\r\n\r\n/* attribution and scale controls */\r\n\r\n.leaflet-container .leaflet-control-attribution {\r\n\tbackground: #fff;\r\n\tbackground: rgba(255, 255, 255, 0.8);\r\n\tmargin: 0;\r\n\t}\r\n.leaflet-control-attribution,\r\n.leaflet-control-scale-line {\r\n\tpadding: 0 5px;\r\n\tcolor: #333;\r\n\tline-height: 1.4;\r\n\t}\r\n.leaflet-control-attribution a {\r\n\ttext-decoration: none;\r\n\t}\r\n.leaflet-control-attribution a:hover,\r\n.leaflet-control-attribution a:focus {\r\n\ttext-decoration: underline;\r\n\t}\r\n.leaflet-attribution-flag {\r\n\tdisplay: inline !important;\r\n\tvertical-align: baseline !important;\r\n\twidth: 1em;\r\n\theight: 0.6669em;\r\n\t}\r\n.leaflet-left .leaflet-control-scale {\r\n\tmargin-left: 5px;\r\n\t}\r\n.leaflet-bottom .leaflet-control-scale {\r\n\tmargin-bottom: 5px;\r\n\t}\r\n.leaflet-control-scale-line {\r\n\tborder: 2px solid #777;\r\n\tborder-top: none;\r\n\tline-height: 1.1;\r\n\tpadding: 2px 5px 1px;\r\n\twhite-space: nowrap;\r\n\t-moz-box-sizing: border-box;\r\n\t     box-sizing: border-box;\r\n\tbackground: rgba(255, 255, 255, 0.8);\r\n\ttext-shadow: 1px 1px #fff;\r\n\t}\r\n.leaflet-control-scale-line:not(:first-child) {\r\n\tborder-top: 2px solid #777;\r\n\tborder-bottom: none;\r\n\tmargin-top: -2px;\r\n\t}\r\n.leaflet-control-scale-line:not(:first-child):not(:last-child) {\r\n\tborder-bottom: 2px solid #777;\r\n\t}\r\n\r\n.leaflet-touch .leaflet-control-attribution,\r\n.leaflet-touch .leaflet-control-layers,\r\n.leaflet-touch .leaflet-bar {\r\n\tbox-shadow: none;\r\n\t}\r\n.leaflet-touch .leaflet-control-layers,\r\n.leaflet-touch .leaflet-bar {\r\n\tborder: 2px solid rgba(0,0,0,0.2);\r\n\tbackground-clip: padding-box;\r\n\t}\r\n\r\n\r\n/* popup */\r\n\r\n.leaflet-popup {\r\n\tposition: absolute;\r\n\ttext-align: center;\r\n\tmargin-bottom: 20px;\r\n\t}\r\n.leaflet-popup-content-wrapper {\r\n\tpadding: 1px;\r\n\ttext-align: left;\r\n\tborder-radius: 12px;\r\n\t}\r\n.leaflet-popup-content {\r\n\tmargin: 13px 24px 13px 20px;\r\n\tline-height: 1.3;\r\n\tfont-size: 13px;\r\n\tfont-size: 1.08333em;\r\n\tmin-height: 1px;\r\n\t}\r\n.leaflet-popup-content p {\r\n\tmargin: 17px 0;\r\n\tmargin: 1.3em 0;\r\n\t}\r\n.leaflet-popup-tip-container {\r\n\twidth: 40px;\r\n\theight: 20px;\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\tmargin-top: -1px;\r\n\tmargin-left: -20px;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\t}\r\n.leaflet-popup-tip {\r\n\twidth: 17px;\r\n\theight: 17px;\r\n\tpadding: 1px;\r\n\r\n\tmargin: -10px auto 0;\r\n\tpointer-events: auto;\r\n\r\n\t-webkit-transform: rotate(45deg);\r\n\t   -moz-transform: rotate(45deg);\r\n\t    -ms-transform: rotate(45deg);\r\n\t        transform: rotate(45deg);\r\n\t}\r\n.leaflet-popup-content-wrapper,\r\n.leaflet-popup-tip {\r\n\tbackground: white;\r\n\tcolor: #333;\r\n\tbox-shadow: 0 3px 14px rgba(0,0,0,0.4);\r\n\t}\r\n.leaflet-container a.leaflet-popup-close-button {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tborder: none;\r\n\ttext-align: center;\r\n\twidth: 24px;\r\n\theight: 24px;\r\n\tfont: 16px/24px Tahoma, Verdana, sans-serif;\r\n\tcolor: #757575;\r\n\ttext-decoration: none;\r\n\tbackground: transparent;\r\n\t}\r\n.leaflet-container a.leaflet-popup-close-button:hover,\r\n.leaflet-container a.leaflet-popup-close-button:focus {\r\n\tcolor: #585858;\r\n\t}\r\n.leaflet-popup-scrolled {\r\n\toverflow: auto;\r\n\t}\r\n\r\n.leaflet-oldie .leaflet-popup-content-wrapper {\r\n\t-ms-zoom: 1;\r\n\t}\r\n.leaflet-oldie .leaflet-popup-tip {\r\n\twidth: 24px;\r\n\tmargin: 0 auto;\r\n\r\n\t-ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678)";\r\n\tfilter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678);\r\n\t}\r\n\r\n.leaflet-oldie .leaflet-control-zoom,\r\n.leaflet-oldie .leaflet-control-layers,\r\n.leaflet-oldie .leaflet-popup-content-wrapper,\r\n.leaflet-oldie .leaflet-popup-tip {\r\n\tborder: 1px solid #999;\r\n\t}\r\n\r\n\r\n/* div icon */\r\n\r\n.leaflet-div-icon {\r\n\tbackground: #fff;\r\n\tborder: 1px solid #666;\r\n\t}\r\n\r\n\r\n/* Tooltip */\r\n/* Base styles for the element that has a tooltip */\r\n.leaflet-tooltip {\r\n\tposition: absolute;\r\n\tpadding: 6px;\r\n\tbackground-color: #fff;\r\n\tborder: 1px solid #fff;\r\n\tborder-radius: 3px;\r\n\tcolor: #222;\r\n\twhite-space: nowrap;\r\n\t-webkit-user-select: none;\r\n\t-moz-user-select: none;\r\n\t-ms-user-select: none;\r\n\tuser-select: none;\r\n\tpointer-events: none;\r\n\tbox-shadow: 0 1px 3px rgba(0,0,0,0.4);\r\n\t}\r\n.leaflet-tooltip.leaflet-interactive {\r\n\tcursor: pointer;\r\n\tpointer-events: auto;\r\n\t}\r\n.leaflet-tooltip-top:before,\r\n.leaflet-tooltip-bottom:before,\r\n.leaflet-tooltip-left:before,\r\n.leaflet-tooltip-right:before {\r\n\tposition: absolute;\r\n\tpointer-events: none;\r\n\tborder: 6px solid transparent;\r\n\tbackground: transparent;\r\n\tcontent: "";\r\n\t}\r\n\r\n/* Directions */\r\n\r\n.leaflet-tooltip-bottom {\r\n\tmargin-top: 6px;\r\n}\r\n.leaflet-tooltip-top {\r\n\tmargin-top: -6px;\r\n}\r\n.leaflet-tooltip-bottom:before,\r\n.leaflet-tooltip-top:before {\r\n\tleft: 50%;\r\n\tmargin-left: -6px;\r\n\t}\r\n.leaflet-tooltip-top:before {\r\n\tbottom: 0;\r\n\tmargin-bottom: -12px;\r\n\tborder-top-color: #fff;\r\n\t}\r\n.leaflet-tooltip-bottom:before {\r\n\ttop: 0;\r\n\tmargin-top: -12px;\r\n\tmargin-left: -6px;\r\n\tborder-bottom-color: #fff;\r\n\t}\r\n.leaflet-tooltip-left {\r\n\tmargin-left: -6px;\r\n}\r\n.leaflet-tooltip-right {\r\n\tmargin-left: 6px;\r\n}\r\n.leaflet-tooltip-left:before,\r\n.leaflet-tooltip-right:before {\r\n\ttop: 50%;\r\n\tmargin-top: -6px;\r\n\t}\r\n.leaflet-tooltip-left:before {\r\n\tright: 0;\r\n\tmargin-right: -12px;\r\n\tborder-left-color: #fff;\r\n\t}\r\n.leaflet-tooltip-right:before {\r\n\tleft: 0;\r\n\tmargin-left: -12px;\r\n\tborder-right-color: #fff;\r\n\t}\r\n\r\n/* Printing */\r\n\r\n@media print {\r\n\t/* Prevent printers from removing background-images of controls. */\r\n\t.leaflet-control {\r\n\t\t-webkit-print-color-adjust: exact;\r\n\t\tprint-color-adjust: exact;\r\n\t\t}\r\n\t}\r\n'],sourceRoot:""}]);const m=d},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,u){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==u&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=u),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),u="/*# ".concat(o," */");return[t].concat([u]).join("\n")}return[t].join("\n")}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function u(){}u.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,u,a){if(a!==r){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:u,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(4142);function u(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,i={};function l(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function g(e,t,n,r,o,u,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=u,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var A=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function v(e,t,n,r){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(A,y);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(A,y);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(A,y);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var C=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,b=Symbol.for("react.element"),E=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),B=Symbol.for("react.strict_mode"),x=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),F=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),D=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),j=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var _=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var z,T=Object.assign;function L(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var M=!1;function I(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),u=r.stack.split("\n"),a=o.length-1,i=u.length-1;1<=a&&0<=i&&o[a]!==u[i];)i--;for(;1<=a&&0<=i;a--,i--)if(o[a]!==u[i]){if(1!==a||1!==i)do{if(a--,0>--i||o[a]!==u[i]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=i);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function U(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case w:return"Fragment";case E:return"Portal";case x:return"Profiler";case B:return"StrictMode";case D:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case F:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case S:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:q(e.type)||"Memo";case j:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(t);case 8:return t===B?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,u=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,u.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return T({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function J(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function G(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(u(91));return T({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(u(92));if(te(n)){if(1<n.length)throw Error(u(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ue(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var Ae=T({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(Ae[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(u(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(u(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(u(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(u(62))}}function ve(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ce=null;function be(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,we=null,Be=null;function xe(e){if(e=Co(e)){if("function"!=typeof Ee)throw Error(u(280));var t=e.stateNode;t&&(t=Eo(t),Ee(e.stateNode,e.type,t))}}function ke(e){we?Be?Be.push(e):Be=[e]:we=e}function Fe(){if(we){var e=we,t=Be;if(Be=we=null,xe(e),t)for(e=0;e<t.length;e++)xe(t[e])}}function Se(e,t){return e(t)}function De(){}var Oe=!1;function Pe(e,t,n){if(Oe)return e(t,n);Oe=!0;try{return Se(e,t,n)}finally{Oe=!1,(null!==we||null!==Be)&&(De(),Fe())}}function je(e,t){var n=e.stateNode;if(null===n)return null;var r=Eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(u(231,t,typeof n));return n}var _e=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){_e=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){_e=!1}function Re(e,t,n,r,o,u,a,i,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var ze=!1,Te=null,Le=!1,Me=null,Ie={onError:function(e){ze=!0,Te=e}};function Ue(e,t,n,r,o,u,a,i,l){ze=!1,Te=null,Re.apply(Ie,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(qe(e)!==e)throw Error(u(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(u(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return We(o),e;if(a===r)return We(o),t;a=a.sibling}throw Error(u(188))}if(n.return!==r.return)n=o,r=a;else{for(var i=!1,l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}if(!i)throw Error(u(189))}}if(n.alternate!==r)throw Error(u(190))}if(3!==n.tag)throw Error(u(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var Ze=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ge=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,ut=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/lt|0)|0},it=Math.log,lt=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,u=e.pingedLanes,a=268435455&n;if(0!==a){var i=a&~o;0!==i?r=ft(i):0!=(u&=a)&&(r=ft(u))}else 0!=(a=n&~o)?r=ft(a):0!==u&&(r=ft(u));if(0===r)return 0;if(0!==t&&t!==r&&!(t&o)&&((o=r&-r)>=(u=t&-t)||16===o&&4194240&u))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function At(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var vt=0;function Ct(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var bt,Et,wt,Bt,xt,kt=!1,Ft=[],St=null,Dt=null,Ot=null,Pt=new Map,jt=new Map,_t=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":St=null;break;case"dragenter":case"dragleave":Dt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":jt.delete(t.pointerId)}}function zt(e,t,n,r,o,u){return null===e||e.nativeEvent!==u?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:u,targetContainers:[o]},null!==t&&null!==(t=Co(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Tt(e){var t=vo(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void xt(e.priority,(function(){wt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Co(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ce=r,n.target.dispatchEvent(r),Ce=null,t.shift()}return!0}function Mt(e,t,n){Lt(e)&&n.delete(t)}function It(){kt=!1,null!==St&&Lt(St)&&(St=null),null!==Dt&&Lt(Dt)&&(Dt=null),null!==Ot&&Lt(Ot)&&(Ot=null),Pt.forEach(Mt),jt.forEach(Mt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,It)))}function qt(e){function t(t){return Ut(t,e)}if(0<Ft.length){Ut(Ft[0],e);for(var n=1;n<Ft.length;n++){var r=Ft[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==St&&Ut(St,e),null!==Dt&&Ut(Dt,e),null!==Ot&&Ut(Ot,e),Pt.forEach(t),jt.forEach(t),n=0;n<_t.length;n++)(r=_t[n]).blockedOn===e&&(r.blockedOn=null);for(;0<_t.length&&null===(n=_t[0]).blockedOn;)Tt(n),null===n.blockedOn&&_t.shift()}var Ht=C.ReactCurrentBatchConfig,Wt=!0;function Vt(e,t,n,r){var o=vt,u=Ht.transition;Ht.transition=null;try{vt=1,Zt(e,t,n,r)}finally{vt=o,Ht.transition=u}}function $t(e,t,n,r){var o=vt,u=Ht.transition;Ht.transition=null;try{vt=4,Zt(e,t,n,r)}finally{vt=o,Ht.transition=u}}function Zt(e,t,n,r){if(Wt){var o=Yt(e,t,n,r);if(null===o)Wr(e,t,r,Kt,n),Rt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return St=zt(St,e,t,n,r,o),!0;case"dragenter":return Dt=zt(Dt,e,t,n,r,o),!0;case"mouseover":return Ot=zt(Ot,e,t,n,r,o),!0;case"pointerover":var u=o.pointerId;return Pt.set(u,zt(Pt.get(u)||null,e,t,n,r,o)),!0;case"gotpointercapture":return u=o.pointerId,jt.set(u,zt(jt.get(u)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==o;){var u=Co(o);if(null!==u&&bt(u),null===(u=Yt(e,t,n,r))&&Wr(e,t,r,Kt,n),u===o)break;o=u}null!==o&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Kt=null;function Yt(e,t,n,r){if(Kt=null,null!==(e=vo(e=be(r))))if(null===(t=qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ge:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Gt=null;function en(){if(Gt)return Gt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,u=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[u-t];t++);return Gt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,u){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=u,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var un,an,ln,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=T({},sn,{view:0,detail:0}),dn=on(fn),pn=T({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(un=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=un=0,ln=e),un)},movementY:function(e){return"movementY"in e?e.movementY:an}}),hn=on(pn),gn=on(T({},pn,{dataTransfer:0})),mn=on(T({},fn,{relatedTarget:0})),An=on(T({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=T({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=on(yn),Cn=on(T({},sn,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=wn[e])&&!!t[e]}function xn(){return Bn}var kn=T({},fn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Fn=on(kn),Sn=on(T({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=on(T({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),On=on(T({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=T({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),jn=on(Pn),_n=[9,13,27,32],Nn=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var zn=c&&"TextEvent"in window&&!Rn,Tn=c&&(!Nn||Rn&&8<Rn&&11>=Rn),Ln=String.fromCharCode(32),Mn=!1;function In(e,t){switch(e){case"keyup":return-1!==_n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Vn(e,t,n,r){ke(r),0<(t=$r(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Zn=null;function Kn(e){Lr(e,0)}function Yn(e){if(Z(bo(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Gn="oninput"in document;if(!Gn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Gn="function"==typeof er.oninput}Jn=Gn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){$n&&($n.detachEvent("onpropertychange",nr),Zn=$n=null)}function nr(e){if("value"===e.propertyName&&Yn(Zn)){var t=[];Vn(t,Zn,e,be(e)),Pe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Zn=n,($n=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Zn)}function ur(e,t){if("click"===e)return Yn(t)}function ar(e,t){if("input"===e||"change"===e)return Yn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!ir(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,u=Math.min(r.start,o);r=void 0===r.end?u:Math.min(r.end,o),!e.extend&&u>r&&(o=r,r=u,u=o),o=cr(n,u);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),u>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,Ar=null,yr=null,vr=!1;function Cr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==mr||mr!==K(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&lr(yr,r)||(yr=r,0<(r=$r(Ar,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function br(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:br("Animation","AnimationEnd"),animationiteration:br("Animation","AnimationIteration"),animationstart:br("Animation","AnimationStart"),transitionend:br("Transition","TransitionEnd")},wr={},Br={};function xr(e){if(wr[e])return wr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Br)return wr[e]=n[t];return e}c&&(Br=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var kr=xr("animationend"),Fr=xr("animationiteration"),Sr=xr("animationstart"),Dr=xr("transitionend"),Or=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function jr(e,t){Or.set(e,t),l(t,[e])}for(var _r=0;_r<Pr.length;_r++){var Nr=Pr[_r];jr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}jr(kr,"onAnimationEnd"),jr(Fr,"onAnimationIteration"),jr(Sr,"onAnimationStart"),jr("dblclick","onDoubleClick"),jr("focusin","onFocus"),jr("focusout","onBlur"),jr(Dr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Tr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,i,l,s){if(Ue.apply(this,arguments),ze){if(!ze)throw Error(u(198));var c=Te;ze=!1,Te=null,Le||(Le=!0,Me=c)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var u=void 0;if(t)for(var a=r.length-1;0<=a;a--){var i=r[a],l=i.instance,s=i.currentTarget;if(i=i.listener,l!==u&&o.isPropagationStopped())break e;Tr(o,i,s),u=l}else for(a=0;a<r.length;a++){if(l=(i=r[a]).instance,s=i.currentTarget,i=i.listener,l!==u&&o.isPropagationStopped())break e;Tr(o,i,s),u=l}}}if(Le)throw e=Me,Le=!1,Me=null,e}function Mr(e,t){var n=t[mo];void 0===n&&(n=t[mo]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function qr(e){if(!e[Ur]){e[Ur]=!0,a.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Ir("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Qt(t)){case 1:var o=Vt;break;case 4:o=$t;break;default:o=Zt}n=o.bind(null,t,n,e),o=void 0,!_e||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,o){var u=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var i=r.stateNode.containerInfo;if(i===o||8===i.nodeType&&i.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==i;){if(null===(a=vo(i)))return;if(5===(l=a.tag)||6===l){r=u=a;continue e}i=i.parentNode}}r=r.return}Pe((function(){var r=u,o=be(n),a=[];e:{var i=Or.get(e);if(void 0!==i){var l=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Fn;break;case"focusin":s="focus",l=mn;break;case"focusout":s="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case kr:case Fr:case Sr:l=An;break;case Dr:l=On;break;case"scroll":l=dn;break;case"wheel":l=jn;break;case"copy":case"cut":case"paste":l=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Sn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&null!=(g=je(h,d))&&c.push(Vr(h,g,p))),f)break;h=h.return}0<c.length&&(i=new l(i,s,null,n,o),a.push({event:i,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Ce||!(s=n.relatedTarget||n.fromElement)||!vo(s)&&!s[go])&&(l||i)&&(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?vo(s):null)&&(s!==(f=qe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=hn,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Sn,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?i:bo(l),p=null==s?i:bo(s),(i=new c(g,h+"leave",l,n,o)).target=f,i.relatedTarget=p,g=null,vo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,g=c),f=g,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Zr(p))h++;for(p=0,g=d;g;g=Zr(g))p++;for(;0<h-p;)c=Zr(c),h--;for(;0<p-h;)d=Zr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Zr(c),d=Zr(d)}c=null}else c=null;null!==l&&Kr(a,i,l,c,!1),null!==s&&null!==f&&Kr(a,f,s,c,!0)}if("select"===(l=(i=r?bo(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===l&&"file"===i.type)var m=Qn;else if(Wn(i))if(Xn)m=ar;else{m=or;var A=rr}else(l=i.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(m=ur);switch(m&&(m=m(e,r))?Vn(a,m,n,o):(A&&A(e,i,r),"focusout"===e&&(A=i._wrapperState)&&A.controlled&&"number"===i.type&&ee(i,"number",i.value)),A=r?bo(r):window,e){case"focusin":(Wn(A)||"true"===A.contentEditable)&&(mr=A,Ar=r,yr=null);break;case"focusout":yr=Ar=mr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,Cr(a,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":Cr(a,n,o)}var y;if(Nn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else qn?In(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(Tn&&"ko"!==n.locale&&(qn||"onCompositionStart"!==v?"onCompositionEnd"===v&&qn&&(y=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,qn=!0)),0<(A=$r(r,v)).length&&(v=new Cn(v,e,null,n,o),a.push({event:v,listeners:A}),(y||null!==(y=Un(n)))&&(v.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Mn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Mn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Nn&&In(e,t)?(e=en(),Gt=Jt=Xt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Tn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=$r(r,"onBeforeInput")).length&&(o=new Cn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Lr(a,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $r(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,u=o.stateNode;5===o.tag&&null!==u&&(o=u,null!=(u=je(e,n))&&r.unshift(Vr(e,u,o)),null!=(u=je(e,t))&&r.push(Vr(e,u,o))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,o){for(var u=t._reactName,a=[];null!==n&&n!==r;){var i=n,l=i.alternate,s=i.stateNode;if(null!==l&&l===r)break;5===i.tag&&null!==s&&(i=s,o?null!=(l=je(n,u))&&a.unshift(Vr(n,l,i)):o||null!=(l=je(n,u))&&a.push(Vr(n,l,i))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Yr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Qr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(u(425))}function Gr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,uo="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==uo?function(e){return uo.resolve(null).then(e).catch(io)}:ro;function io(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void qt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);qt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,go="__reactContainer$"+fo,mo="__reactEvents$"+fo,Ao="__reactListeners$"+fo,yo="__reactHandles$"+fo;function vo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[go]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function Co(e){return!(e=e[po]||e[go])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function bo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(u(33))}function Eo(e){return e[ho]||null}var wo=[],Bo=-1;function xo(e){return{current:e}}function ko(e){0>Bo||(e.current=wo[Bo],wo[Bo]=null,Bo--)}function Fo(e,t){Bo++,wo[Bo]=e.current,e.current=t}var So={},Do=xo(So),Oo=xo(!1),Po=So;function jo(e,t){var n=e.type.contextTypes;if(!n)return So;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,u={};for(o in n)u[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=u),u}function _o(e){return null!=e.childContextTypes}function No(){ko(Oo),ko(Do)}function Ro(e,t,n){if(Do.current!==So)throw Error(u(168));Fo(Do,t),Fo(Oo,n)}function zo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(u(108,H(e)||"Unknown",o));return T({},n,r)}function To(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||So,Po=Do.current,Fo(Do,e),Fo(Oo,Oo.current),!0}function Lo(e,t,n){var r=e.stateNode;if(!r)throw Error(u(169));n?(e=zo(e,t,Po),r.__reactInternalMemoizedMergedChildContext=e,ko(Oo),ko(Do),Fo(Do,e)):ko(Oo),Fo(Oo,n)}var Mo=null,Io=!1,Uo=!1;function qo(e){null===Mo?Mo=[e]:Mo.push(e)}function Ho(){if(!Uo&&null!==Mo){Uo=!0;var e=0,t=vt;try{var n=Mo;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mo=null,Io=!1}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),Ze(Ge,Ho),t}finally{vt=t,Uo=!1}}return null}var Wo=[],Vo=0,$o=null,Zo=0,Ko=[],Yo=0,Qo=null,Xo=1,Jo="";function Go(e,t){Wo[Vo++]=Zo,Wo[Vo++]=$o,$o=e,Zo=t}function eu(e,t,n){Ko[Yo++]=Xo,Ko[Yo++]=Jo,Ko[Yo++]=Qo,Qo=e;var r=Xo;e=Jo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var u=32-at(t)+o;if(30<u){var a=o-o%5;u=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,Jo=u+e}else Xo=1<<u|n<<o|r,Jo=e}function tu(e){null!==e.return&&(Go(e,1),eu(e,1,0))}function nu(e){for(;e===$o;)$o=Wo[--Vo],Wo[Vo]=null,Zo=Wo[--Vo],Wo[Vo]=null;for(;e===Qo;)Qo=Ko[--Yo],Ko[Yo]=null,Jo=Ko[--Yo],Ko[Yo]=null,Xo=Ko[--Yo],Ko[Yo]=null}var ru=null,ou=null,uu=!1,au=null;function iu(e,t){var n=Ps(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lu(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ru=e,ou=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ru=e,ou=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ps(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ru=e,ou=null,!0);default:return!1}}function su(e){return!(!(1&e.mode)||128&e.flags)}function cu(e){if(uu){var t=ou;if(t){var n=t;if(!lu(e,t)){if(su(e))throw Error(u(418));t=so(n.nextSibling);var r=ru;t&&lu(e,t)?iu(r,n):(e.flags=-4097&e.flags|2,uu=!1,ru=e)}}else{if(su(e))throw Error(u(418));e.flags=-4097&e.flags|2,uu=!1,ru=e}}}function fu(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ru=e}function du(e){if(e!==ru)return!1;if(!uu)return fu(e),uu=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=ou)){if(su(e))throw pu(),Error(u(418));for(;t;)iu(e,t),t=so(t.nextSibling)}if(fu(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(u(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ou=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ou=null}}else ou=ru?so(e.stateNode.nextSibling):null;return!0}function pu(){for(var e=ou;e;)e=so(e.nextSibling)}function hu(){ou=ru=null,uu=!1}function gu(e){null===au?au=[e]:au.push(e)}var mu=C.ReactCurrentBatchConfig;function Au(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(u(309));var r=n.stateNode}if(!r)throw Error(u(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(u(284));if(!n._owner)throw Error(u(290,e))}return e}function yu(e,t){throw e=Object.prototype.toString.call(t),Error(u(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function vu(e){return(0,e._init)(e._payload)}function Cu(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=_s(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Ts(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var u=n.type;return u===w?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===j&&vu(u)===t.type)?((r=o(t,n.props)).ref=Au(e,t,n),r.return=e,r):((r=Ns(n.type,n.key,n.props,null,e.mode,r)).ref=Au(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ls(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,u){return null===t||7!==t.tag?((t=Rs(n,e.mode,r,u)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ts(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case b:return(n=Ns(t.type,t.key,t.props,null,e.mode,n)).ref=Au(e,null,t),n.return=e,n;case E:return(t=Ls(t,e.mode,n)).return=e,t;case j:return d(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Rs(t,e.mode,n,null)).return=e,t;yu(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case b:return n.key===o?s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null;case j:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||R(n))return null!==o?null:f(e,t,n,r,null);yu(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case b:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case j:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||R(r))return f(t,e=e.get(n)||null,r,o,null);yu(t,r)}return null}function g(o,u,i,l){for(var s=null,c=null,f=u,g=u=0,m=null;null!==f&&g<i.length;g++){f.index>g?(m=f,f=null):m=f.sibling;var A=p(o,f,i[g],l);if(null===A){null===f&&(f=m);break}e&&f&&null===A.alternate&&t(o,f),u=a(A,u,g),null===c?s=A:c.sibling=A,c=A,f=m}if(g===i.length)return n(o,f),uu&&Go(o,g),s;if(null===f){for(;g<i.length;g++)null!==(f=d(o,i[g],l))&&(u=a(f,u,g),null===c?s=f:c.sibling=f,c=f);return uu&&Go(o,g),s}for(f=r(o,f);g<i.length;g++)null!==(m=h(f,o,g,i[g],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?g:m.key),u=a(m,u,g),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(o,e)})),uu&&Go(o,g),s}function m(o,i,l,s){var c=R(l);if("function"!=typeof c)throw Error(u(150));if(null==(l=c.call(l)))throw Error(u(151));for(var f=c=null,g=i,m=i=0,A=null,y=l.next();null!==g&&!y.done;m++,y=l.next()){g.index>m?(A=g,g=null):A=g.sibling;var v=p(o,g,y.value,s);if(null===v){null===g&&(g=A);break}e&&g&&null===v.alternate&&t(o,g),i=a(v,i,m),null===f?c=v:f.sibling=v,f=v,g=A}if(y.done)return n(o,g),uu&&Go(o,m),c;if(null===g){for(;!y.done;m++,y=l.next())null!==(y=d(o,y.value,s))&&(i=a(y,i,m),null===f?c=y:f.sibling=y,f=y);return uu&&Go(o,m),c}for(g=r(o,g);!y.done;m++,y=l.next())null!==(y=h(g,o,m,y.value,s))&&(e&&null!==y.alternate&&g.delete(null===y.key?m:y.key),i=a(y,i,m),null===f?c=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(o,e)})),uu&&Go(o,m),c}return function e(r,u,a,l){if("object"==typeof a&&null!==a&&a.type===w&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case b:e:{for(var s=a.key,c=u;null!==c;){if(c.key===s){if((s=a.type)===w){if(7===c.tag){n(r,c.sibling),(u=o(c,a.props.children)).return=r,r=u;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===j&&vu(s)===c.type){n(r,c.sibling),(u=o(c,a.props)).ref=Au(r,c,a),u.return=r,r=u;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===w?((u=Rs(a.props.children,r.mode,l,a.key)).return=r,r=u):((l=Ns(a.type,a.key,a.props,null,r.mode,l)).ref=Au(r,u,a),l.return=r,r=l)}return i(r);case E:e:{for(c=a.key;null!==u;){if(u.key===c){if(4===u.tag&&u.stateNode.containerInfo===a.containerInfo&&u.stateNode.implementation===a.implementation){n(r,u.sibling),(u=o(u,a.children||[])).return=r,r=u;break e}n(r,u);break}t(r,u),u=u.sibling}(u=Ls(a,r.mode,l)).return=r,r=u}return i(r);case j:return e(r,u,(c=a._init)(a._payload),l)}if(te(a))return g(r,u,a,l);if(R(a))return m(r,u,a,l);yu(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==u&&6===u.tag?(n(r,u.sibling),(u=o(u,a)).return=r,r=u):(n(r,u),(u=Ts(a,r.mode,l)).return=r,r=u),i(r)):n(r,u)}}var bu=Cu(!0),Eu=Cu(!1),wu=xo(null),Bu=null,xu=null,ku=null;function Fu(){ku=xu=Bu=null}function Su(e){var t=wu.current;ko(wu),e._currentValue=t}function Du(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ou(e,t){Bu=e,ku=xu=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(vi=!0),e.firstContext=null)}function Pu(e){var t=e._currentValue;if(ku!==e)if(e={context:e,memoizedValue:t,next:null},null===xu){if(null===Bu)throw Error(u(308));xu=e,Bu.dependencies={lanes:0,firstContext:e}}else xu=xu.next=e;return t}var ju=null;function _u(e){null===ju?ju=[e]:ju.push(e)}function Nu(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,_u(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ru(e,r)}function Ru(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var zu=!1;function Tu(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Lu(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mu(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Iu(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Sl){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ru(e,n)}return null===(o=r.interleaved)?(t.next=t,_u(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ru(e,n)}function Uu(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function qu(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,u=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===u?o=u=a:u=u.next=a,n=n.next}while(null!==n);null===u?o=u=t:u=u.next=t}else o=u=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:u,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Hu(e,t,n,r){var o=e.updateQueue;zu=!1;var u=o.firstBaseUpdate,a=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var l=i,s=l.next;l.next=null,null===a?u=s:a.next=s,a=l;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=l)}if(null!==u){var f=o.baseState;for(a=0,c=s=l=null,i=u;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,g=i;switch(d=t,p=n,g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=g.payload)?h.call(p,f,d):h))break e;f=T({},f,d);break e;case 2:zu=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,l=f):c=c.next=p,a|=d;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(d=i).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(l=f),o.baseState=l,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===u&&(o.shared.lanes=0);zl|=a,e.lanes=a,e.memoizedState=f}}function Wu(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(u(191,o));o.call(r)}}}var Vu={},$u=xo(Vu),Zu=xo(Vu),Ku=xo(Vu);function Yu(e){if(e===Vu)throw Error(u(174));return e}function Qu(e,t){switch(Fo(Ku,t),Fo(Zu,e),Fo($u,Vu),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ko($u),Fo($u,t)}function Xu(){ko($u),ko(Zu),ko(Ku)}function Ju(e){Yu(Ku.current);var t=Yu($u.current),n=le(t,e.type);t!==n&&(Fo(Zu,e),Fo($u,n))}function Gu(e){Zu.current===e&&(ko($u),ko(Zu))}var ea=xo(0);function ta(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var na=[];function ra(){for(var e=0;e<na.length;e++)na[e]._workInProgressVersionPrimary=null;na.length=0}var oa=C.ReactCurrentDispatcher,ua=C.ReactCurrentBatchConfig,aa=0,ia=null,la=null,sa=null,ca=!1,fa=!1,da=0,pa=0;function ha(){throw Error(u(321))}function ga(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ma(e,t,n,r,o,a){if(aa=a,ia=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oa.current=null===e||null===e.memoizedState?Ga:ei,e=n(r,o),fa){a=0;do{if(fa=!1,da=0,25<=a)throw Error(u(301));a+=1,sa=la=null,t.updateQueue=null,oa.current=ti,e=n(r,o)}while(fa)}if(oa.current=Ja,t=null!==la&&null!==la.next,aa=0,sa=la=ia=null,ca=!1,t)throw Error(u(300));return e}function Aa(){var e=0!==da;return da=0,e}function ya(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sa?ia.memoizedState=sa=e:sa=sa.next=e,sa}function va(){if(null===la){var e=ia.alternate;e=null!==e?e.memoizedState:null}else e=la.next;var t=null===sa?ia.memoizedState:sa.next;if(null!==t)sa=t,la=e;else{if(null===e)throw Error(u(310));e={memoizedState:(la=e).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===sa?ia.memoizedState=sa=e:sa=sa.next=e}return sa}function Ca(e,t){return"function"==typeof t?t(e):t}function ba(e){var t=va(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=la,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=i=null,s=null,c=a;do{var f=c.lane;if((aa&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(l=s=d,i=r):s=s.next=d,ia.lanes|=f,zl|=f}c=c.next}while(null!==c&&c!==a);null===s?i=r:s.next=l,ir(r,t.memoizedState)||(vi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ia.lanes|=a,zl|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ea(e){var t=va(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);ir(a,t.memoizedState)||(vi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function wa(){}function Ba(e,t){var n=ia,r=va(),o=t(),a=!ir(r.memoizedState,o);if(a&&(r.memoizedState=o,vi=!0),r=r.queue,za(Fa.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==sa&&1&sa.memoizedState.tag){if(n.flags|=2048,Pa(9,ka.bind(null,n,r,o,t),void 0,null),null===Dl)throw Error(u(349));30&aa||xa(n,t,o)}return o}function xa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ia.updateQueue)?(t={lastEffect:null,stores:null},ia.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function ka(e,t,n,r){t.value=n,t.getSnapshot=r,Sa(t)&&Da(e)}function Fa(e,t,n){return n((function(){Sa(t)&&Da(e)}))}function Sa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Da(e){var t=Ru(e,1);null!==t&&ns(t,e,1,-1)}function Oa(e){var t=ya();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:e},t.queue=e,e=e.dispatch=Ka.bind(null,ia,e),[t.memoizedState,e]}function Pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ia.updateQueue)?(t={lastEffect:null,stores:null},ia.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ja(){return va().memoizedState}function _a(e,t,n,r){var o=ya();ia.flags|=e,o.memoizedState=Pa(1|t,n,void 0,void 0===r?null:r)}function Na(e,t,n,r){var o=va();r=void 0===r?null:r;var u=void 0;if(null!==la){var a=la.memoizedState;if(u=a.destroy,null!==r&&ga(r,a.deps))return void(o.memoizedState=Pa(t,n,u,r))}ia.flags|=e,o.memoizedState=Pa(1|t,n,u,r)}function Ra(e,t){return _a(8390656,8,e,t)}function za(e,t){return Na(2048,8,e,t)}function Ta(e,t){return Na(4,2,e,t)}function La(e,t){return Na(4,4,e,t)}function Ma(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ia(e,t,n){return n=null!=n?n.concat([e]):null,Na(4,4,Ma.bind(null,t,e),n)}function Ua(){}function qa(e,t){var n=va();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ga(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ha(e,t){var n=va();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ga(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Wa(e,t,n){return 21&aa?(ir(n,t)||(n=gt(),ia.lanes|=n,zl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,vi=!0),e.memoizedState=n)}function Va(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=ua.transition;ua.transition={};try{e(!1),t()}finally{vt=n,ua.transition=r}}function $a(){return va().memoizedState}function Za(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ya(e)?Qa(t,n):null!==(n=Nu(e,t,n,r))&&(ns(n,e,r,es()),Xa(n,t,r))}function Ka(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ya(e))Qa(t,o);else{var u=e.alternate;if(0===e.lanes&&(null===u||0===u.lanes)&&null!==(u=t.lastRenderedReducer))try{var a=t.lastRenderedState,i=u(a,n);if(o.hasEagerState=!0,o.eagerState=i,ir(i,a)){var l=t.interleaved;return null===l?(o.next=o,_u(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Nu(e,t,o,r))&&(ns(n,e,r,o=es()),Xa(n,t,r))}}function Ya(e){var t=e.alternate;return e===ia||null!==t&&t===ia}function Qa(e,t){fa=ca=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xa(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Ja={readContext:Pu,useCallback:ha,useContext:ha,useEffect:ha,useImperativeHandle:ha,useInsertionEffect:ha,useLayoutEffect:ha,useMemo:ha,useReducer:ha,useRef:ha,useState:ha,useDebugValue:ha,useDeferredValue:ha,useTransition:ha,useMutableSource:ha,useSyncExternalStore:ha,useId:ha,unstable_isNewReconciler:!1},Ga={readContext:Pu,useCallback:function(e,t){return ya().memoizedState=[e,void 0===t?null:t],e},useContext:Pu,useEffect:Ra,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_a(4194308,4,Ma.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _a(4194308,4,e,t)},useInsertionEffect:function(e,t){return _a(4,2,e,t)},useMemo:function(e,t){var n=ya();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ya();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Za.bind(null,ia,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ya().memoizedState=e},useState:Oa,useDebugValue:Ua,useDeferredValue:function(e){return ya().memoizedState=e},useTransition:function(){var e=Oa(!1),t=e[0];return e=Va.bind(null,e[1]),ya().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ia,o=ya();if(uu){if(void 0===n)throw Error(u(407));n=n()}else{if(n=t(),null===Dl)throw Error(u(349));30&aa||xa(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Ra(Fa.bind(null,r,a,e),[e]),r.flags|=2048,Pa(9,ka.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=ya(),t=Dl.identifierPrefix;if(uu){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=da++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ei={readContext:Pu,useCallback:qa,useContext:Pu,useEffect:za,useImperativeHandle:Ia,useInsertionEffect:Ta,useLayoutEffect:La,useMemo:Ha,useReducer:ba,useRef:ja,useState:function(){return ba(Ca)},useDebugValue:Ua,useDeferredValue:function(e){return Wa(va(),la.memoizedState,e)},useTransition:function(){return[ba(Ca)[0],va().memoizedState]},useMutableSource:wa,useSyncExternalStore:Ba,useId:$a,unstable_isNewReconciler:!1},ti={readContext:Pu,useCallback:qa,useContext:Pu,useEffect:za,useImperativeHandle:Ia,useInsertionEffect:Ta,useLayoutEffect:La,useMemo:Ha,useReducer:Ea,useRef:ja,useState:function(){return Ea(Ca)},useDebugValue:Ua,useDeferredValue:function(e){var t=va();return null===la?t.memoizedState=e:Wa(t,la.memoizedState,e)},useTransition:function(){return[Ea(Ca)[0],va().memoizedState]},useMutableSource:wa,useSyncExternalStore:Ba,useId:$a,unstable_isNewReconciler:!1};function ni(e,t){if(e&&e.defaultProps){for(var n in t=T({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ri(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var oi={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),u=Mu(r,o);u.payload=t,null!=n&&(u.callback=n),null!==(t=Iu(e,u,o))&&(ns(t,e,o,r),Uu(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),u=Mu(r,o);u.tag=1,u.payload=t,null!=n&&(u.callback=n),null!==(t=Iu(e,u,o))&&(ns(t,e,o,r),Uu(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Mu(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Iu(e,o,r))&&(ns(t,e,r,n),Uu(t,e,r))}};function ui(e,t,n,r,o,u,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,u,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,u))}function ai(e,t,n){var r=!1,o=So,u=t.contextType;return"object"==typeof u&&null!==u?u=Pu(u):(o=_o(t)?Po:Do.current,u=(r=null!=(r=t.contextTypes))?jo(e,o):So),t=new t(n,u),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=oi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=u),t}function ii(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&oi.enqueueReplaceState(t,t.state,null)}function li(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},Tu(e);var u=t.contextType;"object"==typeof u&&null!==u?o.context=Pu(u):(u=_o(t)?Po:Do.current,o.context=jo(e,u)),o.state=e.memoizedState,"function"==typeof(u=t.getDerivedStateFromProps)&&(ri(e,t,u,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&oi.enqueueReplaceState(o,o.state,null),Hu(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function si(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function ci(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var di="function"==typeof WeakMap?WeakMap:Map;function pi(e,t,n){(n=Mu(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Vl=r),fi(0,t)},n}function hi(e,t,n){(n=Mu(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fi(0,t)}}var u=e.stateNode;return null!==u&&"function"==typeof u.componentDidCatch&&(n.callback=function(){fi(0,t),"function"!=typeof r&&(null===$l?$l=new Set([this]):$l.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new di;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=xs.bind(null,e,t,n),t.then(e,e))}function mi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function Ai(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Mu(-1,1)).tag=2,Iu(n,t,1))),n.lanes|=1),e)}var yi=C.ReactCurrentOwner,vi=!1;function Ci(e,t,n,r){t.child=null===e?Eu(t,null,n,r):bu(t,e.child,n,r)}function bi(e,t,n,r,o){n=n.render;var u=t.ref;return Ou(t,o),r=ma(e,t,n,r,u,o),n=Aa(),null===e||vi?(uu&&n&&tu(t),t.flags|=1,Ci(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wi(e,t,o))}function Ei(e,t,n,r,o){if(null===e){var u=n.type;return"function"!=typeof u||js(u)||void 0!==u.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ns(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=u,wi(e,t,u,r,o))}if(u=e.child,!(e.lanes&o)){var a=u.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return Wi(e,t,o)}return t.flags|=1,(e=_s(u,r)).ref=t.ref,e.return=t,t.child=e}function wi(e,t,n,r,o){if(null!==e){var u=e.memoizedProps;if(lr(u,r)&&e.ref===t.ref){if(vi=!1,t.pendingProps=r=u,!(e.lanes&o))return t.lanes=e.lanes,Wi(e,t,o);131072&e.flags&&(vi=!0)}}return ki(e,t,n,r,o)}function Bi(e,t,n){var r=t.pendingProps,o=r.children,u=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==u?u.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Fo(_l,jl),jl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==u?u.baseLanes:n,Fo(_l,jl),jl|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Fo(_l,jl),jl|=n;else null!==u?(r=u.baseLanes|n,t.memoizedState=null):r=n,Fo(_l,jl),jl|=r;return Ci(e,t,o,n),t.child}function xi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ki(e,t,n,r,o){var u=_o(n)?Po:Do.current;return u=jo(t,u),Ou(t,o),n=ma(e,t,n,r,u,o),r=Aa(),null===e||vi?(uu&&r&&tu(t),t.flags|=1,Ci(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wi(e,t,o))}function Fi(e,t,n,r,o){if(_o(n)){var u=!0;To(t)}else u=!1;if(Ou(t,o),null===t.stateNode)Hi(e,t),ai(t,n,r),li(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,i=t.memoizedProps;a.props=i;var l=a.context,s=n.contextType;s="object"==typeof s&&null!==s?Pu(s):jo(t,s=_o(n)?Po:Do.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==r||l!==s)&&ii(t,a,r,s),zu=!1;var d=t.memoizedState;a.state=d,Hu(t,r,a,o),l=t.memoizedState,i!==r||d!==l||Oo.current||zu?("function"==typeof c&&(ri(t,n,c,r),l=t.memoizedState),(i=zu||ui(t,n,i,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=i):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Lu(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:ni(t.type,i),a.props=s,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Pu(l):jo(t,l=_o(n)?Po:Do.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==f||d!==l)&&ii(t,a,r,l),zu=!1,d=t.memoizedState,a.state=d,Hu(t,r,a,o);var h=t.memoizedState;i!==f||d!==h||Oo.current||zu?("function"==typeof p&&(ri(t,n,p,r),h=t.memoizedState),(s=zu||ui(t,n,s,r,d,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Si(e,t,n,r,u,o)}function Si(e,t,n,r,o,u){xi(e,t);var a=!!(128&t.flags);if(!r&&!a)return o&&Lo(t,n,!1),Wi(e,t,u);r=t.stateNode,yi.current=t;var i=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=bu(t,e.child,null,u),t.child=bu(t,null,i,u)):Ci(e,t,i,u),t.memoizedState=r.state,o&&Lo(t,n,!0),t.child}function Di(e){var t=e.stateNode;t.pendingContext?Ro(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ro(0,t.context,!1),Qu(e,t.containerInfo)}function Oi(e,t,n,r,o){return hu(),gu(o),t.flags|=256,Ci(e,t,n,r),t.child}var Pi,ji,_i,Ni,Ri={dehydrated:null,treeContext:null,retryLane:0};function zi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ti(e,t,n){var r,o=t.pendingProps,a=ea.current,i=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Fo(ea,1&a),null===e)return cu(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=o.children,e=o.fallback,i?(o=t.mode,i=t.child,l={mode:"hidden",children:l},1&o||null===i?i=zs(l,o,0,null):(i.childLanes=0,i.pendingProps=l),e=Rs(e,o,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=zi(n),t.memoizedState=Ri,e):Li(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,i){if(n)return 256&t.flags?(t.flags&=-257,Mi(e,t,i,r=ci(Error(u(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=zs({mode:"visible",children:r.children},o,0,null),(a=Rs(a,o,i,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,1&t.mode&&bu(t,e.child,null,i),t.child.memoizedState=zi(i),t.memoizedState=Ri,a);if(!(1&t.mode))return Mi(e,t,i,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Mi(e,t,i,r=ci(a=Error(u(419)),r,void 0))}if(l=!!(i&e.childLanes),vi||l){if(null!==(r=Dl)){switch(i&-i){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|i)?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ru(e,o),ns(r,e,o,-1))}return gs(),Mi(e,t,i,r=ci(Error(u(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Fs.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,ou=so(o.nextSibling),ru=t,uu=!0,au=null,null!==e&&(Ko[Yo++]=Xo,Ko[Yo++]=Jo,Ko[Yo++]=Qo,Xo=e.id,Jo=e.overflow,Qo=t),(t=Li(t,r.children)).flags|=4096,t)}(e,t,l,o,r,a,n);if(i){i=o.fallback,l=t.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 1&l||t.child===a?(o=_s(a,s)).subtreeFlags=14680064&a.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null),null!==r?i=_s(r,i):(i=Rs(i,l,n,null)).flags|=2,i.return=t,o.return=t,o.sibling=i,t.child=o,o=i,i=t.child,l=null===(l=e.child.memoizedState)?zi(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},i.memoizedState=l,i.childLanes=e.childLanes&~n,t.memoizedState=Ri,o}return e=(i=e.child).sibling,o=_s(i,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Li(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Mi(e,t,n,r){return null!==r&&gu(r),bu(t,e.child,null,n),(e=Li(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ii(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Du(e.return,t,n)}function Ui(e,t,n,r,o){var u=e.memoizedState;null===u?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(u.isBackwards=t,u.rendering=null,u.renderingStartTime=0,u.last=r,u.tail=n,u.tailMode=o)}function qi(e,t,n){var r=t.pendingProps,o=r.revealOrder,u=r.tail;if(Ci(e,t,r.children,n),2&(r=ea.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ii(e,n,t);else if(19===e.tag)Ii(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Fo(ea,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ta(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ui(t,!1,o,n,u);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ta(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ui(t,!0,n,null,u);break;case"together":Ui(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Hi(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(u(153));if(null!==t.child){for(n=_s(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=_s(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vi(e,t){if(!uu)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $i(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Zi(e,t,n){var r=t.pendingProps;switch(nu(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return $i(t),null;case 1:case 17:return _o(t.type)&&No(),$i(t),null;case 3:return r=t.stateNode,Xu(),ko(Oo),ko(Do),ra(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(du(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==au&&(as(au),au=null))),ji(e,t),$i(t),null;case 5:Gu(t);var o=Yu(Ku.current);if(n=t.type,null!==e&&null!=t.stateNode)_i(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(u(166));return $i(t),null}if(e=Yu($u.current),du(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=!!(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<Rr.length;o++)Mr(Rr[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":Q(r,a),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Mr("invalid",r);break;case"textarea":oe(r,a),Mr("invalid",r)}for(var l in ye(n,a),o=null,a)if(a.hasOwnProperty(l)){var s=a[l];"children"===l?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",""+s]):i.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&Mr("scroll",r)}switch(n){case"input":$(r),G(r,a,!0);break;case"textarea":$(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Gr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Pi(e,t,!1,!1),t.stateNode=e;e:{switch(l=ve(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Rr.length;o++)Mr(Rr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":Q(e,r),o=Y(e,r),Mr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=T({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Mr("invalid",e)}for(a in ye(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?me(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(i.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Mr("scroll",e):null!=c&&v(e,a,c,l))}switch(n){case"input":$(e),G(e,r,!1);break;case"textarea":$(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Gr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return $i(t),null;case 6:if(e&&null!=t.stateNode)Ni(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(u(166));if(n=Yu(Ku.current),Yu($u.current),du(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ru))switch(e.tag){case 3:Jr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,!!(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return $i(t),null;case 13:if(ko(ea),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(uu&&null!==ou&&1&t.mode&&!(128&t.flags))pu(),hu(),t.flags|=98560,a=!1;else if(a=du(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(u(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(u(317));a[po]=t}else hu(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;$i(t),a=!1}else null!==au&&(as(au),au=null),a=!0;if(!a)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ea.current?0===Nl&&(Nl=3):gs())),null!==t.updateQueue&&(t.flags|=4),$i(t),null);case 4:return Xu(),ji(e,t),null===e&&qr(t.stateNode.containerInfo),$i(t),null;case 10:return Su(t.type._context),$i(t),null;case 19:if(ko(ea),null===(a=t.memoizedState))return $i(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)Vi(a,!1);else{if(0!==Nl||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ta(e))){for(t.flags|=128,Vi(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Fo(ea,1&ea.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>ql&&(t.flags|=128,r=!0,Vi(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ta(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vi(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!uu)return $i(t),null}else 2*Xe()-a.renderingStartTime>ql&&1073741824!==n&&(t.flags|=128,r=!0,Vi(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=ea.current,Fo(ea,r?1&n|2:1&n),t):($i(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&jl)&&($i(t),6&t.subtreeFlags&&(t.flags|=8192)):$i(t),null;case 24:case 25:return null}throw Error(u(156,t.tag))}function Ki(e,t){switch(nu(t),t.tag){case 1:return _o(t.type)&&No(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xu(),ko(Oo),ko(Do),ra(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Gu(t),null;case 13:if(ko(ea),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(u(340));hu()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ko(ea),null;case 4:return Xu(),null;case 10:return Su(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Pi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ji=function(){},_i=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Yu($u.current);var u,a=null;switch(n){case"input":o=Y(e,o),r=Y(e,r),a=[];break;case"select":o=T({},o,{value:void 0}),r=T({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Gr)}for(c in ye(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(u in l)l.hasOwnProperty(u)&&(n||(n={}),n[u]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(u in l)!l.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&l[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Mr("scroll",e),a||l===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ni=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yi=!1,Qi=!1,Xi="function"==typeof WeakSet?WeakSet:Set,Ji=null;function Gi(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Bs(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Bs(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var u=o.destroy;o.destroy=void 0,void 0!==u&&el(t,n,u)}o=o.next}while(o!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ul(e){var t=e.alternate;null!==t&&(e.alternate=null,ul(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[mo],delete t[Ao],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function il(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Gr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function sl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var cl=null,fl=!1;function dl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(ut&&"function"==typeof ut.onCommitFiberUnmount)try{ut.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Qi||Gi(n,t);case 6:var r=cl,o=fl;cl=null,dl(e,t,n),fl=o,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),qt(e)):lo(cl,n.stateNode));break;case 4:r=cl,o=fl,cl=n.stateNode.containerInfo,fl=!0,dl(e,t,n),cl=r,fl=o;break;case 0:case 11:case 14:case 15:if(!Qi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var u=o,a=u.destroy;u=u.tag,void 0!==a&&(2&u||4&u)&&el(n,t,a),o=o.next}while(o!==r)}dl(e,t,n);break;case 1:if(!Qi&&(Gi(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Bs(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(Qi=(r=Qi)||null!==n.memoizedState,dl(e,t,n),Qi=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xi),t.forEach((function(t){var r=Ss.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,i=t,l=i;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(u(160));pl(a,i,o),cl=null,fl=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Bs(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),Al(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Bs(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Bs(e,e.return,t)}}break;case 1:gl(t,e),Al(e),512&r&&null!==n&&Gi(n,n.return);break;case 5:if(gl(t,e),Al(e),512&r&&null!==n&&Gi(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Bs(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,i=null!==n?n.memoizedProps:a,l=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(o,a),ve(l,i);var c=ve(l,a);for(i=0;i<s.length;i+=2){var f=s[i],d=s[i+1];"style"===f?me(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):v(o,f,d,c)}switch(l){case"input":J(o,a);break;case"textarea":ue(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){Bs(e,e.return,t)}}break;case 6:if(gl(t,e),Al(e),4&r){if(null===e.stateNode)throw Error(u(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){Bs(e,e.return,t)}}break;case 3:if(gl(t,e),Al(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{qt(t.containerInfo)}catch(t){Bs(e,e.return,t)}break;case 4:default:gl(t,e),Al(e);break;case 13:gl(t,e),Al(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Ul=Xe())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Qi=(c=Qi)||f,gl(t,e),Qi=c):gl(t,e),Al(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Ji=e,f=e.child;null!==f;){for(d=Ji=f;null!==Ji;){switch(h=(p=Ji).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Gi(p,p.return);var g=p.stateNode;if("function"==typeof g.componentWillUnmount){r=p,n=p.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){Bs(r,n,e)}}break;case 5:Gi(p,p.return);break;case 22:if(null!==p.memoizedState){bl(d);continue}}null!==h?(h.return=p,Ji=h):bl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,i=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,l.style.display=ge("display",i))}catch(t){Bs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Bs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:gl(t,e),Al(e),4&r&&hl(e);case 21:}}function Al(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(u(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sl(e,il(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,il(e),a);break;default:throw Error(u(161))}}catch(t){Bs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Ji=e,vl(e,t,n)}function vl(e,t,n){for(var r=!!(1&e.mode);null!==Ji;){var o=Ji,u=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Yi;if(!a){var i=o.alternate,l=null!==i&&null!==i.memoizedState||Qi;i=Yi;var s=Qi;if(Yi=a,(Qi=l)&&!s)for(Ji=o;null!==Ji;)l=(a=Ji).child,22===a.tag&&null!==a.memoizedState?El(o):null!==l?(l.return=a,Ji=l):El(o);for(;null!==u;)Ji=u,vl(u,t,n),u=u.sibling;Ji=o,Yi=i,Qi=s}Cl(e)}else 8772&o.subtreeFlags&&null!==u?(u.return=o,Ji=u):Cl(e)}}function Cl(e){for(;null!==Ji;){var t=Ji;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Qi||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Qi)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ni(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Wu(t,a,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Wu(t,i,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&qt(d)}}}break;default:throw Error(u(163))}Qi||512&t.flags&&ol(t)}catch(e){Bs(t,t.return,e)}}if(t===e){Ji=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ji=n;break}Ji=t.return}}function bl(e){for(;null!==Ji;){var t=Ji;if(t===e){Ji=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ji=n;break}Ji=t.return}}function El(e){for(;null!==Ji;){var t=Ji;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Bs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Bs(t,o,e)}}var u=t.return;try{ol(t)}catch(e){Bs(t,u,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){Bs(t,a,e)}}}catch(e){Bs(t,t.return,e)}if(t===e){Ji=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Ji=i;break}Ji=t.return}}var wl,Bl=Math.ceil,xl=C.ReactCurrentDispatcher,kl=C.ReactCurrentOwner,Fl=C.ReactCurrentBatchConfig,Sl=0,Dl=null,Ol=null,Pl=0,jl=0,_l=xo(0),Nl=0,Rl=null,zl=0,Tl=0,Ll=0,Ml=null,Il=null,Ul=0,ql=1/0,Hl=null,Wl=!1,Vl=null,$l=null,Zl=!1,Kl=null,Yl=0,Ql=0,Xl=null,Jl=-1,Gl=0;function es(){return 6&Sl?Xe():-1!==Jl?Jl:Jl=Xe()}function ts(e){return 1&e.mode?2&Sl&&0!==Pl?Pl&-Pl:null!==mu.transition?(0===Gl&&(Gl=gt()),Gl):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Qt(e.type):1}function ns(e,t,n,r){if(50<Ql)throw Ql=0,Xl=null,Error(u(185));At(e,n,r),2&Sl&&e===Dl||(e===Dl&&(!(2&Sl)&&(Tl|=n),4===Nl&&is(e,Pl)),rs(e,r),1===n&&0===Sl&&!(1&t.mode)&&(ql=Xe()+500,Io&&Ho()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,u=e.pendingLanes;0<u;){var a=31-at(u),i=1<<a,l=o[a];-1===l?i&n&&!(i&r)||(o[a]=pt(i,t)):l<=t&&(e.expiredLanes|=i),u&=~i}}(e,t);var r=dt(e,e===Dl?Pl:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Io=!0,qo(e)}(ls.bind(null,e)):qo(ls.bind(null,e)),ao((function(){!(6&Sl)&&Ho()})),n=null;else{switch(Ct(r)){case 1:n=Ge;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ds(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Jl=-1,Gl=0,6&Sl)throw Error(u(327));var n=e.callbackNode;if(Es()&&e.callbackNode!==n)return null;var r=dt(e,e===Dl?Pl:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=ms(e,r);else{t=r;var o=Sl;Sl|=2;var a=hs();for(Dl===e&&Pl===t||(Hl=null,ql=Xe()+500,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}Fu(),xl.current=a,Sl=o,null!==Ol?t=0:(Dl=null,Pl=0,t=Nl)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=us(e,o)),1===t)throw n=Rl,ds(e,0),is(e,r),rs(e,Xe()),n;if(6===t)is(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],u=o.getSnapshot;o=o.value;try{if(!ir(u(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=ms(e,r),2===t&&(a=ht(e),0!==a&&(r=a,t=us(e,a))),1!==t)))throw n=Rl,ds(e,0),is(e,r),rs(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(u(345));case 2:case 5:bs(e,Il,Hl);break;case 3:if(is(e,r),(130023424&r)===r&&10<(t=Ul+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(bs.bind(null,e,Il,Hl),t);break}bs(e,Il,Hl);break;case 4:if(is(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var i=31-at(r);a=1<<i,(i=t[i])>o&&(o=i),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Bl(r/1960))-r)){e.timeoutHandle=ro(bs.bind(null,e,Il,Hl),r);break}bs(e,Il,Hl);break;default:throw Error(u(329))}}}return rs(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function us(e,t){var n=Ml;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=ms(e,t))&&(t=Il,Il=n,null!==t&&as(t)),e}function as(e){null===Il?Il=e:Il.push.apply(Il,e)}function is(e,t){for(t&=~Ll,t&=~Tl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(6&Sl)throw Error(u(327));Es();var t=dt(e,0);if(!(1&t))return rs(e,Xe()),null;var n=ms(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=us(e,r))}if(1===n)throw n=Rl,ds(e,0),is(e,t),rs(e,Xe()),n;if(6===n)throw Error(u(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,bs(e,Il,Hl),rs(e,Xe()),null}function ss(e,t){var n=Sl;Sl|=1;try{return e(t)}finally{0===(Sl=n)&&(ql=Xe()+500,Io&&Ho())}}function cs(e){null!==Kl&&0===Kl.tag&&!(6&Sl)&&Es();var t=Sl;Sl|=1;var n=Fl.transition,r=vt;try{if(Fl.transition=null,vt=1,e)return e()}finally{vt=r,Fl.transition=n,!(6&(Sl=t))&&Ho()}}function fs(){jl=_l.current,ko(_l)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(nu(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&No();break;case 3:Xu(),ko(Oo),ko(Do),ra();break;case 5:Gu(r);break;case 4:Xu();break;case 13:case 19:ko(ea);break;case 10:Su(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Dl=e,Ol=e=_s(e.current,null),Pl=jl=t,Nl=0,Rl=null,Ll=Tl=zl=0,Il=Ml=null,null!==ju){for(t=0;t<ju.length;t++)if(null!==(r=(n=ju[t]).interleaved)){n.interleaved=null;var o=r.next,u=n.pending;if(null!==u){var a=u.next;u.next=o,r.next=a}n.pending=r}ju=null}return e}function ps(e,t){for(;;){var n=Ol;try{if(Fu(),oa.current=Ja,ca){for(var r=ia.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ca=!1}if(aa=0,sa=la=ia=null,fa=!1,da=0,kl.current=null,null===n||null===n.return){Nl=1,Rl=t,Ol=null;break}e:{var a=e,i=n.return,l=n,s=t;if(t=Pl,l.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=l,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=mi(i);if(null!==h){h.flags&=-257,Ai(h,i,l,0,t),1&h.mode&&gi(a,c,t),s=c;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(s),t.updateQueue=m}else g.add(s);break e}if(!(1&t)){gi(a,c,t),gs();break e}s=Error(u(426))}else if(uu&&1&l.mode){var A=mi(i);if(null!==A){!(65536&A.flags)&&(A.flags|=256),Ai(A,i,l,0,t),gu(si(s,l));break e}}a=s=si(s,l),4!==Nl&&(Nl=2),null===Ml?Ml=[a]:Ml.push(a),a=i;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,qu(a,pi(0,s,t));break e;case 1:l=s;var y=a.type,v=a.stateNode;if(!(128&a.flags||"function"!=typeof y.getDerivedStateFromError&&(null===v||"function"!=typeof v.componentDidCatch||null!==$l&&$l.has(v)))){a.flags|=65536,t&=-t,a.lanes|=t,qu(a,hi(a,l,t));break e}}a=a.return}while(null!==a)}Cs(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function hs(){var e=xl.current;return xl.current=Ja,null===e?Ja:e}function gs(){0!==Nl&&3!==Nl&&2!==Nl||(Nl=4),null===Dl||!(268435455&zl)&&!(268435455&Tl)||is(Dl,Pl)}function ms(e,t){var n=Sl;Sl|=2;var r=hs();for(Dl===e&&Pl===t||(Hl=null,ds(e,t));;)try{As();break}catch(t){ps(e,t)}if(Fu(),Sl=n,xl.current=r,null!==Ol)throw Error(u(261));return Dl=null,Pl=0,Nl}function As(){for(;null!==Ol;)vs(Ol)}function ys(){for(;null!==Ol&&!Ye();)vs(Ol)}function vs(e){var t=wl(e.alternate,e,jl);e.memoizedProps=e.pendingProps,null===t?Cs(e):Ol=t,kl.current=null}function Cs(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Ol=n);if(null===e)return Nl=6,void(Ol=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Zi(n,t,jl)))return void(Ol=n);if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Nl&&(Nl=5)}function bs(e,t,n){var r=vt,o=Fl.transition;try{Fl.transition=null,vt=1,function(e,t,n,r){do{Es()}while(null!==Kl);if(6&Sl)throw Error(u(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(u(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),u=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~u}}(e,a),e===Dl&&(Ol=Dl=null,Pl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Zl||(Zl=!0,Ds(tt,(function(){return Es(),null}))),a=!!(15990&n.flags),15990&n.subtreeFlags||a){a=Fl.transition,Fl.transition=null;var i=vt;vt=1;var l=Sl;Sl|=4,kl.current=null,function(e,t){if(eo=Wt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,l=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(l=i+o),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(l=i),p===a&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Wt=!1,Ji=t;null!==Ji;)if(e=(t=Ji).child,1028&t.subtreeFlags&&null!==e)e.return=t,Ji=e;else for(;null!==Ji;){t=Ji;try{var g=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,A=g.memoizedState,y=t.stateNode,v=y.getSnapshotBeforeUpdate(t.elementType===t.type?m:ni(t.type,m),A);y.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var C=t.stateNode.containerInfo;1===C.nodeType?C.textContent="":9===C.nodeType&&C.documentElement&&C.removeChild(C.documentElement);break;default:throw Error(u(163))}}catch(e){Bs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ji=e;break}Ji=t.return}g=tl,tl=!1}(e,n),ml(n,e),hr(to),Wt=!!eo,to=eo=null,e.current=n,yl(n,e,o),Qe(),Sl=l,vt=i,Fl.transition=a}else e.current=n;if(Zl&&(Zl=!1,Kl=e,Yl=o),0===(a=e.pendingLanes)&&($l=null),function(e){if(ut&&"function"==typeof ut.onCommitFiberRoot)try{ut.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Wl)throw Wl=!1,e=Vl,Vl=null,e;!!(1&Yl)&&0!==e.tag&&Es(),1&(a=e.pendingLanes)?e===Xl?Ql++:(Ql=0,Xl=e):Ql=0,Ho()}(e,t,n,r)}finally{Fl.transition=o,vt=r}return null}function Es(){if(null!==Kl){var e=Ct(Yl),t=Fl.transition,n=vt;try{if(Fl.transition=null,vt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Yl=0,6&Sl)throw Error(u(331));var o=Sl;for(Sl|=4,Ji=e.current;null!==Ji;){var a=Ji,i=a.child;if(16&Ji.flags){var l=a.deletions;if(null!==l){for(var s=0;s<l.length;s++){var c=l[s];for(Ji=c;null!==Ji;){var f=Ji;switch(f.tag){case 0:case 11:case 15:nl(8,f,a)}var d=f.child;if(null!==d)d.return=f,Ji=d;else for(;null!==Ji;){var p=(f=Ji).sibling,h=f.return;if(ul(f),f===c){Ji=null;break}if(null!==p){p.return=h,Ji=p;break}Ji=h}}}var g=a.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var A=m.sibling;m.sibling=null,m=A}while(null!==m)}}Ji=a}}if(2064&a.subtreeFlags&&null!==i)i.return=a,Ji=i;else e:for(;null!==Ji;){if(2048&(a=Ji).flags)switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Ji=y;break e}Ji=a.return}}var v=e.current;for(Ji=v;null!==Ji;){var C=(i=Ji).child;if(2064&i.subtreeFlags&&null!==C)C.return=i,Ji=C;else e:for(i=v;null!==Ji;){if(2048&(l=Ji).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Bs(l,l.return,e)}if(l===i){Ji=null;break e}var b=l.sibling;if(null!==b){b.return=l.return,Ji=b;break e}Ji=l.return}}if(Sl=o,Ho(),ut&&"function"==typeof ut.onPostCommitFiberRoot)try{ut.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{vt=n,Fl.transition=t}}return!1}function ws(e,t,n){e=Iu(e,t=pi(0,t=si(n,t),1),1),t=es(),null!==e&&(At(e,1,t),rs(e,t))}function Bs(e,t,n){if(3===e.tag)ws(e,e,n);else for(;null!==t;){if(3===t.tag){ws(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$l||!$l.has(r))){t=Iu(t,e=hi(t,e=si(n,e),1),1),e=es(),null!==t&&(At(t,1,e),rs(t,e));break}}t=t.return}}function xs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Dl===e&&(Pl&n)===n&&(4===Nl||3===Nl&&(130023424&Pl)===Pl&&500>Xe()-Ul?ds(e,0):Ll|=n),rs(e,t)}function ks(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Ru(e,t))&&(At(e,t,n),rs(e,n))}function Fs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ks(e,n)}function Ss(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(u(314))}null!==r&&r.delete(t),ks(e,n)}function Ds(e,t){return Ze(e,t)}function Os(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ps(e,t,n,r){return new Os(e,t,n,r)}function js(e){return!(!(e=e.prototype)||!e.isReactComponent)}function _s(e,t){var n=e.alternate;return null===n?((n=Ps(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ns(e,t,n,r,o,a){var i=2;if(r=e,"function"==typeof e)js(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case w:return Rs(n.children,o,a,t);case B:i=8,o|=8;break;case x:return(e=Ps(12,n,t,2|o)).elementType=x,e.lanes=a,e;case D:return(e=Ps(13,n,t,o)).elementType=D,e.lanes=a,e;case O:return(e=Ps(19,n,t,o)).elementType=O,e.lanes=a,e;case _:return zs(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:i=10;break e;case F:i=9;break e;case S:i=11;break e;case P:i=14;break e;case j:i=16,r=null;break e}throw Error(u(130,null==e?e:typeof e,""))}return(t=Ps(i,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Rs(e,t,n,r){return(e=Ps(7,e,r,t)).lanes=n,e}function zs(e,t,n,r){return(e=Ps(22,e,r,t)).elementType=_,e.lanes=n,e.stateNode={isHidden:!1},e}function Ts(e,t,n){return(e=Ps(6,e,null,t)).lanes=n,e}function Ls(e,t,n){return(t=Ps(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ms(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Is(e,t,n,r,o,u,a,i,l){return e=new Ms(e,t,n,i,l),1===t?(t=1,!0===u&&(t|=8)):t=0,u=Ps(3,null,null,t),e.current=u,u.stateNode=e,u.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Tu(u),e}function Us(e){if(!e)return So;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(u(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(_o(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(u(171))}if(1===e.tag){var n=e.type;if(_o(n))return zo(e,n,t)}return t}function qs(e,t,n,r,o,u,a,i,l){return(e=Is(n,r,!0,e,0,u,0,i,l)).context=Us(null),n=e.current,(u=Mu(r=es(),o=ts(n))).callback=null!=t?t:null,Iu(n,u,o),e.current.lanes=o,At(e,o,r),rs(e,r),e}function Hs(e,t,n,r){var o=t.current,u=es(),a=ts(o);return n=Us(n),null===t.context?t.context=n:t.pendingContext=n,(t=Mu(u,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Iu(o,t,a))&&(ns(e,o,a,u),Uu(e,o,a)),a}function Ws(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $s(e,t){Vs(e,t),(e=e.alternate)&&Vs(e,t)}wl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oo.current)vi=!0;else{if(!(e.lanes&n||128&t.flags))return vi=!1,function(e,t,n){switch(t.tag){case 3:Di(t),hu();break;case 5:Ju(t);break;case 1:_o(t.type)&&To(t);break;case 4:Qu(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Fo(wu,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Fo(ea,1&ea.current),t.flags|=128,null):n&t.child.childLanes?Ti(e,t,n):(Fo(ea,1&ea.current),null!==(e=Wi(e,t,n))?e.sibling:null);Fo(ea,1&ea.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return qi(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Fo(ea,ea.current),r)break;return null;case 22:case 23:return t.lanes=0,Bi(e,t,n)}return Wi(e,t,n)}(e,t,n);vi=!!(131072&e.flags)}else vi=!1,uu&&1048576&t.flags&&eu(t,Zo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hi(e,t),e=t.pendingProps;var o=jo(t,Do.current);Ou(t,n),o=ma(null,t,r,e,o,n);var a=Aa();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,_o(r)?(a=!0,To(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Tu(t),o.updater=oi,t.stateNode=o,o._reactInternals=t,li(t,r,e,n),t=Si(null,t,r,!0,a,n)):(t.tag=0,uu&&a&&tu(t),Ci(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hi(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return js(e)?1:0;if(null!=e){if((e=e.$$typeof)===S)return 11;if(e===P)return 14}return 2}(r),e=ni(r,e),o){case 0:t=ki(null,t,r,e,n);break e;case 1:t=Fi(null,t,r,e,n);break e;case 11:t=bi(null,t,r,e,n);break e;case 14:t=Ei(null,t,r,ni(r.type,e),n);break e}throw Error(u(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,ki(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 3:e:{if(Di(t),null===e)throw Error(u(387));r=t.pendingProps,o=(a=t.memoizedState).element,Lu(e,t),Hu(t,r,null,n);var i=t.memoizedState;if(r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Oi(e,t,r,n,o=si(Error(u(423)),t));break e}if(r!==o){t=Oi(e,t,r,n,o=si(Error(u(424)),t));break e}for(ou=so(t.stateNode.containerInfo.firstChild),ru=t,uu=!0,au=null,n=Eu(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hu(),r===o){t=Wi(e,t,n);break e}Ci(e,t,r,n)}t=t.child}return t;case 5:return Ju(t),null===e&&cu(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,i=o.children,no(r,o)?i=null:null!==a&&no(r,a)&&(t.flags|=32),xi(e,t),Ci(e,t,i,n),t.child;case 6:return null===e&&cu(t),null;case 13:return Ti(e,t,n);case 4:return Qu(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=bu(t,null,r,n):Ci(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,bi(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 7:return Ci(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ci(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=o.value,Fo(wu,r._currentValue),r._currentValue=i,null!==a)if(ir(a.value,i)){if(a.children===o.children&&!Oo.current){t=Wi(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){i=a.child;for(var s=l.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Mu(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),Du(a.return,n,t),l.lanes|=n;break}s=s.next}}else if(10===a.tag)i=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(i=a.return))throw Error(u(341));i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),Du(i,n,t),i=a.sibling}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===t){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}Ci(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ou(t,n),r=r(o=Pu(o)),t.flags|=1,Ci(e,t,r,n),t.child;case 14:return o=ni(r=t.type,t.pendingProps),Ei(e,t,r,o=ni(r.type,o),n);case 15:return wi(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ni(r,o),Hi(e,t),t.tag=1,_o(r)?(e=!0,To(t)):e=!1,Ou(t,n),ai(t,r,o),li(t,r,o,n),Si(null,t,r,!0,e,n);case 19:return qi(e,t,n);case 22:return Bi(e,t,n)}throw Error(u(156,t.tag))};var Zs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Ys(e){this._internalRoot=e}function Qs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function Gs(e,t,n,r,o){var u=n._reactRootContainer;if(u){var a=u;if("function"==typeof o){var i=o;o=function(){var e=Ws(a);i.call(e)}}Hs(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var u=r;r=function(){var e=Ws(a);u.call(e)}}var a=qs(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=a,e[go]=a.current,qr(8===e.nodeType?e.parentNode:e),cs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var i=r;r=function(){var e=Ws(l);i.call(e)}}var l=Is(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=l,e[go]=l.current,qr(8===e.nodeType?e.parentNode:e),cs((function(){Hs(t,l,n,r)})),l}(n,t,e,o,r);return Ws(a)}Ys.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(u(409));Hs(e,t,null,null)},Ys.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Hs(null,e,null,null)})),t[go]=null}},Ys.prototype.unstable_scheduleHydration=function(e){if(e){var t=Bt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<_t.length&&0!==t&&t<_t[n].priority;n++);_t.splice(n,0,e),0===n&&Tt(e)}},bt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),rs(t,Xe()),!(6&Sl)&&(ql=Xe()+500,Ho()))}break;case 13:cs((function(){var t=Ru(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),$s(e,1)}},Et=function(e){if(13===e.tag){var t=Ru(e,134217728);null!==t&&ns(t,e,134217728,es()),$s(e,134217728)}},wt=function(e){if(13===e.tag){var t=ts(e),n=Ru(e,t);null!==n&&ns(n,e,t,es()),$s(e,t)}},Bt=function(){return vt},xt=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},Ee=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Eo(r);if(!o)throw Error(u(90));Z(r),J(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Se=ss,De=cs;var ec={usingClientEntryPoint:!1,Events:[Co,bo,Eo,ke,Fe,ss]},tc={findFiberByHostInstance:vo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{ot=rc.inject(nc),ut=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qs(t))throw Error(u(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Qs(e))throw Error(u(299));var n=!1,r="",o=Zs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Is(e,1,!1,null,0,n,0,r,o),e[go]=t.current,qr(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(u(188));throw e=Object.keys(e).join(","),Error(u(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(u(200));return Gs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Qs(e))throw Error(u(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",i=Zs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=qs(t,null,e,1,null!=n?n:null,o,0,a,i),e[go]=t.current,qr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ys(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(u(200));return Gs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(u(40));return!!e._reactRootContainer&&(cs((function(){Gs(null,null,e,!1,(function(){e._reactRootContainer=null,e[go]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(u(200));if(null==e||void 0===e._reactInternals)throw Error(u(38));return Gs(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},745:(e,t,n)=>{"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},4203:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<u(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var i=2*(r+1)-1,l=e[i],s=i+1,c=e[s];if(0>u(l,n))s<o&&0>u(c,l)?(e[r]=c,e[s]=n,r=s):(e[r]=l,e[i]=n,r=i);else{if(!(s<o&&0>u(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function u(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var i=Date,l=i.now();t.unstable_now=function(){return i.now()-l}}var s=[],c=[],f=1,d=null,p=3,h=!1,g=!1,m=!1,A="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function C(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function b(e){if(m=!1,C(e),!g)if(null!==r(s))g=!0,_(E);else{var t=r(c);null!==t&&N(b,t.startTime-e)}}function E(e,n){g=!1,m&&(m=!1,y(k),k=-1),h=!0;var u=p;try{for(C(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!D());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var i=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&o(s),C(n)}else o(s);d=r(s)}if(null!==d)var l=!0;else{var f=r(c);null!==f&&N(b,f.startTime-n),l=!1}return l}finally{d=null,p=u,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var w,B=!1,x=null,k=-1,F=5,S=-1;function D(){return!(t.unstable_now()-S<F)}function O(){if(null!==x){var e=t.unstable_now();S=e;var n=!0;try{n=x(!0,e)}finally{n?w():(B=!1,x=null)}}else B=!1}if("function"==typeof v)w=function(){v(O)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,j=P.port2;P.port1.onmessage=O,w=function(){j.postMessage(null)}}else w=function(){A(O,0)};function _(e){x=e,B||(B=!0,w())}function N(e,n){k=A((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,_(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):F=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,u){var a=t.unstable_now();switch(u="object"==typeof u&&null!==u&&"number"==typeof(u=u.delay)&&0<u?a+u:a,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>a?(e.sortIndex=u,n(c,e),null===r(s)&&e===r(c)&&(m?(y(k),k=-1):m=!0,N(b,u-a))):(e.sortIndex=i,n(s,e),g||h||(g=!0,_(E))),e},t.unstable_shouldYield=D,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},4142:(e,t,n)=>{"use strict";e.exports=n(4203)},8718:(e,t,n)=>{"use strict";n.d(t,{OO:()=>f,JP:()=>d,zv:()=>p,nI:()=>h,Db:()=>g});var r=n(5671),o=n(3144),u=n(4942),a=n(7294);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,u.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s,c={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0},f=a.createContext();function d(){return c}var p=function(){function e(){(0,r.Z)(this,e),this.usedNamespaces={}}return(0,o.Z)(e,[{key:"addUsedNamespaces",value:function(e){var t=this;e.forEach((function(e){t.usedNamespaces[e]||(t.usedNamespaces[e]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),e}();function h(){return s}var g={type:"3rdParty",init:function(e){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};c=l(l({},c),e)}(e.options.react),function(e){s=e}(e)}}},2327:(e,t,n)=>{"use strict";n.d(t,{$:()=>g});var r=n(3878),o=n(8192),u=n(5267);var a=n(4942),i=n(7294),l=n(8718);function s(){if(console&&console.warn){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(e=console).warn.apply(e,n)}}var c={};function f(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];"string"==typeof t[0]&&c[t[0]]||("string"==typeof t[0]&&(c[t[0]]=new Date),s.apply(void 0,t))}function d(e,t,n){e.loadNamespaces(t,(function(){e.isInitialized?n():e.on("initialized",(function t(){setTimeout((function(){e.off("initialized",t)}),0),n()}))}))}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.i18n,a=(0,i.useContext)(l.OO)||{},s=a.i18n,c=a.defaultNS,p=n||s||(0,l.nI)();if(p&&!p.reportNamespaces&&(p.reportNamespaces=new l.zv),!p){f("You will need to pass in an i18next instance by using initReactI18next");var g=function(e){return Array.isArray(e)?e[e.length-1]:e},m=[g,{},!1];return m.t=g,m.i18n={},m.ready=!1,m}p.options.react&&void 0!==p.options.react.wait&&f("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");var A=h(h(h({},(0,l.JP)()),p.options.react),t),y=A.useSuspense,v=A.keyPrefix,C=e||c||p.options&&p.options.defaultNS;C="string"==typeof C?[C]:C||["translation"],p.reportNamespaces.addUsedNamespaces&&p.reportNamespaces.addUsedNamespaces(C);var b=(p.isInitialized||p.initializedStoreOnce)&&C.every((function(e){return function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!t.languages||!t.languages.length)return f("i18n.languages were undefined or empty",t.languages),!0;var r=t.languages[0],o=!!t.options&&t.options.fallbackLng,u=t.languages[t.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!a(t.isLanguageChangingTo,e)||!t.hasResourceBundle(r,e)&&t.services.backendConnector.backend&&(!a(r,e)||o&&!a(u,e)))}(e,p,A)}));function E(){return p.getFixedT(null,"fallback"===A.nsMode?C:C[0],v)}var w,B,x=(w=(0,i.useState)(E),B=2,(0,r.Z)(w)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,u,a,i=[],l=!0,s=!1;try{if(u=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=u.call(n)).done)&&(i.push(r.value),i.length!==t);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return i}}(w,B)||(0,o.Z)(w,B)||(0,u.Z)()),k=x[0],F=x[1],S=(0,i.useRef)(!0);(0,i.useEffect)((function(){var e=A.bindI18n,t=A.bindI18nStore;function n(){S.current&&F(E)}return S.current=!0,b||y||d(p,C,(function(){S.current&&F(E)})),e&&p&&p.on(e,n),t&&p&&p.store.on(t,n),function(){S.current=!1,e&&p&&e.split(" ").forEach((function(e){return p.off(e,n)})),t&&p&&t.split(" ").forEach((function(e){return p.store.off(e,n)}))}}),[p,C.join()]);var D=(0,i.useRef)(!0);(0,i.useEffect)((function(){S.current&&!D.current&&F(E),D.current=!1}),[p]);var O=[k,p,b];if(O.t=k,O.i18n=p,O.ready=b,b)return O;if(!b&&!y)return O;throw new Promise((function(e){d(p,C,(function(){e()}))}))}},2494:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.withBaseIcon=t.Icon=void 0;var r=a(n(7294)),o=a(n(5697)),u=a(n(547));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){s(e,t,n[t])}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(e){var t=e.style,n=e.className,o=(e.icon,e.size,e.tag),a=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["style","className","icon","size","tag"]),s=o;return r.default.createElement(s,i({},a,{style:l({display:"inline-block"},t),className:n}),r.default.createElement(u.default,{size:e.size,icon:e.icon,title:e.title}))};t.Icon=c,t.withBaseIcon=function(e){return function(t){var n=l({},e);return r.default.createElement(c,i({},n,t))}},c.defaultProps={size:16,fill:"currentColor",tag:"i"},c.propTypes={icon:o.default.object.isRequired,size:o.default.oneOfType([o.default.number,o.default.string]),style:o.default.object,tag:o.default.oneOf(["i","span","div"]),className:o.default.string};var f=c;t.default=f},547:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.SvgIcon=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(7294)),o=a(n(5697)),u=a(n(6486));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){return null!=e}var c=function e(t){return t.map((function(t,n){var o=t.name,a=t.attribs,i=t.children,c=void 0===i?null:i,f=Object.keys(a).filter((function(e){return"fill"!==e&&"stroke"!==e&&"none"!==a[e]})).reduce((function(e,t){return"style"===t?e.style=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").split(";").reduce((function(e,t){var n,r,o=(n=t.split(":"),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=[],r=!0,o=!1,u=void 0;try{for(var a,i=e[Symbol.iterator]();!(r=(a=i.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,u=e}finally{try{r||null==i.return||i.return()}finally{if(o)throw u}}return n}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),a=o[0],i=o[1];return s(a)&&s(i)&&(e[(0,u.default)(a)]=i),e}),{})}(a[t]):e[(0,u.default)(t)]=a[t],e}),{}),d={};return"none"===a.fill&&a.stroke?d={fill:"none",stroke:"currentColor"}:"none"===a.fill&&(d={fill:"none"}),(0,r.createElement)(o,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){l(e,t,n[t])}))}return e}({key:n},f,d),null===c?c:e(c))}))},f=function(e){var t=e.size,n=e.icon,o=n.children,a=n.viewBox,l=n.attribs,s=void 0===l?{}:l,f=Object.keys(s).reduce((function(e,t){return e[(0,u.default)(t)]=s[t],e}),{});return r.default.createElement("svg",i({fill:"currentColor",style:{display:"inline-block",verticalAlign:"middle"},height:t,width:t,viewBox:a},f),e.title?r.default.createElement("title",null,e.title):null,c(o))};t.SvgIcon=f,f.defaultProps={size:16},f.propTypes={icon:o.default.object.isRequired,size:o.default.oneOfType([o.default.number,o.default.string]),title:o.default.string};var d=f;t.default=d},2693:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.horizontalCenter=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(7294)),o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.rAlign,o=void 0!==n&&n,u=t.space,a=void 0===u?4:u;return function(t){return r.default.createElement(e,t,r.default.createElement("div",{style:{display:"inline-flex",justifyContent:"center",alignItems:"center"}},r.Children.toArray(t.children).map((function(e,t){var n,u,i,l=o?"paddingLeft":"paddingRight";return r.default.createElement("div",{key:t,style:(n={display:"inline-block"},u=l,i=a,u in n?Object.defineProperty(n,u,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[u]=i,n)},e)}))))}};t.horizontalCenter=o;var u=o;t.default=u},9316:(e,t)=>{"use strict";t.z=void 0,t.z={viewBox:"0 0 18 16",children:[{name:"path",attribs:{fill:"#000000",d:"M7.5 0v0c4.142 0 7.5 2.717 7.5 6.069s-3.358 6.069-7.5 6.069c-0.398 0-0.788-0.025-1.169-0.074-1.611 1.605-3.471 1.892-5.331 1.935v-0.393c1.004-0.49 1.813-1.382 1.813-2.402 0-0.142-0.011-0.282-0.032-0.419-1.696-1.113-2.781-2.812-2.781-4.717 0-3.352 3.358-6.069 7.5-6.069zM15.563 13.604c0 0.874 0.567 1.639 1.438 2.059v0.337c-1.611-0.036-3.090-0.283-4.487-1.658-0.33 0.041-0.669 0.063-1.013 0.063-1.492 0-2.866-0.402-3.963-1.079 2.261-0.008 4.395-0.732 6.013-2.042 0.816-0.66 1.459-1.435 1.913-2.302 0.481-0.92 0.724-1.9 0.724-2.913 0-0.163-0.007-0.326-0.020-0.487 1.134 0.936 1.832 2.213 1.832 3.62 0 1.633-0.94 3.089-2.41 4.043-0.018 0.117-0.027 0.237-0.027 0.359z"}}]}},6271:(e,t)=>{"use strict";t.n=void 0,t.n={viewBox:"0 0 16 16",children:[{name:"path",attribs:{fill:"#000000",d:"M8 16c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zM8 1.5c3.59 0 6.5 2.91 6.5 6.5s-2.91 6.5-6.5 6.5-6.5-2.91-6.5-6.5 2.91-6.5 6.5-6.5z"}},{name:"path",attribs:{fill:"#000000",d:"M10.457 4.957l-1.414-1.414-4.457 4.457 4.457 4.457 1.414-1.414-3.043-3.043z"}}]}},7487:(e,t)=>{"use strict";t.j=void 0,t.j={viewBox:"0 0 16 16",children:[{name:"path",attribs:{fill:"#000000",d:"M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5z"}},{name:"path",attribs:{fill:"#000000",d:"M5.543 11.043l1.414 1.414 4.457-4.457-4.457-4.457-1.414 1.414 3.043 3.043z"}}]}},8554:(e,t)=>{"use strict";t.L=void 0,t.L={viewBox:"0 0 16 16",children:[{name:"path",attribs:{fill:"#000000",d:"M16 9.226l-8-6.21-8 6.21v-2.532l8-6.21 8 6.21zM14 9v6h-4v-4h-4v4h-4v-6l6-4.5z"}}]}},4140:(e,t)=>{"use strict";t.u=void 0,t.u={viewBox:"0 0 16 16",children:[{name:"path",attribs:{fill:"#000000",d:"M7 4.75c0-0.412 0.338-0.75 0.75-0.75h0.5c0.412 0 0.75 0.338 0.75 0.75v0.5c0 0.412-0.338 0.75-0.75 0.75h-0.5c-0.412 0-0.75-0.338-0.75-0.75v-0.5z"}},{name:"path",attribs:{fill:"#000000",d:"M10 12h-4v-1h1v-3h-1v-1h3v4h1z"}},{name:"path",attribs:{fill:"#000000",d:"M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5z"}}]}},874:(e,t)=>{"use strict";t.E=void 0,t.E={viewBox:"0 0 16 16",children:[{name:"path",attribs:{fill:"#000000",d:"M9 11.041v-0.825c1.102-0.621 2-2.168 2-3.716 0-2.485 0-4.5-3-4.5s-3 2.015-3 4.5c0 1.548 0.898 3.095 2 3.716v0.825c-3.392 0.277-6 1.944-6 3.959h14c0-2.015-2.608-3.682-6-3.959z"}}]}},8568:(e,t)=>{"use strict";t.K=void 0,t.K={viewBox:"0 0 16 16",children:[{name:"path",attribs:{fill:"#000000",d:"M8 1.45l6.705 13.363h-13.409l6.705-13.363zM8 0c-0.345 0-0.69 0.233-0.951 0.698l-6.829 13.611c-0.523 0.93-0.078 1.691 0.989 1.691h13.583c1.067 0 1.512-0.761 0.989-1.691h0l-6.829-13.611c-0.262-0.465-0.606-0.698-0.951-0.698v0z"}},{name:"path",attribs:{fill:"#000000",d:"M9 13c0 0.552-0.448 1-1 1s-1-0.448-1-1c0-0.552 0.448-1 1-1s1 0.448 1 1z"}},{name:"path",attribs:{fill:"#000000",d:"M8 11c-0.552 0-1-0.448-1-1v-3c0-0.552 0.448-1 1-1s1 0.448 1 1v3c0 0.552-0.448 1-1 1z"}}]}},7894:(e,t,n)=>{"use strict";t.ZP=void 0;var r=n(2494),o=(n(2693),r.Icon);t.ZP=o},5251:(e,t,n)=>{"use strict";var r=n(7294),o=Symbol.for("react.element"),u=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:u,_owner:i.current}}t.Fragment=u,t.jsx=s,t.jsxs=s},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),u=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=A.prototype;var C=v.prototype=new y;C.constructor=v,g(C,A.prototype),C.isPureReactComponent=!0;var b=Array.isArray,E=Object.prototype.hasOwnProperty,w={current:null},B={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var o,u={},a=null,i=null;if(null!=t)for(o in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,o)&&!B.hasOwnProperty(o)&&(u[o]=t[o]);var l=arguments.length-2;if(1===l)u.children=r;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];u.children=s}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===u[o]&&(u[o]=l[o]);return{$$typeof:n,type:e,key:a,ref:i,props:u,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var F=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function D(e,t,o,u,a){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var l=!1;if(null===e)l=!0;else switch(i){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===u?"."+S(l,0):u,b(a)?(o="",null!=e&&(o=e.replace(F,"$&/")+"/"),D(a,t,o,"",(function(e){return e}))):null!=a&&(k(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(F,"$&/")+"/")+e)),t.push(a)),1;if(l=0,u=""===u?".":u+":",b(e))for(var s=0;s<e.length;s++){var c=u+S(i=e[s],s);l+=D(i,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)l+=D(i=i.value,t,o,c=u+S(i,s++),a);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function O(e,t,n){if(null==e)return e;var r=[],o=0;return D(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var j={current:null},_={transition:null},N={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:_,ReactCurrentOwner:w};function R(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=A,t.Fragment=o,t.Profiler=a,t.PureComponent=v,t.StrictMode=u,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.act=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=g({},e.props),u=e.key,a=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,i=w.current),void 0!==t.key&&(u=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)E.call(t,s)&&!B.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){l=Array(s);for(var c=0;c<s;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:n,type:e.type,key:u,ref:a,props:o,_owner:i}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=_.transition;_.transition={};try{e()}finally{_.transition=t}},t.unstable_act=R,t.useCallback=function(e,t){return j.current.useCallback(e,t)},t.useContext=function(e){return j.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return j.current.useDeferredValue(e)},t.useEffect=function(e,t){return j.current.useEffect(e,t)},t.useId=function(){return j.current.useId()},t.useImperativeHandle=function(e,t,n){return j.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return j.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return j.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return j.current.useMemo(e,t)},t.useReducer=function(e,t,n){return j.current.useReducer(e,t,n)},t.useRef=function(e){return j.current.useRef(e)},t.useState=function(e){return j.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return j.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return j.current.useTransition()},t.version="18.3.1"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var u={},a=[],i=0;i<e.length;i++){var l=e[i],s=r.base?l[0]+r.base:l[0],c=u[s]||0,f="".concat(s," ").concat(c);u[s]=c+1;var d=n(f),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var u=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<u.length;a++){var i=n(u[a]);t[i].references--}for(var l=r(e,o),s=0;s<u.length;s++){var c=n(u[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}u=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var u=n.sourceMap;u&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(u))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},6133:e=>{var t={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{i̇:"I",j̇:"J",į̇:"Į",i̇̀:"Ì",i̇́:"Í",i̇̃:"Ĩ"}}};e.exports=function(e,n){var r=t[n];return e=null==e?"":String(e),r&&(e=e.replace(r.regexp,(function(e){return r.map[e]}))),e.toUpperCase()}},3771:(e,t,n)=>{"use strict";var r=n(7294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},u=r.useSyncExternalStore,a=r.useRef,i=r.useEffect,l=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,c){var f=a(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=l((function(){function e(e){if(!i){if(i=!0,u=e,e=r(e),void 0!==c&&d.hasValue){var t=d.value;if(c(t,e))return a=t}return a=e}if(t=a,o(u,e))return t;var n=r(e);return void 0!==c&&c(t,n)?t:(u=e,a=n)}var u,a,i=!1,l=void 0===n?null:n;return[function(){return e(t())},null===l?void 0:function(){return e(l())}]}),[t,n,r,c]);var p=u(e,f[0],f[1]);return i((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},1103:(e,t,n)=>{"use strict";e.exports=n(3771)},2429:(e,t,n)=>{"use strict";e.exports=n.p+"0c2fe8b19affa6a132a9.png"},9362:(e,t,n)=>{"use strict";e.exports=n.p+"6d5ba9a15bef9cdf3d82.png"},4120:(e,t,n)=>{"use strict";e.exports=n.p+"de35b003b6a8d1bb27a1.png"},3154:(e,t,n)=>{var r;if("function"==typeof fetch&&(void 0!==n.g&&n.g.fetch?r=n.g.fetch:"undefined"!=typeof window&&window.fetch&&(r=window.fetch)),"undefined"==typeof window||void 0===window.document){var o=r||n(4098);o.default&&(o=o.default),t.default=o,e.exports=t.default}},3878:(e,t,n)=>{"use strict";function r(e){if(Array.isArray(e))return e}n.d(t,{Z:()=>r})},5671:(e,t,n)=>{"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>r})},3144:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(9142);function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(0,r.Z)(o.key),o)}}function u(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}},4942:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9142);function o(e,t,n){return(t=(0,r.Z)(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},5267:(e,t,n)=>{"use strict";function r(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}n.d(t,{Z:()=>r})},9142:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1002);function o(e){var t=function(e,t){if("object"!=(0,r.Z)(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!=(0,r.Z)(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==(0,r.Z)(t)?t:t+""}},1002:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n.d(t,{Z:()=>r})},8192:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}n.d(t,{Z:()=>o})},5162:(e,t,n)=>{"use strict";n.d(t,{xC:()=>me,hg:()=>we,oM:()=>De});var r=Symbol.for("immer-nothing"),o=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function a(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var i=Object.getPrototypeOf;function l(e){return!!e&&!!e[u]}function s(e){return!!e&&(f(e)||Array.isArray(e)||!!e[o]||!!e.constructor?.[o]||m(e)||A(e))}var c=Object.prototype.constructor.toString();function f(e){if(!e||"object"!=typeof e)return!1;const t=i(e);if(null===t)return!0;const n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===c}function d(e,t){0===p(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,r)=>t(r,n,e)))}function p(e){const t=e[u];return t?t.type_:Array.isArray(e)?1:m(e)?2:A(e)?3:0}function h(e,t){return 2===p(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function g(e,t,n){const r=p(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function m(e){return e instanceof Map}function A(e){return e instanceof Set}function y(e){return e.copy_||e.base_}function v(e,t){if(m(e))return new Map(e);if(A(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);const n=f(e);if(!0===t||"class_only"===t&&!n){const t=Object.getOwnPropertyDescriptors(e);delete t[u];let n=Reflect.ownKeys(t);for(let r=0;r<n.length;r++){const o=n[r],u=t[o];!1===u.writable&&(u.writable=!0,u.configurable=!0),(u.get||u.set)&&(t[o]={configurable:!0,writable:!0,enumerable:u.enumerable,value:e[o]})}return Object.create(i(e),t)}{const t=i(e);if(null!==t&&n)return{...e};const r=Object.create(t);return Object.assign(r,e)}}function C(e,t=!1){return E(e)||l(e)||!s(e)||(p(e)>1&&(e.set=e.add=e.clear=e.delete=b),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>C(t,!0)))),e}function b(){a(2)}function E(e){return Object.isFrozen(e)}var w,B={};function x(e){const t=B[e];return t||a(0),t}function k(){return w}function F(e,t){t&&(x("Patches"),e.patches_=[],e.inversePatches_=[],e.patchListener_=t)}function S(e){D(e),e.drafts_.forEach(P),e.drafts_=null}function D(e){e===w&&(w=e.parent_)}function O(e){return w={drafts_:[],parent_:w,immer_:e,canAutoFreeze_:!0,unfinalizedDrafts_:0}}function P(e){const t=e[u];0===t.type_||1===t.type_?t.revoke_():t.revoked_=!0}function j(e,t){t.unfinalizedDrafts_=t.drafts_.length;const n=t.drafts_[0];return void 0!==e&&e!==n?(n[u].modified_&&(S(t),a(4)),s(e)&&(e=_(t,e),t.parent_||R(t,e)),t.patches_&&x("Patches").generateReplacementPatches_(n[u].base_,e,t.patches_,t.inversePatches_)):e=_(t,n,[]),S(t),t.patches_&&t.patchListener_(t.patches_,t.inversePatches_),e!==r?e:void 0}function _(e,t,n){if(E(t))return t;const r=t[u];if(!r)return d(t,((o,u)=>N(e,r,t,o,u,n))),t;if(r.scope_!==e)return t;if(!r.modified_)return R(e,r.base_,!0),r.base_;if(!r.finalized_){r.finalized_=!0,r.scope_.unfinalizedDrafts_--;const t=r.copy_;let o=t,u=!1;3===r.type_&&(o=new Set(t),t.clear(),u=!0),d(o,((o,a)=>N(e,r,t,o,a,n,u))),R(e,t,!1),n&&e.patches_&&x("Patches").generatePatches_(r,n,e.patches_,e.inversePatches_)}return r.copy_}function N(e,t,n,r,o,u,a){if(l(o)){const a=_(e,o,u&&t&&3!==t.type_&&!h(t.assigned_,r)?u.concat(r):void 0);if(g(n,r,a),!l(a))return;e.canAutoFreeze_=!1}else a&&n.add(o);if(s(o)&&!E(o)){if(!e.immer_.autoFreeze_&&e.unfinalizedDrafts_<1)return;_(e,o),t&&t.scope_.parent_||"symbol"==typeof r||!Object.prototype.propertyIsEnumerable.call(n,r)||R(e,o)}}function R(e,t,n=!1){!e.parent_&&e.immer_.autoFreeze_&&e.canAutoFreeze_&&C(t,n)}var z={get(e,t){if(t===u)return e;const n=y(e);if(!h(n,t))return function(e,t,n){const r=M(t,n);return r?"value"in r?r.value:r.get?.call(e.draft_):void 0}(e,n,t);const r=n[t];return e.finalized_||!s(r)?r:r===L(e.base_,t)?(U(e),e.copy_[t]=q(r,e)):r},has:(e,t)=>t in y(e),ownKeys:e=>Reflect.ownKeys(y(e)),set(e,t,n){const r=M(y(e),t);if(r?.set)return r.set.call(e.draft_,n),!0;if(!e.modified_){const r=L(y(e),t),i=r?.[u];if(i&&i.base_===n)return e.copy_[t]=n,e.assigned_[t]=!1,!0;if(((o=n)===(a=r)?0!==o||1/o==1/a:o!=o&&a!=a)&&(void 0!==n||h(e.base_,t)))return!0;U(e),I(e)}var o,a;return e.copy_[t]===n&&(void 0!==n||t in e.copy_)||Number.isNaN(n)&&Number.isNaN(e.copy_[t])||(e.copy_[t]=n,e.assigned_[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==L(e.base_,t)||t in e.base_?(e.assigned_[t]=!1,U(e),I(e)):delete e.assigned_[t],e.copy_&&delete e.copy_[t],!0),getOwnPropertyDescriptor(e,t){const n=y(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.type_||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty(){a(11)},getPrototypeOf:e=>i(e.base_),setPrototypeOf(){a(12)}},T={};function L(e,t){const n=e[u];return(n?y(n):e)[t]}function M(e,t){if(!(t in e))return;let n=i(e);for(;n;){const e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=i(n)}}function I(e){e.modified_||(e.modified_=!0,e.parent_&&I(e.parent_))}function U(e){e.copy_||(e.copy_=v(e.base_,e.scope_.immer_.useStrictShallowCopy_))}function q(e,t){const n=m(e)?x("MapSet").proxyMap_(e,t):A(e)?x("MapSet").proxySet_(e,t):function(e,t){const n=Array.isArray(e),r={type_:n?1:0,scope_:t?t.scope_:k(),modified_:!1,finalized_:!1,assigned_:{},parent_:t,base_:e,draft_:null,copy_:null,revoke_:null,isManual_:!1};let o=r,u=z;n&&(o=[r],u=T);const{revoke:a,proxy:i}=Proxy.revocable(o,u);return r.draft_=i,r.revoke_=a,i}(e,t);return(t?t.scope_:k()).drafts_.push(n),n}function H(e){return l(e)||a(10),W(e)}function W(e){if(!s(e)||E(e))return e;const t=e[u];let n;if(t){if(!t.modified_)return t.base_;t.finalized_=!0,n=v(e,t.scope_.immer_.useStrictShallowCopy_)}else n=v(e,!0);return d(n,((e,t)=>{g(n,e,W(t))})),t&&(t.finalized_=!1),n}d(z,((e,t)=>{T[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),T.deleteProperty=function(e,t){return T.set.call(this,e,t,void 0)},T.set=function(e,t,n){return z.set.call(this,e[0],t,n,e[0])};var V=new class{constructor(e){this.autoFreeze_=!0,this.useStrictShallowCopy_=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){const n=t;t=e;const r=this;return function(e=n,...o){return r.produce(e,(e=>t.call(this,e,...o)))}}let o;if("function"!=typeof t&&a(6),void 0!==n&&"function"!=typeof n&&a(7),s(e)){const r=O(this),u=q(e,void 0);let a=!0;try{o=t(u),a=!1}finally{a?S(r):D(r)}return F(r,n),j(o,r)}if(!e||"object"!=typeof e){if(o=t(e),void 0===o&&(o=e),o===r&&(o=void 0),this.autoFreeze_&&C(o,!0),n){const t=[],r=[];x("Patches").generateReplacementPatches_(e,o,t,r),n(t,r)}return o}a(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,r;return[this.produce(e,t,((e,t)=>{n=e,r=t})),n,r]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){s(e)||a(8),l(e)&&(e=H(e));const t=O(this),n=q(e,void 0);return n[u].isManual_=!0,D(t),n}finishDraft(e,t){const n=e&&e[u];n&&n.isManual_||a(9);const{scope_:r}=n;return F(r,t),j(void 0,r)}setAutoFreeze(e){this.autoFreeze_=e}setUseStrictShallowCopy(e){this.useStrictShallowCopy_=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){const r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));const r=x("Patches").applyPatches_;return l(e)?r(e,t):this.produce(e,(e=>r(e,t)))}},$=V.produce;V.produceWithPatches.bind(V),V.setAutoFreeze.bind(V),V.setUseStrictShallowCopy.bind(V),V.applyPatches.bind(V),V.createDraft.bind(V),V.finishDraft.bind(V);var Z=e=>Array.isArray(e)?e:[e];Symbol(),Object.getPrototypeOf({});var K="undefined"!=typeof WeakRef?WeakRef:class{constructor(e){this.value=e}deref(){return this.value}},Y=0,Q=1;function X(){return{s:Y,v:void 0,o:null,p:null}}function J(e,t={}){let n=X();const{resultEqualityCheck:r}=t;let o,u=0;function a(){let t=n;const{length:a}=arguments;for(let e=0,n=a;e<n;e++){const n=arguments[e];if("function"==typeof n||"object"==typeof n&&null!==n){let e=t.o;null===e&&(t.o=e=new WeakMap);const r=e.get(n);void 0===r?(t=X(),e.set(n,t)):t=r}else{let e=t.p;null===e&&(t.p=e=new Map);const r=e.get(n);void 0===r?(t=X(),e.set(n,t)):t=r}}const i=t;let l;if(t.s===Q)l=t.v;else if(l=e.apply(null,arguments),u++,r){const e=o?.deref?.()??o;null!=e&&r(e,l)&&(l=e,0!==u&&u--),o="object"==typeof l&&null!==l||"function"==typeof l?new K(l):l}return i.s=Q,i.v=l,l}return a.clearCache=()=>{n=X(),a.resetResultsCount()},a.resultsCount=()=>u,a.resetResultsCount=()=>{u=0},a}function G(e,...t){const n="function"==typeof e?{memoize:e,memoizeOptions:t}:e,r=(...e)=>{let t,r=0,o=0,u={},a=e.pop();"object"==typeof a&&(u=a,a=e.pop()),function(e,t="expected a function, instead received "+typeof e){if("function"!=typeof e)throw new TypeError(t)}(a,`createSelector expects an output function after the inputs, but received: [${typeof a}]`);const i={...n,...u},{memoize:l,memoizeOptions:s=[],argsMemoize:c=J,argsMemoizeOptions:f=[],devModeChecks:d={}}=i,p=Z(s),h=Z(f),g=function(e){const t=Array.isArray(e[0])?e[0]:e;return function(e,t="expected all items to be functions, instead received the following types: "){if(!e.every((e=>"function"==typeof e))){const n=e.map((e=>"function"==typeof e?`function ${e.name||"unnamed"}()`:typeof e)).join(", ");throw new TypeError(`${t}[${n}]`)}}(t,"createSelector expects all input-selectors to be functions, but received the following types: "),t}(e),m=l((function(){return r++,a.apply(null,arguments)}),...p),A=c((function(){o++;const e=function(e,t){const n=[],{length:r}=e;for(let o=0;o<r;o++)n.push(e[o].apply(null,t));return n}(g,arguments);return t=m.apply(null,e),t}),...h);return Object.assign(A,{resultFunc:a,memoizedResultFunc:m,dependencies:g,dependencyRecomputations:()=>o,resetDependencyRecomputations:()=>{o=0},lastResult:()=>t,recomputations:()=>r,resetRecomputations:()=>{r=0},memoize:l,argsMemoize:c})};return Object.assign(r,{withTypes:()=>r}),r}var ee=G(J),te=Object.assign(((e,t=ee)=>{!function(e,t="expected an object, instead received "+typeof e){if("object"!=typeof e)throw new TypeError(t)}(e,"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof e);const n=Object.keys(e);return t(n.map((t=>e[t])),((...e)=>e.reduce(((e,t,r)=>(e[n[r]]=t,e)),{})))}),{withTypes:()=>te}),ne=n(5849);function re(e){return({dispatch:t,getState:n})=>r=>o=>"function"==typeof o?o(t,n,e):r(o)}var oe=re(),ue=re,ae="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?ne.qC:ne.qC.apply(null,arguments)},ie=("undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__,e=>e&&"function"==typeof e.match);function le(e,t){function n(...n){if(t){let r=t(...n);if(!r)throw new Error(je(0));return{type:e,payload:r.payload,..."meta"in r&&{meta:r.meta},..."error"in r&&{error:r.error}}}return{type:e,payload:n[0]}}return n.toString=()=>`${e}`,n.type=e,n.match=t=>(0,ne.LG)(t)&&t.type===e,n}var se=class e extends Array{constructor(...t){super(...t),Object.setPrototypeOf(this,e.prototype)}static get[Symbol.species](){return e}concat(...e){return super.concat.apply(this,e)}prepend(...t){return 1===t.length&&Array.isArray(t[0])?new e(...t[0].concat(this)):new e(...t.concat(this))}};function ce(e){return s(e)?$(e,(()=>{})):e}function fe(e,t,n){if(e.has(t)){let r=e.get(t);return n.update&&(r=n.update(r,t,e),e.set(t,r)),r}if(!n.insert)throw new Error(je(10));const r=n.insert(t,e);return e.set(t,r),r}var de=()=>function(e){const{thunk:t=!0,immutableCheck:n=!0,serializableCheck:r=!0,actionCreatorCheck:o=!0}=e??{};let u=new se;return t&&("boolean"==typeof t?u.push(oe):u.push(ue(t.extraArgument))),u},pe=e=>t=>{setTimeout(t,e)},he="undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:pe(10),ge=e=>function(t){const{autoBatch:n=!0}=t??{};let r=new se(e);return n&&r.push(((e={type:"raf"})=>t=>(...n)=>{const r=t(...n);let o=!0,u=!1,a=!1;const i=new Set,l="tick"===e.type?queueMicrotask:"raf"===e.type?he:"callback"===e.type?e.queueNotification:pe(e.timeout),s=()=>{a=!1,u&&(u=!1,i.forEach((e=>e())))};return Object.assign({},r,{subscribe(e){const t=r.subscribe((()=>o&&e()));return i.add(e),()=>{t(),i.delete(e)}},dispatch(e){try{return o=!e?.meta?.RTK_autoBatch,u=!o,u&&(a||(a=!0,l(s))),r.dispatch(e)}finally{o=!0}}})})("object"==typeof n?n:void 0)),r};function me(e){const t=de(),{reducer:n,middleware:r,devTools:o=!0,preloadedState:u,enhancers:a}=e||{};let i,l;if("function"==typeof n)i=n;else{if(!(0,ne.PO)(n))throw new Error(je(1));i=(0,ne.UY)(n)}l="function"==typeof r?r(t):t();let s=ne.qC;o&&(s=ae({trace:!1,..."object"==typeof o&&o}));const c=(0,ne.md)(...l),f=ge(c),d=s(..."function"==typeof a?a(f):f());return(0,ne.MT)(i,u,d)}function Ae(e){const t={},n=[];let r;const o={addCase(e,n){const r="string"==typeof e?e:e.type;if(!r)throw new Error(je(28));if(r in t)throw new Error(je(29));return t[r]=n,o},addMatcher:(e,t)=>(n.push({matcher:e,reducer:t}),o),addDefaultCase:e=>(r=e,o)};return e(o),[t,n,r]}function ye(...e){return t=>e.some((e=>((e,t)=>ie(e)?e.match(t):e(t))(e,t)))}var ve=["name","message","stack","code"],Ce=class{constructor(e,t){this.payload=e,this.meta=t}_type},be=class{constructor(e,t){this.payload=e,this.meta=t}_type},Ee=e=>{if("object"==typeof e&&null!==e){const t={};for(const n of ve)"string"==typeof e[n]&&(t[n]=e[n]);return t}return{message:String(e)}},we=(()=>{function e(e,t,n){const r=le(e+"/fulfilled",((e,t,n,r)=>({payload:e,meta:{...r||{},arg:n,requestId:t,requestStatus:"fulfilled"}}))),o=le(e+"/pending",((e,t,n)=>({payload:void 0,meta:{...n||{},arg:t,requestId:e,requestStatus:"pending"}}))),u=le(e+"/rejected",((e,t,r,o,u)=>({payload:o,error:(n&&n.serializeError||Ee)(e||"Rejected"),meta:{...u||{},arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===e?.name,condition:"ConditionError"===e?.name}})));return Object.assign((function(e){return(a,i,l)=>{const s=n?.idGenerator?n.idGenerator(e):((e=21)=>{let t="",n=e;for(;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t})(),c=new AbortController;let f,d;function p(e){d=e,c.abort()}const h=async function(){let h;try{let u=n?.condition?.(e,{getState:i,extra:l});if(null!==(g=u)&&"object"==typeof g&&"function"==typeof g.then&&(u=await u),!1===u||c.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};const m=new Promise(((e,t)=>{f=()=>{t({name:"AbortError",message:d||"Aborted"})},c.signal.addEventListener("abort",f)}));a(o(s,e,n?.getPendingMeta?.({requestId:s,arg:e},{getState:i,extra:l}))),h=await Promise.race([m,Promise.resolve(t(e,{dispatch:a,getState:i,extra:l,requestId:s,signal:c.signal,abort:p,rejectWithValue:(e,t)=>new Ce(e,t),fulfillWithValue:(e,t)=>new be(e,t)})).then((t=>{if(t instanceof Ce)throw t;return t instanceof be?r(t.payload,s,e,t.meta):r(t,s,e)}))])}catch(t){h=t instanceof Ce?u(null,s,e,t.payload,t.meta):u(t,s,e)}finally{f&&c.signal.removeEventListener("abort",f)}var g;return n&&!n.dispatchConditionRejection&&u.match(h)&&h.meta.condition||a(h),h}();return Object.assign(h,{abort:p,requestId:s,arg:e,unwrap:()=>h.then(Be)})}}),{pending:o,rejected:u,fulfilled:r,settled:ye(u,r),typePrefix:e})}return e.withTypes=()=>e,e})();function Be(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var xe=Symbol.for("rtk-slice-createasyncthunk");function ke(e,t){return`${e}/${t}`}function Fe({creators:e}={}){const t=e?.asyncThunk?.[xe];return function(e){const{name:n,reducerPath:r=n}=e;if(!n)throw new Error(je(11));const o=("function"==typeof e.reducers?e.reducers(function(){function e(e,t){return{_reducerDefinitionType:"asyncThunk",payloadCreator:e,...t}}return e.withTypes=()=>e,{reducer:e=>Object.assign({[e.name]:(...t)=>e(...t)}[e.name],{_reducerDefinitionType:"reducer"}),preparedReducer:(e,t)=>({_reducerDefinitionType:"reducerWithPrepare",prepare:e,reducer:t}),asyncThunk:e}}()):e.reducers)||{},u=Object.keys(o),a={sliceCaseReducersByName:{},sliceCaseReducersByType:{},actionCreators:{},sliceMatchers:[]},i={addCase(e,t){const n="string"==typeof e?e:e.type;if(!n)throw new Error(je(12));if(n in a.sliceCaseReducersByType)throw new Error(je(13));return a.sliceCaseReducersByType[n]=t,i},addMatcher:(e,t)=>(a.sliceMatchers.push({matcher:e,reducer:t}),i),exposeAction:(e,t)=>(a.actionCreators[e]=t,i),exposeCaseReducer:(e,t)=>(a.sliceCaseReducersByName[e]=t,i)};function c(){const[t={},n=[],r]="function"==typeof e.extraReducers?Ae(e.extraReducers):[e.extraReducers],o={...t,...a.sliceCaseReducersByType};return function(e,t){let u,[i,c,f]=Ae((e=>{for(let t in o)e.addCase(t,o[t]);for(let t of a.sliceMatchers)e.addMatcher(t.matcher,t.reducer);for(let t of n)e.addMatcher(t.matcher,t.reducer);r&&e.addDefaultCase(r)}));if("function"==typeof e)u=()=>ce(e());else{const t=ce(e);u=()=>t}function d(e=u(),t){let n=[i[t.type],...c.filter((({matcher:e})=>e(t))).map((({reducer:e})=>e))];return 0===n.filter((e=>!!e)).length&&(n=[f]),n.reduce(((e,n)=>{if(n){if(l(e)){const r=n(e,t);return void 0===r?e:r}if(s(e))return $(e,(e=>n(e,t)));{const r=n(e,t);if(void 0===r){if(null===e)return e;throw new Error(je(9))}return r}}return e}),e)}return d.getInitialState=u,d}(e.initialState)}u.forEach((r=>{const u=o[r],a={reducerName:r,type:ke(n,r),createNotation:"function"==typeof e.reducers};!function(e){return"asyncThunk"===e._reducerDefinitionType}(u)?function({type:e,reducerName:t,createNotation:n},r,o){let u,a;if("reducer"in r){if(n&&!function(e){return"reducerWithPrepare"===e._reducerDefinitionType}(r))throw new Error(je(17));u=r.reducer,a=r.prepare}else u=r;o.addCase(e,u).exposeCaseReducer(t,u).exposeAction(t,a?le(e,a):le(e))}(a,u,i):function({type:e,reducerName:t},n,r,o){if(!o)throw new Error(je(18));const{payloadCreator:u,fulfilled:a,pending:i,rejected:l,settled:s,options:c}=n,f=o(e,u,c);r.exposeAction(t,f),a&&r.addCase(f.fulfilled,a),i&&r.addCase(f.pending,i),l&&r.addCase(f.rejected,l),s&&r.addMatcher(f.settled,s),r.exposeCaseReducer(t,{fulfilled:a||Oe,pending:i||Oe,rejected:l||Oe,settled:s||Oe})}(a,u,i,t)}));const f=e=>e,d=new Map;let p;function h(e,t){return p||(p=c()),p(e,t)}function g(){return p||(p=c()),p.getInitialState()}function m(t,n=!1){function r(e){let r=e[t];return void 0===r&&n&&(r=g()),r}function o(t=f){const r=fe(d,n,{insert:()=>new WeakMap});return fe(r,t,{insert:()=>{const r={};for(const[o,u]of Object.entries(e.selectors??{}))r[o]=Se(u,t,g,n);return r}})}return{reducerPath:t,getSelectors:o,get selectors(){return o(r)},selectSlice:r}}const A={name:n,reducer:h,actions:a.actionCreators,caseReducers:a.sliceCaseReducersByName,getInitialState:g,...m(r),injectInto(e,{reducerPath:t,...n}={}){const o=t??r;return e.inject({reducerPath:o,reducer:h},n),{...A,...m(o,!0)}}};return A}}function Se(e,t,n,r){function o(o,...u){let a=t(o);return void 0===a&&r&&(a=n()),e(a,...u)}return o.unwrapped=e,o}var De=Fe();function Oe(){}var{assign:Pe}=Object;function je(e){return`Minified Redux Toolkit error #${e}; visit https://redux-toolkit.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}Symbol.for("rtk-state-proxy-original")},5007:(e,t,n)=>{"use strict";var r;n.d(t,{zt:()=>b,I0:()=>k,v9:()=>m,oR:()=>w});var o=n(7294),u=n(1103),a="default"in(r||(r=n.t(o,2)))?o:r||(r=n.t(o,2)),i=Symbol.for("react-redux-context"),l="undefined"!=typeof globalThis?globalThis:{};function s(){if(!a.createContext)return{};const e=l[i]??(l[i]=new Map);let t=e.get(a.createContext);return t||(t=a.createContext(null),e.set(a.createContext,t)),t}var c=s();function f(e=c){return function(){return a.useContext(e)}}var d=f(),p=()=>{throw new Error("uSES not initialized!")},h=(e,t)=>e===t;function g(e=c){const t=e===c?d:f(e),n=(e,n={})=>{const{equalityFn:r=h,devModeChecks:o={}}="function"==typeof n?{equalityFn:n}:n,{store:u,subscription:i,getServerState:l,stabilityCheck:s,identityFunctionCheck:c}=t(),f=(a.useRef(!0),a.useCallback({[e.name]:t=>e(t)}[e.name],[e,s,o.stabilityCheck])),d=p(i.addNestedSub,u.getState,l||u.getState,f,r);return a.useDebugValue(d),d};return Object.assign(n,{withTypes:()=>n}),n}var m=g();Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen"),Symbol.for("react.client.reference");var A={notify(){},get:()=>[]};var y=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),v="undefined"!=typeof navigator&&"ReactNative"===navigator.product,C=y||v?a.useLayoutEffect:a.useEffect;Object.defineProperty,Object.getOwnPropertyNames,Object.getOwnPropertySymbols,Object.getOwnPropertyDescriptor,Object.getPrototypeOf,Object.prototype;var b=function({store:e,context:t,children:n,serverState:r,stabilityCheck:o="once",identityFunctionCheck:u="once"}){const i=a.useMemo((()=>{const t=function(e,t){let n,r=A,o=0,u=!1;function a(){s.onStateChange&&s.onStateChange()}function i(){o++,n||(n=t?t.addNestedSub(a):e.subscribe(a),r=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){(()=>{let t=e;for(;t;)t.callback(),t=t.next})()},get(){const t=[];let n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let r=!0;const o=t={callback:n,next:null,prev:t};return o.prev?o.prev.next=o:e=o,function(){r&&null!==e&&(r=!1,o.next?o.next.prev=o.prev:t=o.prev,o.prev?o.prev.next=o.next:e=o.next)}}}}())}function l(){o--,n&&0===o&&(n(),n=void 0,r.clear(),r=A)}const s={addNestedSub:function(e){i();const t=r.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),l())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:a,isSubscribed:function(){return u},trySubscribe:function(){u||(u=!0,i())},tryUnsubscribe:function(){u&&(u=!1,l())},getListeners:()=>r};return s}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0,stabilityCheck:o,identityFunctionCheck:u}}),[e,r,o,u]),l=a.useMemo((()=>e.getState()),[e]);C((()=>{const{subscription:t}=i;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),l!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[i,l]);const s=t||c;return a.createElement(s.Provider,{value:i},n)};function E(e=c){const t=e===c?d:f(e),n=()=>{const{store:e}=t();return e};return Object.assign(n,{withTypes:()=>n}),n}var w=E();function B(e=c){const t=e===c?w:E(e),n=()=>t().dispatch;return Object.assign(n,{withTypes:()=>n}),n}var x,k=B();x=u.useSyncExternalStoreWithSelector,p=x,o.useSyncExternalStore},5849:(e,t,n)=>{"use strict";function r(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}n.d(t,{md:()=>f,UY:()=>s,qC:()=>c,MT:()=>l,LG:()=>d,PO:()=>i});var o=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),u=()=>Math.random().toString(36).substring(7).split("").join("."),a={INIT:`@@redux/INIT${u()}`,REPLACE:`@@redux/REPLACE${u()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${u()}`};function i(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}function l(e,t,n){if("function"!=typeof e)throw new Error(r(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(r(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(r(1));return n(l)(e,t)}let u=e,s=t,c=new Map,f=c,d=0,p=!1;function h(){f===c&&(f=new Map,c.forEach(((e,t)=>{f.set(t,e)})))}function g(){if(p)throw new Error(r(3));return s}function m(e){if("function"!=typeof e)throw new Error(r(4));if(p)throw new Error(r(5));let t=!0;h();const n=d++;return f.set(n,e),function(){if(t){if(p)throw new Error(r(6));t=!1,h(),f.delete(n),c=null}}}function A(e){if(!i(e))throw new Error(r(7));if(void 0===e.type)throw new Error(r(8));if("string"!=typeof e.type)throw new Error(r(17));if(p)throw new Error(r(9));try{p=!0,s=u(s,e)}finally{p=!1}return(c=f).forEach((e=>{e()})),e}return A({type:a.INIT}),{dispatch:A,subscribe:m,getState:g,replaceReducer:function(e){if("function"!=typeof e)throw new Error(r(10));u=e,A({type:a.REPLACE})},[o]:function(){const e=m;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(r(11));function n(){const e=t;e.next&&e.next(g())}return n(),{unsubscribe:e(n)}},[o](){return this}}}}}function s(e){const t=Object.keys(e),n={};for(let r=0;r<t.length;r++){const o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}const o=Object.keys(n);let u;try{!function(e){Object.keys(e).forEach((t=>{const n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error(r(12));if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error(r(13))}))}(n)}catch(e){u=e}return function(e={},t){if(u)throw u;let a=!1;const i={};for(let u=0;u<o.length;u++){const l=o[u],s=n[l],c=e[l],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(r(14));i[l]=f,a=a||f!==c}return a=a||o.length!==Object.keys(e).length,a?i:e}}function c(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}function f(...e){return t=>(n,o)=>{const u=t(n,o);let a=()=>{throw new Error(r(15))};const i={getState:u.getState,dispatch:(e,...t)=>a(e,...t)},l=e.map((e=>e(i)));return a=c(...l)(u.dispatch),{...u,dispatch:a}}}function d(e){return i(e)&&"type"in e&&"string"==typeof e.type}}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,exports:{}};return a[e].call(n.exports,n,n.exports,l),n.exports}l.m=a,l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);l.r(o);var u={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>u[e]=()=>n[e]));return u.default=()=>n,l.d(o,u),o},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>e+"."+{117:"fec432ebb53ee331a9df",433:"511e2ee03ddd538a9540",537:"c2b748f1f9f8ff74eb2c",582:"9dc2a18ce6d13a43a0e3",669:"0eb14b89a1c91becb902",744:"a7727bb0cbe35654d6db",986:"b76f7c89705e71bfb28e"}[e]+".bundle.js",l.miniCssF=e=>"css/"+e+"."+{117:"f8facb1c",537:"8bee1e17",669:"0fc04ce5",744:"37ea9c26"}[e]+".css",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="pet_1:",l.l=(e,t,o,u)=>{if(n[e])n[e].push(t);else{var a,i;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){a=f;break}}a||(i=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,l.nc&&a.setAttribute("nonce",l.nc),a.setAttribute("data-webpack",r+o),a.src=e),n[e]=[t];var d=(t,r)=>{a.onerror=a.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),i&&document.head.appendChild(a)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e})(),o=e=>new Promise(((t,n)=>{var r=l.miniCssF(e),o=l.p+r;if(((e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var o=(a=n[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===t))return a}var u=document.getElementsByTagName("style");for(r=0;r<u.length;r++){var a;if((o=(a=u[r]).getAttribute("data-href"))===e||o===t)return a}})(r,o))return t();((e,t,n,r)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=u=>{if(o.onerror=o.onload=null,"load"===u.type)n();else{var a=u&&("load"===u.type?"missing":u.type),i=u&&u.target&&u.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+i+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=a,l.request=i,o.parentNode.removeChild(o),r(l)}},o.href=t,document.head.appendChild(o)})(e,o,t,n)})),u={179:0},l.f.miniCss=(e,t)=>{u[e]?t.push(u[e]):0!==u[e]&&{117:1,537:1,669:1,744:1}[e]&&t.push(u[e]=o(e).then((()=>{u[e]=0}),(t=>{throw delete u[e],t})))},(()=>{l.b=document.baseURI||self.location.href;var e={179:0};l.f.j=(t,n)=>{var r=l.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var u=l.p+l.u(t),a=new Error;l.l(u,(n=>{if(l.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),u=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+o+": "+u+")",a.name="ChunkLoadError",a.type=o,a.request=u,r[1](a)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[u,a,i]=n,s=0;if(u.some((t=>0!==e[t]))){for(r in a)l.o(a,r)&&(l.m[r]=a[r]);i&&i(l)}for(t&&t(n);s<u.length;s++)o=u[s],l.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkpet_1=self.webpackChunkpet_1||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=l(5893),t=l(7294),n=(0,t.createContext)({}),r="theme",o=function(){return(0,t.useContext)(n)},u=l(3005);var a=function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};const i=function(t){var n=t.children,r=t.someClasses,o=void 0===r?"":r,i=t.styleProps,l=void 0===i?{}:i,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["children","someClasses","styleProps"]);return(0,e.jsx)("div",a({className:(0,u.A)("JmbC7SBG",{},[o]),style:l},s,{children:n}))};var s=function(){return s=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},s.apply(this,arguments)};const c=function(t){var n=t.children,r=t.someClasses,o=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["children","someClasses"]);return(0,e.jsx)("div",s({className:(0,u.A)("jIzXIrrf",{},[r])},o,{children:n}))};var f=l(3935);const d=function(e){var t=e.children,n=e.node,r=void 0===n?document.body:n;return(0,f.createPortal)(t,r)};var p=l(1872);const h=function(n){var r,o=n.someClasses,a=n.children,i=n.id,l=(0,p.dd)(),s=l.isModalOpen,c=l.toggleModalHandler,f=l.modalId,h=(0,t.useState)(!1),g=h[0],m=h[1],A=(0,t.useState)(!0)[0],y=(0,t.useCallback)((function(){if(g)return c(!1)}),[g,c]),v=(0,t.useCallback)((function(e){("Escape"===e.key&&s||"Space"===e.key&&s)&&y()}),[y,s]);return(0,t.useEffect)((function(){m(!1);var e=setTimeout((function(){m(!0)}),800);return function(){return clearTimeout(e)}}),[s]),(0,t.useEffect)((function(){return window.addEventListener("keydown",v),function(){return window.removeEventListener("keydown",v)}}),[v]),(0,e.jsx)(e.Fragment,{children:A?(0,e.jsx)(d,{children:f===i?(0,e.jsx)("aside",{className:(0,u.A)("m5y8PtrK",(r={},r.NjmISmH3=s,r.UupRxP_b=!s,r),[o]),children:(0,e.jsx)("div",{onClick:y,className:(0,u.A)("mOGSXnU9",{},[]),children:(0,e.jsx)("div",{onClick:function(e){return e.stopPropagation()},className:(0,u.A)("WwbwxePa",{},[]),children:a})})}):null}):null})};var g=l(3556);const m=function(t){t.someClasses;var n=t.id,r=t.children,o=t.value,u=(0,p.dd)(),a=u.setId,i=u.toggleModalHandler;return(0,e.jsx)(g.z,{onClick:function(){return function(e,t){if(a(e),t)return i(t);i()}(n,o)},children:r})};var A,y=l(5380),v=l(5007),C=l(2779),b=l(1230);function E(){return E=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},E.apply(null,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(A||(A={}));var w="beforeunload";function B(e){e.preventDefault(),e.returnValue=""}function x(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function k(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,o=void 0===r?"":r,u=e.hash,a=void 0===u?"":u;return o&&"?"!==o&&(n+="?"===o.charAt(0)?o:"?"+o),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}function F(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function S(e,t){if(!e)throw new Error(t)}const D=(0,t.createContext)(null),O=(0,t.createContext)(null),P=(0,t.createContext)({outlet:null,matches:[]});function j(e){return function(e){let n=(0,t.useContext)(P).outlet;return n?(0,t.createElement)(M.Provider,{value:e},n):n}(e.context)}function _(e){S(!1)}function N(e){let{basename:n="/",children:r=null,location:o,navigationType:u=A.Pop,navigator:a,static:i=!1}=e;z()&&S(!1);let l=ne(n),s=(0,t.useMemo)((()=>({basename:l,navigator:a,static:i})),[l,a,i]);"string"==typeof o&&(o=F(o));let{pathname:c="/",search:f="",hash:d="",state:p=null,key:h="default"}=o,g=(0,t.useMemo)((()=>{let e=ee(c,l);return null==e?null:{pathname:e,search:f,hash:d,state:p,key:h}}),[l,c,f,d,p,h]);return null==g?null:(0,t.createElement)(D.Provider,{value:s},(0,t.createElement)(O.Provider,{children:r,value:{location:g,navigationType:u}}))}function R(e){let{children:n,location:r}=e;return function(e,n){z()||S(!1);let{matches:r}=(0,t.useContext)(P),o=r[r.length-1],u=o?o.params:{},a=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let i,l=T();if(n){var s;let e="string"==typeof n?F(n):n;"/"===a||(null==(s=e.pathname)?void 0:s.startsWith(a))||S(!1),i=e}else i=l;let c=i.pathname||"/",f=function(e,t,n){void 0===n&&(n="/");let r=ee(("string"==typeof t?F(t):t).pathname||"/",n);if(null==r)return null;let o=q(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let u=null;for(let e=0;null==u&&e<o.length;++e)u=X(o[e],r);return u}(e,{pathname:"/"===a?c:c.slice(a.length)||"/"});return function(e,n){return void 0===n&&(n=[]),null==e?null:e.reduceRight(((r,o,u)=>(0,t.createElement)(P.Provider,{children:void 0!==o.route.element?o.route.element:(0,t.createElement)(j,null),value:{outlet:r,matches:n.concat(e.slice(0,u+1))}})),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:te([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:te([a,e.pathnameBase])}))),r)}(U(n),r)}function z(){return null!=(0,t.useContext)(O)}function T(){return z()||S(!1),(0,t.useContext)(O).location}function L(){z()||S(!1);let{basename:e,navigator:n}=(0,t.useContext)(D),{matches:r}=(0,t.useContext)(P),{pathname:o}=T(),u=JSON.stringify(r.map((e=>e.pathnameBase))),a=(0,t.useRef)(!1);(0,t.useEffect)((()=>{a.current=!0}));let i=(0,t.useCallback)((function(t,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof t)return void n.go(t);let i=G(t,JSON.parse(u),o);"/"!==e&&(i.pathname=te([e,i.pathname])),(r.replace?n.replace:n.push)(i,r.state)}),[e,n,u,o]);return i}const M=(0,t.createContext)(null);function I(e){let{matches:n}=(0,t.useContext)(P),{pathname:r}=T(),o=JSON.stringify(n.map((e=>e.pathnameBase)));return(0,t.useMemo)((()=>G(e,JSON.parse(o),r)),[e,o,r])}function U(e){let n=[];return t.Children.forEach(e,(e=>{if(!(0,t.isValidElement)(e))return;if(e.type===t.Fragment)return void n.push.apply(n,U(e.props.children));e.type!==_&&S(!1);let r={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(r.children=U(e.props.children)),n.push(r)})),n}function q(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let u={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};u.relativePath.startsWith("/")&&(u.relativePath.startsWith(r)||S(!1),u.relativePath=u.relativePath.slice(r.length));let a=te([r,u.relativePath]),i=n.concat(u);e.children&&e.children.length>0&&(!0===e.index&&S(!1),q(e.children,t,i,a)),(null!=e.path||e.index)&&t.push({path:a,score:Q(a,e.index),routesMeta:i})})),t}const H=/^:\w+$/,W=3,V=2,$=1,Z=10,K=-2,Y=e=>"*"===e;function Q(e,t){let n=e.split("/"),r=n.length;return n.some(Y)&&(r+=K),t&&(r+=V),n.filter((e=>!Y(e))).reduce(((e,t)=>e+(H.test(t)?W:""===t?$:Z)),r)}function X(e,t){let{routesMeta:n}=e,r={},o="/",u=[];for(let e=0;e<n.length;++e){let a=n[e],i=e===n.length-1,l="/"===o?t:t.slice(o.length)||"/",s=J({path:a.relativePath,caseSensitive:a.caseSensitive,end:i},l);if(!s)return null;Object.assign(r,s.params);let c=a.route;u.push({params:r,pathname:te([o,s.pathname]),pathnameBase:te([o,s.pathnameBase]),route:c}),"/"!==s.pathnameBase&&(o=te([o,s.pathnameBase]))}return u}function J(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let u=o[0],a=u.replace(/(.)\/+$/,"$1"),i=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=i[n]||"";a=u.slice(0,u.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(i[n]||""),e}),{}),pathname:u,pathnameBase:a,pattern:e}}function G(e,t,n){let r,o="string"==typeof e?F(e):e,u=""===e||""===o.pathname?"/":o.pathname;if(null==u)r=n;else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}r=e>=0?t[e]:"/"}let a=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?F(e):e,u=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:u,search:re(r),hash:oe(o)}}(o,r);return u&&"/"!==u&&u.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function ee(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const te=e=>e.join("/").replace(/\/\/+/g,"/"),ne=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),re=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",oe=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";var ue=l(2327),ae=(0,t.memo)((function(t){var n=t.someClasses,r=(0,ue.$)().t,o=(0,v.v9)(b.BY),a=(0,C.T)(),i=L();return(0,e.jsxs)("div",{"data-testid":"header_test",className:(0,u.A)("shonqUwZ",{},[n]),children:[(0,e.jsx)("div",{className:"voAYWlRD"}),(0,e.jsx)("div",{className:"hwVISEUF",children:o?(0,e.jsx)("div",{className:"JfCZX3ak",children:(0,e.jsx)(g.z,{onClick:function(){return a(b.hI.logout()),void i("/")},children:r("выйти")})}):(0,e.jsx)("div",{className:"EQp4CZWQ",children:(0,e.jsx)(m,{id:"authModal",children:(0,e.jsx)(y.x,{children:r("войти")})})})})]})}));const ie=ae;var le=(0,t.createContext)({}),se=function(){return(0,t.useContext)(le)};var ce=function(){return ce=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ce.apply(this,arguments)},fe=(0,t.memo)((function(t){var n=t.someClasses,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["someClasses"]),o=(0,ue.$)(),a=o.t,i=o.i18n;return(0,e.jsx)("button",ce({onClick:function(){return i.changeLanguage("ru"===i.language?"en":"ru")},className:(0,u.A)("OciK9pDI",{},[n])},r,{children:a("сменить язык")}))}));const de=fe;var pe,he;function ge(){return ge=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ge.apply(null,arguments)}const me=function(e){return t.createElement("svg",ge({xmlns:"http://www.w3.org/2000/svg",width:40,height:41,fill:"none"},e),pe||(pe=t.createElement("g",{fill:"#0115C6",clipPath:"url(#theme-dark_svg__a)"},t.createElement("path",{d:"M10.848 1.044A12.87 12.87 0 0 0 4.931 11.88c0 4.571 2.387 8.57 5.976 10.837C4.852 22.717 0 17.87 0 11.88a10.83 10.83 0 0 1 3.177-7.662 10.85 10.85 0 0 1 7.671-3.174"}),t.createElement("path",{d:"m14.97 15.9-2.288-1.439-2.209 1.537.671-2.6-2.15-1.636 2.683-.177.887-2.542 1.006 2.502 2.683.06-2.072 1.714zM21.48 8.787l-2.92-1.832-2.84 1.97.828-3.35-2.741-2.088 3.451-.236L18.402 0l1.322 3.211 3.412.06-2.663 2.226zM33.669 4l2.82 2.817L5.78 37.493l-2.82-2.817zM33.53 23.702a10.83 10.83 0 0 1-3.177 7.662 10.854 10.854 0 0 1-14.1 1.066L31.42 17.279a10.8 10.8 0 0 1 2.11 6.423M33.393 31.346l2.268-5.457L40 30.893zM35.66 21.574l-2.248-5.477 6.588.472zM24.852 36.666l5.464-2.266-.474 6.6zM15.05 34.4l5.463 2.266-4.99 4.314z"}))),he||(he=t.createElement("defs",null,t.createElement("clipPath",{id:"theme-dark_svg__a"},t.createElement("path",{fill:"#fff",d:"M0 0h40v41H0z"})))))};var Ae,ye;function ve(){return ve=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ve.apply(null,arguments)}const Ce=function(e){return t.createElement("svg",ve({xmlns:"http://www.w3.org/2000/svg",width:40,height:41,fill:"none"},e),Ae||(Ae=t.createElement("g",{fill:"#FFC700",clipPath:"url(#theme-light_svg__a)"},t.createElement("path",{d:"M33.53 23.702a10.83 10.83 0 0 1-3.177 7.662 10.854 10.854 0 0 1-14.1 1.066L31.42 17.279a10.8 10.8 0 0 1 2.11 6.423M33.393 31.346l2.268-5.457L40 30.893zM35.66 21.574l-2.248-5.477 6.588.472zM24.852 36.666l5.464-2.266-.474 6.6zM15.05 34.4l5.463 2.266-4.99 4.314zM33.669 4l2.82 2.817L5.78 37.493l-2.82-2.817z"}),t.createElement("path",{fillRule:"evenodd",d:"m18.56 6.955 2.92 1.832-1.007-3.29 2.663-2.226-3.412-.06L18.402 0l-1.144 3.25-3.451.237 2.741 2.089-.828 3.349zm-5.878 7.506L14.97 15.9l-.789-2.581 2.072-1.715-2.683-.059-1.006-2.502-.887 2.542-2.683.177 2.15 1.635-.67 2.601z",clipRule:"evenodd"}),t.createElement("path",{d:"M10.848 1.044A12.87 12.87 0 0 0 4.931 11.88c0 4.571 2.387 8.57 5.976 10.837C4.852 22.717 0 17.87 0 11.88a10.83 10.83 0 0 1 3.177-7.662 10.85 10.85 0 0 1 7.671-3.174"}))),ye||(ye=t.createElement("defs",null,t.createElement("clipPath",{id:"theme-light_svg__a"},t.createElement("path",{fill:"#fff",d:"M0 0h40v41H0z"})))))};var be=function(){return be=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},be.apply(this,arguments)},Ee=(0,t.memo)((function(t){var n=t.someClasses,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["someClasses"]),a=o(),i=a.toggleTheme,l=a.isDark;return(0,e.jsx)("div",be({className:(0,u.A)("lFWkUZ1i",{},[n]),onClick:i},r,{children:l?(0,e.jsx)(me,{}):(0,e.jsx)(Ce,{})}))}));const we=Ee;var Be=l(6271),xe=l(7487),ke=l(7894),Fe=(0,t.memo)((function(t){var n=t.otherClasses,r=se(),o=r.isSidebarOpen,a=r.openSidebarHandler;return(0,e.jsx)("button",{className:(0,u.A)("OBvQjviT",{},[n]),"data-testid":"toggle_sidebar",onClick:function(){return a()},children:o?(0,e.jsx)(ke.ZP,{icon:Be.n}):(0,e.jsx)(ke.ZP,{icon:xe.j})})}));const Se=Fe;var De,Oe,Pe=(0,t.lazy)((function(){return l.e(582).then(l.bind(l,4582))})),je=(0,t.lazy)((function(){return l.e(986).then(l.bind(l,8986))})),_e=(0,t.lazy)((function(){return l.e(433).then(l.bind(l,8433))})),Ne=(0,t.lazy)((function(){return l.e(537).then(l.bind(l,6628))})),Re=l(8554),ze=l(9316),Te=l(4140),Le=l(8568),Me=l(874),Ie=(0,t.lazy)((function(){return l.e(744).then(l.bind(l,3744))})),Ue=((De={})["страница главная"]="/",De["страница о нас"]="/about",De["страница сообщения"]="/messages",De["страница не найдено"]="*",De["страница профиль"]="/profile",De),qe=((Oe={})["страница главная"]={element:(0,e.jsx)(je,{}),path:Ue["страница главная"],icon:(0,e.jsx)(ke.ZP,{icon:Re.L})},Oe["страница профиль"]={element:(0,e.jsx)(Ie,{}),path:Ue["страница профиль"],icon:(0,e.jsx)(ke.ZP,{icon:Me.E}),forAuthUser:!0},Oe["страница о нас"]={element:(0,e.jsx)(Pe,{}),path:Ue["страница о нас"],icon:(0,e.jsx)(ke.ZP,{icon:Te.u})},Oe["страница сообщения"]={element:(0,e.jsx)(_e,{}),path:Ue["страница сообщения"],icon:(0,e.jsx)(ke.ZP,{icon:ze.z})},Oe["страница не найдено"]={element:(0,e.jsx)(Ne,{}),path:Ue["страница не найдено"],icon:(0,e.jsx)(ke.ZP,{icon:Le.K})},Oe);var He=l(4417),We=function(){return We=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},We.apply(this,arguments)};const Ve=function(t){var n=t.someClasses,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["someClasses"]);return(0,e.jsx)("div",We({className:(0,u.A)("E86UVqo4",{},[n])},r,{children:(0,e.jsx)(He.a,{})}))},$e=function(){var n=(0,v.v9)(b.BY),r=Object.values(qe).filter((function(e){return e.forAuthUser?(null==e?void 0:e.forAuthUser)&&n?e:void 0:e}));return(0,e.jsx)(t.Suspense,{fallback:(0,e.jsx)(Ve,{}),children:(0,e.jsx)(R,{children:r.map((function(t){var n=t.element,r=t.path;return(0,e.jsx)(_,{element:n,path:r},r)}))})})};function Ze(){return Ze=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ze.apply(this,arguments)}function Ke(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}const Ye=["onClick","reloadDocument","replace","state","target","to"],Qe=["aria-current","caseSensitive","className","end","style","to","children"],Xe=(0,t.forwardRef)((function(e,n){let{onClick:r,reloadDocument:o,replace:u=!1,state:a,target:i,to:l}=e,s=Ke(e,Ye),c=function(e){z()||S(!1);let{basename:n,navigator:r}=(0,t.useContext)(D),{hash:o,pathname:u,search:a}=I(e),i=u;if("/"!==n){let t=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?F(e).pathname:e.pathname}(e),r=null!=t&&t.endsWith("/");i="/"===u?n+(r?"/":""):te([n,u])}return r.createHref({pathname:i,search:a,hash:o})}(l),f=function(e,n){let{target:r,replace:o,state:u}=void 0===n?{}:n,a=L(),i=T(),l=I(e);return(0,t.useCallback)((t=>{if(!(0!==t.button||r&&"_self"!==r||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(t))){t.preventDefault();let n=!!o||k(i)===k(l);a(e,{replace:n,state:u})}}),[i,a,l,o,u,r,e])}(l,{replace:u,state:a,target:i});return(0,t.createElement)("a",Ze({},s,{href:c,onClick:function(e){r&&r(e),e.defaultPrevented||o||f(e)},ref:n,target:i}))})),Je=(0,t.forwardRef)((function(e,n){let{"aria-current":r="page",caseSensitive:o=!1,className:u="",end:a=!1,style:i,to:l,children:s}=e,c=Ke(e,Qe),f=T(),d=I(l),p=f.pathname,h=d.pathname;o||(p=p.toLowerCase(),h=h.toLowerCase());let g,m=p===h||!a&&p.startsWith(h)&&"/"===p.charAt(h.length),A=m?r:void 0;g="function"==typeof u?u({isActive:m}):[u,m?"active":null].filter(Boolean).join(" ");let y="function"==typeof i?i({isActive:m}):i;return(0,t.createElement)(Xe,Ze({},c,{"aria-current":A,className:g,ref:n,style:y,to:l}),"function"==typeof s?s({isActive:m}):s)})),Ge="obN2bH01";var et=function(){return et=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},et.apply(this,arguments)},tt=(0,t.memo)((function(t){var n=t.children,r=t.disabled,o=void 0!==r&&r,a=t.to,i=t.someClasses,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["children","disabled","to","someClasses"]);return o?(0,e.jsx)("div",{className:(0,u.A)(Ge,{},[i]),children:n}):(0,e.jsx)(Je,et({to:a,className:(0,u.A)(Ge,{},[i])},l,{children:n}))}));const nt=tt;var rt=(0,t.memo)((function(t){var n=t.otherClasses,r=t.short,o=(0,ue.$)().t,a=T().pathname,i=(0,v.v9)(b.BY);return(0,e.jsx)("ul",{className:(0,u.A)("CXKG5ele",{},[n]),children:Object.keys(qe).map((function(t){var n;if(!(null===(n=qe[t])||void 0===n?void 0:n.forAuthUser)||i)return"страница не найдено"!=t?(0,e.jsx)(nt,{disabled:a===qe[t].path,to:{pathname:qe[t].path,state:{prevPath:location.pathname}},children:(0,e.jsxs)("li",{children:[(0,e.jsx)("div",{className:"nxdVWmeP",children:qe[t].icon}),r&&(0,e.jsx)("div",{className:"mO2kYv5w",children:o(t)})]})},t):void 0}))})}));const ot=rt;var ut=(0,t.memo)((function(t){var n,r=t.someClasses,o=se().isSidebarOpen;return(0,e.jsxs)("div",{"data-testid":"sidebar_test",className:(0,u.A)("PnOBZAn1",(n={},n.zs4W97ZZ=o,n),[r]),children:[(0,e.jsx)(ot,{short:o}),(0,e.jsxs)("span",{className:"iG4pRHzd",children:[(0,e.jsx)(de,{}),(0,e.jsx)(we,{})]}),(0,e.jsx)("span",{className:"aT9z1dxz",children:(0,e.jsx)(Se,{})})]})}));const at=ut;var it=l(5682),lt=function(){return(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(h,{id:"authModal",children:(0,e.jsx)(t.Suspense,{fallback:(0,e.jsx)(He.a,{}),children:(0,e.jsx)(it.U0,{})})})})};const st=(0,t.memo)((function(){var n=o().theme,r=(0,C.T)();return(0,t.useEffect)((function(){r(b.hI.updateUser())}),[r]),(0,t.useEffect)((function(){!function(e){var t=document.body;t.classList.add("app"),t.classList.remove("dark"),t.classList.remove("light"),t.classList.add(e)}(n)}),[n]),(0,e.jsx)("div",{className:(0,u.A)("app",{},[n]),children:(0,e.jsxs)(t.Suspense,{fallback:(0,e.jsx)(He.a,{}),children:[(0,e.jsx)(ie,{}),(0,e.jsxs)(i,{styleProps:{flexDirection:"row"},children:[(0,e.jsx)(at,{}),(0,e.jsxs)(c,{children:[(0,e.jsx)(lt,{}),(0,e.jsx)($e,{})]})]})]})})}));var ct=l(745);var ft=function(){return ft=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ft.apply(this,arguments)};const dt=function(t){var n=t.someClasses,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["someClasses"]),o=(0,ue.$)().t;return(0,e.jsxs)("div",ft({className:(0,u.A)("HSFBbkPF",{},[n])},r,{children:[(0,e.jsx)("b",{children:o("страница с ошибкой")}),(0,e.jsx)("button",{onClick:function(){window.location.reload()},children:o("перезагрузить сайт")})]}))};var pt,ht=(pt=function(e,t){return pt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},pt(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}pt(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});const gt=function(n){function r(e){var t=n.call(this,e)||this;return t.state={hasError:!1},t}return ht(r,n),r.getDerivedStateFromError=function(e){return{hasError:!0}},r.prototype.componentDidCatch=function(e,t){console.log("error")},r.prototype.render=function(){var n=this.state.hasError,r=this.props.children;return n?(0,e.jsx)(t.Suspense,{fallback:(0,e.jsx)(He.a,{}),children:(0,e.jsx)(dt,{})}):(0,e.jsx)(e.Fragment,{children:r})},r}(t.Component);var mt=l(3379),At=l.n(mt),yt=l(7795),vt=l.n(yt),Ct=l(569),bt=l.n(Ct),Et=l(3565),wt=l.n(Et),Bt=l(9216),xt=l.n(Bt),kt=l(4589),Ft=l.n(kt),St=l(5712),Dt={};Dt.styleTagTransform=Ft(),Dt.setAttributes=wt(),Dt.insert=bt().bind(null,"head"),Dt.domAPI=vt(),Dt.insertStyleElement=xt(),At()(St.Z,Dt),St.Z&&St.Z.locals&&St.Z.locals;var Ot=l(1002),Pt=l(5671),jt=l(3144);function _t(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Nt(e,t){return Nt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Nt(e,t)}function Rt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Nt(e,t)}function zt(e,t){if(t&&("object"==(0,Ot.Z)(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _t(e)}function Tt(e){return Tt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Tt(e)}var Lt=l(4942),Mt=l(3878),It=l(8192),Ut=l(5267);function qt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qt(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Wt={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},Vt=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,Pt.Z)(this,e),this.init(t,n)}return(0,jt.Z)(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||Wt,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,Ht(Ht({},{prefix:"".concat(this.prefix,":").concat(t,":")}),this.options))}}]),e}(),$t=new Vt,Zt=function(){function e(){(0,Pt.Z)(this,e),this.observers={}}return(0,jt.Z)(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this.observers[e]&&[].concat(this.observers[e]).forEach((function(e){e.apply(void 0,n)})),this.observers["*"]&&[].concat(this.observers["*"]).forEach((function(t){t.apply(t,[e].concat(n))}))}}]),e}();function Kt(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n}function Yt(e){return null==e?"":""+e}function Qt(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function o(){return!e||"string"==typeof e}for(var u="string"!=typeof t?[].concat(t):t.split(".");u.length>1;){if(o())return{};var a=r(u.shift());!e[a]&&n&&(e[a]=new n),e=Object.prototype.hasOwnProperty.call(e,a)?e[a]:{}}return o()?{}:{obj:e,k:r(u.shift())}}function Xt(e,t,n){var r=Qt(e,t,Object);r.obj[r.k]=n}function Jt(e,t){var n=Qt(e,t),r=n.obj,o=n.k;if(r)return r[o]}function Gt(e,t,n){var r=Jt(e,n);return void 0!==r?r:Jt(t,n)}function en(e,t,n){for(var r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):en(e[r],t[r],n):e[r]=t[r]);return e}function tn(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var nn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function rn(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return nn[e]})):e}var on="undefined"!=typeof window&&window.navigator&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,un=[" ",",","?","!",";"];function an(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ln(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?an(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):an(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function sn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(e){if(e[t])return e[t];for(var r=t.split(n),o=e,u=0;u<r.length;++u){if(!o)return;if("string"==typeof o[r[u]]&&u+1<r.length)return;if(void 0===o[r[u]]){for(var a=2,i=r.slice(u,u+a).join(n),l=o[i];void 0===l&&r.length>u+a;)a++,l=o[i=r.slice(u,u+a).join(n)];if(void 0===l)return;if(t.endsWith(i)){if("string"==typeof l)return l;if(i&&"string"==typeof l[i])return l[i]}var s=r.slice(u+a).join(n);return s?sn(l,s,n):void 0}o=o[r[u]]}return o}}var cn=function(e){Rt(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=Tt(t);if(n){var o=Tt(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return zt(this,e)});function o(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return(0,Pt.Z)(this,o),t=r.call(this),on&&Zt.call(_t(t)),t.data=e||{},t.options=n,void 0===t.options.keySeparator&&(t.options.keySeparator="."),void 0===t.options.ignoreJSONStructure&&(t.options.ignoreJSONStructure=!0),t}return(0,jt.Z)(o,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,u=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[e,t];n&&"string"!=typeof n&&(a=a.concat(n)),n&&"string"==typeof n&&(a=a.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(a=e.split("."));var i=Jt(this.data,a);return i||!u||"string"!=typeof n?i:sn(this.data&&this.data[e]&&this.data[e][t],n,o)}},{key:"addResource",value:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},u=this.options.keySeparator;void 0===u&&(u=".");var a=[e,t];n&&(a=a.concat(u?n.split(u):n)),e.indexOf(".")>-1&&(r=t,t=(a=e.split("."))[1]),this.addNamespaces(t),Xt(this.data,a,r),o.silent||this.emit("added",e,t,n,r)}},{key:"addResources",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var o in n)"string"!=typeof n[o]&&"[object Array]"!==Object.prototype.toString.apply(n[o])||this.addResource(e,t,o,n[o],{silent:!0});r.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,r,o){var u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(".")>-1&&(r=n,n=t,t=(a=e.split("."))[1]),this.addNamespaces(t);var i=Jt(this.data,a)||{};r?en(i,n,o):i=ln(ln({},i),n),Xt(this.data,a,i),u.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?ln(ln({},{}),this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"hasLanguageSomeTranslations",value:function(e){var t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((function(e){return t[e]&&Object.keys(t[e]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),o}(Zt),fn={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,r,o){var u=this;return e.forEach((function(e){u.processors[e]&&(t=u.processors[e].process(t,n,r,o))})),t}};function dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dn(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var hn={},gn=function(e){Rt(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=Tt(t);if(n){var o=Tt(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return zt(this,e)});function o(e){var t,n,u,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,Pt.Z)(this,o),t=r.call(this),on&&Zt.call(_t(t)),n=e,u=_t(t),["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"].forEach((function(e){n[e]&&(u[e]=n[e])})),t.options=a,void 0===t.options.keySeparator&&(t.options.keySeparator="."),t.logger=$t.create("translator"),t}return(0,jt.Z)(o,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,o=t.ns||this.options.defaultNS||[],u=n&&e.indexOf(n)>-1,a=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,n){t=t||"",n=n||"";var r=un.filter((function(e){return t.indexOf(e)<0&&n.indexOf(e)<0}));if(0===r.length)return!0;var o=new RegExp("(".concat(r.map((function(e){return"?"===e?"\\?":e})).join("|"),")")),u=!o.test(e);if(!u){var a=e.indexOf(n);a>0&&!o.test(e.substring(0,a))&&(u=!0)}return u}(e,n,r));if(u&&!a){var i=e.match(this.interpolator.nestingRegexp);if(i&&i.length>0)return{key:e,namespaces:o};var l=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(l[0])>-1)&&(o=l.shift()),e=l.join(r)}return"string"==typeof o&&(o=[o]),{key:e,namespaces:o}}},{key:"translate",value:function(e,t,n){var r=this;if("object"!==(0,Ot.Z)(t)&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var u=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,a=this.extractFromKey(e[e.length-1],t),i=a.key,l=a.namespaces,s=l[l.length-1],c=t.lng||this.language,f=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(c&&"cimode"===c.toLowerCase()){if(f){var d=t.nsSeparator||this.options.nsSeparator;return s+d+i}return i}var p=this.resolve(e,t),h=p&&p.res,g=p&&p.usedKey||i,m=p&&p.exactUsedKey||i,A=Object.prototype.toString.apply(h),y=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,v=!this.i18nFormat||this.i18nFormat.handleAsObject;if(v&&h&&"string"!=typeof h&&"boolean"!=typeof h&&"number"!=typeof h&&["[object Number]","[object Function]","[object RegExp]"].indexOf(A)<0&&("string"!=typeof y||"[object Array]"!==A)){if(!t.returnObjects&&!this.options.returnObjects)return this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(g,h,pn(pn({},t),{},{ns:l})):"key '".concat(i," (").concat(this.language,")' returned an object instead of string.");if(u){var C="[object Array]"===A,b=C?[]:{},E=C?m:g;for(var w in h)if(Object.prototype.hasOwnProperty.call(h,w)){var B="".concat(E).concat(u).concat(w);b[w]=this.translate(B,pn(pn({},t),{joinArrays:!1,ns:l})),b[w]===B&&(b[w]=h[w])}h=b}}else if(v&&"string"==typeof y&&"[object Array]"===A)(h=h.join(y))&&(h=this.extendTranslation(h,e,t,n));else{var x=!1,k=!1,F=void 0!==t.count&&"string"!=typeof t.count,S=o.hasDefaultValue(t),D=F?this.pluralResolver.getSuffix(c,t.count,t):"",O=t["defaultValue".concat(D)]||t.defaultValue;!this.isValidLookup(h)&&S&&(x=!0,h=O),this.isValidLookup(h)||(k=!0,h=i);var P=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&k?void 0:h,j=S&&O!==h&&this.options.updateMissing;if(k||x||j){if(this.logger.log(j?"updateKey":"missingKey",c,s,i,j?O:h),u){var _=this.resolve(i,pn(pn({},t),{},{keySeparator:!1}));_&&_.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var N=[],R=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&R&&R[0])for(var z=0;z<R.length;z++)N.push(R[z]);else"all"===this.options.saveMissingTo?N=this.languageUtils.toResolveHierarchy(t.lng||this.language):N.push(t.lng||this.language);var T=function(e,n,o){var u=S&&o!==h?o:P;r.options.missingKeyHandler?r.options.missingKeyHandler(e,s,n,u,j,t):r.backendConnector&&r.backendConnector.saveMissing&&r.backendConnector.saveMissing(e,s,n,u,j,t),r.emit("missingKey",e,s,n,h)};this.options.saveMissing&&(this.options.saveMissingPlurals&&F?N.forEach((function(e){r.pluralResolver.getSuffixes(e).forEach((function(n){T([e],i+n,t["defaultValue".concat(n)]||O)}))})):T(N,i,O))}h=this.extendTranslation(h,e,t,p,n),k&&h===i&&this.options.appendNamespaceToMissingKey&&(h="".concat(s,":").concat(i)),(k||x)&&this.options.parseMissingKeyHandler&&(h="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(i,x?h:void 0):this.options.parseMissingKeyHandler(h))}return h}},{key:"extendTranslation",value:function(e,t,n,r,o){var u=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(pn(pn({},n),{interpolation:pn(pn({},this.options.interpolation),n.interpolation)}));var a,i="string"==typeof e&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(i){var l=e.match(this.interpolator.nestingRegexp);a=l&&l.length}var s=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(s=pn(pn({},this.options.interpolation.defaultVariables),s)),e=this.interpolator.interpolate(e,s,n.lng||this.language,n),i){var c=e.match(this.interpolator.nestingRegexp);a<(c&&c.length)&&(n.nest=!1)}!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return o&&o[0]===r[0]&&!n.context?(u.logger.warn("It seems you are nesting recursively key: ".concat(r[0]," in key: ").concat(t[0])),null):u.translate.apply(u,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var f=n.postProcess||this.options.postProcess,d="string"==typeof f?[f]:f;return null!=e&&d&&d.length&&!1!==n.applyPostProcessor&&(e=fn.handle(d,e,t,this.options&&this.options.postProcessPassResolved?pn({i18nResolved:r},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,r,o,u,a=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!a.isValidLookup(t)){var l=a.extractFromKey(e,i),s=l.key;n=s;var c=l.namespaces;a.options.fallbackNS&&(c=c.concat(a.options.fallbackNS));var f=void 0!==i.count&&"string"!=typeof i.count,d=f&&!i.ordinal&&0===i.count&&a.pluralResolver.shouldUseIntlApi(),p=void 0!==i.context&&("string"==typeof i.context||"number"==typeof i.context)&&""!==i.context,h=i.lngs?i.lngs:a.languageUtils.toResolveHierarchy(i.lng||a.language,i.fallbackLng);c.forEach((function(e){a.isValidLookup(t)||(u=e,!hn["".concat(h[0],"-").concat(e)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(u)&&(hn["".concat(h[0],"-").concat(e)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(h.join(", "),'" won\'t get resolved as namespace "').concat(u,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),h.forEach((function(n){if(!a.isValidLookup(t)){o=n;var u,l=[s];if(a.i18nFormat&&a.i18nFormat.addLookupKeys)a.i18nFormat.addLookupKeys(l,s,n,e,i);else{var c;f&&(c=a.pluralResolver.getSuffix(n,i.count,i));var h="_zero";if(f&&(l.push(s+c),d&&l.push(s+h)),p){var g="".concat(s).concat(a.options.contextSeparator).concat(i.context);l.push(g),f&&(l.push(g+c),d&&l.push(g+h))}}for(;u=l.pop();)a.isValidLookup(t)||(r=u,t=a.getResource(n,e,u,i))}})))}))}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:o,usedNS:u}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}],[{key:"hasDefaultValue",value:function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&"defaultValue"===t.substring(0,12)&&void 0!==e[t])return!0;return!1}}]),o}(Zt);function mn(e){return e.charAt(0).toUpperCase()+e.slice(1)}var An=function(){function e(t){(0,Pt.Z)(this,e),this.options=t,this.supportedLngs=this.options.supportedLngs||!1,this.logger=$t.create("languageUtils")}return(0,jt.Z)(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=mn(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=mn(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=mn(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){if(0===e.indexOf(r))return e}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),o=[],u=function(e){e&&(n.isSupportedCode(e)?o.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&u(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&u(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&u(this.getLanguagePartFromCode(e))):"string"==typeof e&&u(this.formatLanguageCode(e)),r.forEach((function(e){o.indexOf(e)<0&&u(n.formatLanguageCode(e))})),o}}]),e}(),yn=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],vn={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}},Cn=["v1","v2","v3"],bn={zero:0,one:1,two:2,few:3,many:4,other:5},En=function(){function e(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,Pt.Z)(this,e),this.languageUtils=t,this.options=r,this.logger=$t.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=(n={},yn.forEach((function(e){e.lngs.forEach((function(t){n[t]={numbers:e.nr,plurals:vn[e.fc]}}))})),n)}return(0,jt.Z)(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(e,{type:t.ordinal?"ordinal":"cardinal"})}catch(e){return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(e,t);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,n).map((function(e){return"".concat(t).concat(e)}))}},{key:"getSuffixes",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=this.getRule(e,n);return r?this.shouldUseIntlApi()?r.resolvedOptions().pluralCategories.sort((function(e,t){return bn[e]-bn[t]})).map((function(e){return"".concat(t.options.prepend).concat(e)})):r.numbers.map((function(r){return t.getSuffix(e,r,n)})):[]}},{key:"getSuffix",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=this.getRule(e,n);return r?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(r.select(t)):this.getSuffixRetroCompatible(r,t):(this.logger.warn("no plural rule found for: ".concat(e)),"")}},{key:"getSuffixRetroCompatible",value:function(e,t){var n=this,r=e.noAbs?e.plurals(t):e.plurals(Math.abs(t)),o=e.numbers[r];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===o?o="plural":1===o&&(o=""));var u=function(){return n.options.prepend&&o.toString()?n.options.prepend+o.toString():o.toString()};return"v1"===this.options.compatibilityJSON?1===o?"":"number"==typeof o?"_plural_".concat(o.toString()):u():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?u():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}},{key:"shouldUseIntlApi",value:function(){return!Cn.includes(this.options.compatibilityJSON)}}]),e}();function wn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wn(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xn=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,Pt.Z)(this,e),this.logger=$t.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return(0,jt.Z)(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:rn,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?tn(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?tn(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?tn(t.nestingPrefix):t.nestingPrefixEscaped||tn("$t("),this.nestingSuffix=t.nestingSuffix?tn(t.nestingSuffix):t.nestingSuffixEscaped||tn(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,r){var o,u,a,i=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function s(e){return e.replace(/\$/g,"$$$$")}var c=function(e){if(e.indexOf(i.formatSeparator)<0){var o=Gt(t,l,e);return i.alwaysFormat?i.format(o,void 0,n,Bn(Bn(Bn({},r),t),{},{interpolationkey:e})):o}var u=e.split(i.formatSeparator),a=u.shift().trim(),s=u.join(i.formatSeparator).trim();return i.format(Gt(t,l,a),s,n,Bn(Bn(Bn({},r),t),{},{interpolationkey:a}))};this.resetRegExp();var f=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,d=r&&r.interpolation&&void 0!==r.interpolation.skipOnVariables?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return s(e)}},{regex:this.regexp,safeValue:function(e){return i.escapeValue?s(i.escape(e)):s(e)}}].forEach((function(t){for(a=0;o=t.regex.exec(e);){var n=o[1].trim();if(void 0===(u=c(n)))if("function"==typeof f){var l=f(e,o,r);u="string"==typeof l?l:""}else if(r&&r.hasOwnProperty(n))u="";else{if(d){u=o[0];continue}i.logger.warn("missed to pass in variable ".concat(n," for interpolating ").concat(e)),u=""}else"string"==typeof u||i.useRawValueToEscape||(u=Yt(u));var s=t.safeValue(u);if(e=e.replace(o[0],s),d?(t.regex.lastIndex+=s.length,t.regex.lastIndex-=o[0].length):t.regex.lastIndex=0,++a>=i.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,r,o=this,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=Bn({},u);function i(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp("".concat(n,"[ ]*{"))),o="{".concat(r[1]);e=r[0],o=(o=this.interpolate(o,a)).replace(/'/g,'"');try{a=JSON.parse(o),t&&(a=Bn(Bn({},t),a))}catch(t){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),t),"".concat(e).concat(n).concat(o)}return delete a.defaultValue,e}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(e);){var l=[],s=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var c=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=c.shift(),l=c,s=!0}if((r=t(i.call(this,n[1].trim(),a),a))&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=Yt(r)),r||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),r=""),s&&(r=l.reduce((function(e,t){return o.format(e,t,u.lng,Bn(Bn({},u),{},{interpolationkey:n[1].trim()}))}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}]),e}();function kn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kn(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Sn=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,Pt.Z)(this,e),this.logger=$t.create("formatter"),this.options=t,this.formats={number:function(e,t,n){return new Intl.NumberFormat(t,n).format(e)},currency:function(e,t,n){return new Intl.NumberFormat(t,Fn(Fn({},n),{},{style:"currency"})).format(e)},datetime:function(e,t,n){return new Intl.DateTimeFormat(t,Fn({},n)).format(e)},relativetime:function(e,t,n){return new Intl.RelativeTimeFormat(t,Fn({},n)).format(e,n.range||"day")},list:function(e,t,n){return new Intl.ListFormat(t,Fn({},n)).format(e)}},this.init(t)}return(0,jt.Z)(e,[{key:"init",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}},{key:"add",value:function(e,t){this.formats[e.toLowerCase().trim()]=t}},{key:"format",value:function(e,t,n,r){var o=this;return t.split(this.formatSeparator).reduce((function(e,t){var u=function(e){var t=e.toLowerCase().trim(),n={};if(e.indexOf("(")>-1){var r=e.split("(");t=r[0].toLowerCase().trim();var o=r[1].substring(0,r[1].length-1);"currency"===t&&o.indexOf(":")<0?n.currency||(n.currency=o.trim()):"relativetime"===t&&o.indexOf(":")<0?n.range||(n.range=o.trim()):o.split(";").forEach((function(e){if(e){var t=(u=e.split(":"),(0,Mt.Z)(u)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(u)||(0,It.Z)(u)||(0,Ut.Z)()),r=t[0],o=t.slice(1).join(":");"false"===o.trim()&&(n[r.trim()]=!1),"true"===o.trim()&&(n[r.trim()]=!0),isNaN(o.trim())||(n[r.trim()]=parseInt(o.trim(),10)),n[r.trim()]||(n[r.trim()]=o.trim())}var u}))}return{formatName:t,formatOptions:n}}(t),a=u.formatName,i=u.formatOptions;if(o.formats[a]){var l=e;try{var s=r&&r.formatParams&&r.formatParams[r.interpolationkey]||{},c=s.locale||s.lng||r.locale||r.lng||n;l=o.formats[a](e,c,Fn(Fn(Fn({},i),r),s))}catch(e){o.logger.warn(e)}return l}return o.logger.warn("there was no format function for ".concat(a)),e}),e)}}]),e}();function Dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function On(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dn(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pn=function(e){Rt(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=Tt(t);if(n){var o=Tt(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return zt(this,e)});function o(e,t,n){var u,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return(0,Pt.Z)(this,o),u=r.call(this),on&&Zt.call(_t(u)),u.backend=e,u.store=t,u.services=n,u.languageUtils=n.languageUtils,u.options=a,u.logger=$t.create("backendConnector"),u.state={},u.queue=[],u.backend&&u.backend.init&&u.backend.init(n,a.backend,a),u}return(0,jt.Z)(o,[{key:"queueLoad",value:function(e,t,n,r){var o=this,u=[],a=[],i=[],l=[];return e.forEach((function(e){var r=!0;t.forEach((function(t){var i="".concat(e,"|").concat(t);!n.reload&&o.store.hasResourceBundle(e,t)?o.state[i]=2:o.state[i]<0||(1===o.state[i]?a.indexOf(i)<0&&a.push(i):(o.state[i]=1,r=!1,a.indexOf(i)<0&&a.push(i),u.indexOf(i)<0&&u.push(i),l.indexOf(t)<0&&l.push(t)))})),r||i.push(e)})),(u.length||a.length)&&this.queue.push({pending:a,loaded:{},errors:[],callback:r}),{toLoad:u,pending:a,toLoadLanguages:i,toLoadNamespaces:l}}},{key:"loaded",value:function(e,t,n){var r=e.split("|"),o=r[0],u=r[1];t&&this.emit("failedLoading",o,u,t),n&&this.store.addResourceBundle(o,u,n),this.state[e]=t?-1:2;var a={};this.queue.forEach((function(n){!function(e,t,n,r){var o=Qt(e,t,Object),u=o.obj,a=o.k;u[a]=u[a]||[],u[a].push(n)}(n.loaded,[o],u),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t)}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){a[e]||(a[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){a[e].indexOf(t)<0&&a[e].push(t)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var r=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:350,a=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(i,l){i&&l&&o<5?setTimeout((function(){r.read.call(r,e,t,n,o+1,2*u,a)}),u):a(i,l)})):a(null,{})}},{key:"prepareLoading",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var u=this.queueLoad(e,t,r,o);if(!u.toLoad.length)return u.pending.length||o(),null;u.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=e.split("|"),o=r[0],u=r[1];this.read(o,u,"read",void 0,void 0,(function(r,a){r&&t.logger.warn("".concat(n,"loading namespace ").concat(u," for language ").concat(o," failed"),r),!r&&a&&t.logger.log("".concat(n,"loaded namespace ").concat(u," for language ").concat(o),a),t.loaded(e,r,a)}))}},{key:"saveMissing",value:function(e,t,n,r,o){var u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(e,t,n,r,null,On(On({},u),{},{isUpdate:o})),e&&e[0]&&this.store.addResource(e[0],t,n,r))}}]),o}(Zt);function jn(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function _n(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Nn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_n(Object(n),!0).forEach((function(t){(0,Lt.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_n(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Rn(){}var zn=function(e){Rt(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=Tt(t);if(n){var o=Tt(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return zt(this,e)});function o(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=arguments.length>1?arguments[1]:void 0;if((0,Pt.Z)(this,o),e=r.call(this),on&&Zt.call(_t(e)),e.options=jn(n),e.services={},e.logger=$t,e.modules={external:[]},t=_t(e),Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((function(e){"function"==typeof t[e]&&(t[e]=t[e].bind(t))})),u&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,u),zt(e,_t(e));setTimeout((function(){e.init(n,u)}),0)}return e}return(0,jt.Z)(o,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(n=t,t={}),!t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));var r={debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===(0,Ot.Z)(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===(0,Ot.Z)(e[2])||"object"===(0,Ot.Z)(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}};function o(e){return e?"function"==typeof e?new e:e:null}if(this.options=Nn(Nn(Nn({},r),this.options),jn(t)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=Nn(Nn({},r.interpolation),this.options.interpolation)),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){var u;this.modules.logger?$t.init(o(this.modules.logger),this.options):$t.init(null,this.options),this.modules.formatter?u=this.modules.formatter:"undefined"!=typeof Intl&&(u=Sn);var a=new An(this.options);this.store=new cn(this.options.resources,this.options);var i=this.services;i.logger=$t,i.resourceStore=this.store,i.languageUtils=a,i.pluralResolver=new En(a,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!u||this.options.interpolation.format&&this.options.interpolation.format!==r.interpolation.format||(i.formatter=o(u),i.formatter.init(i,this.options),this.options.interpolation.format=i.formatter.format.bind(i.formatter)),i.interpolator=new xn(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new Pn(o(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r))})),this.modules.languageDetector&&(i.languageDetector=o(this.modules.languageDetector),i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=o(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new gn(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.format=this.options.interpolation.format,n||(n=Rn),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var l=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);l.length>0&&"dev"!==l[0]&&(this.options.lng=l[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined"),["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}})),["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var s=Kt(),c=function(){var t=function(t,r){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn("init: i18next is already initialized. You should call init just once!"),e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),s.resolve(r),n(t,r)};if(e.languages&&"v1"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t)};return this.options.resources||!this.options.initImmediate?c():setTimeout(c,0),s}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Rn,r="string"==typeof e?e:this.language;if("function"==typeof e&&(n=e),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return n();var o=[],u=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){o.indexOf(e)<0&&o.push(e)}))};r?u(r):this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((function(e){return u(e)})),this.options.preload&&this.options.preload.forEach((function(e){return u(e)})),this.services.backendConnector.load(o,this.options.ns,n)}else n(null)}},{key:"reloadResources",value:function(e,t,n){var r=Kt();return e||(e=this.languages),t||(t=this.options.ns),n||(n=Rn),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e)})),r}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&fn.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=Kt();this.emit("languageChanging",e);var o=function(e){if(n.language=e,n.languages=n.services.languageUtils.toResolveHierarchy(e),n.resolvedLanguage=void 0,!(["cimode","dev"].indexOf(e)>-1))for(var t=0;t<n.languages.length;t++){var r=n.languages[t];if(!(["cimode","dev"].indexOf(r)>-1)&&n.store.hasLanguageSomeTranslations(r)){n.resolvedLanguage=r;break}}},u=function(u){e||u||!n.services.languageDetector||(u=[]);var a="string"==typeof u?u:n.services.languageUtils.getBestMatchFromCodes(u);a&&(n.language||o(a),n.translator.language||n.translator.changeLanguage(a),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(a)),n.loadResources(a,(function(e){!function(e,u){u?(o(u),n.translator.changeLanguage(u),n.isLanguageChangingTo=void 0,n.emit("languageChanged",u),n.logger.log("languageChanged",u)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}))}(e,a)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(u):u(e):u(this.services.languageDetector.detect()),r}},{key:"getFixedT",value:function(e,t,n){var r=this,o=function e(t,o){var u;if("object"!==(0,Ot.Z)(o)){for(var a=arguments.length,i=new Array(a>2?a-2:0),l=2;l<a;l++)i[l-2]=arguments[l];u=r.options.overloadTranslationOptionHandler([t,o].concat(i))}else u=Nn({},o);u.lng=u.lng||e.lng,u.lngs=u.lngs||e.lngs,u.ns=u.ns||e.ns;var s=r.options.keySeparator||".",c=n?"".concat(n).concat(s).concat(t):t;return r.t(c,u)};return"string"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o.keyPrefix=n,o}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var r=this.resolvedLanguage||this.languages[0],o=!!this.options&&this.options.fallbackLng,u=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};if(n.precheck){var i=n.precheck(this,a);if(void 0!==i)return i}return!!this.hasResourceBundle(r,e)||!this.services.backendConnector.backend||!(!a(r,e)||o&&!a(u,e))}},{key:"loadNamespaces",value:function(e,t){var n=this,r=Kt();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=Kt();"string"==typeof e&&(e=[e]);var r=this.options.preload||[],o=e.filter((function(e){return r.indexOf(e)<0}));return o.length?(this.options.preload=r.concat(o),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){return e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),e?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr":"rtl"}},{key:"cloneInstance",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Rn,r=Nn(Nn(Nn({},this.options),t),{isClone:!0}),u=new o(r);return["store","services","language"].forEach((function(t){u[t]=e[t]})),u.services=Nn({},this.services),u.services.utils={hasLoadedNamespace:u.hasLoadedNamespace.bind(u)},u.translator=new gn(u.services,u.options),u.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];u.emit.apply(u,[e].concat(n))})),u.init(r,n),u.translator.options=u.options,u.translator.backendConnector.services.utils={hasLoadedNamespace:u.hasLoadedNamespace.bind(u)},u}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),o}(Zt);(0,Lt.Z)(zn,"createInstance",(function(){return new zn(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}));var Tn=zn.createInstance();Tn.createInstance=zn.createInstance,Tn.createInstance,Tn.init,Tn.loadResources,Tn.reloadResources,Tn.use,Tn.changeLanguage,Tn.getFixedT,Tn.t,Tn.exists,Tn.setDefaultNamespace,Tn.hasLoadedNamespace,Tn.loadNamespaces,Tn.loadLanguages;const Ln=Tn;var Mn=l(8718),In=[],Un=In.forEach,qn=In.slice,Hn=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,Wn={name:"cookie",lookup:function(e){var t;if(e.lookupCookie&&"undefined"!=typeof document){var n=function(e){for(var t=e+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var o=n[r];" "===o.charAt(0);)o=o.substring(1,o.length);if(0===o.indexOf(t))return o.substring(t.length,o.length)}return null}(e.lookupCookie);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupCookie&&"undefined"!=typeof document&&function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{path:"/",sameSite:"strict"};n&&(o.expires=new Date,o.expires.setTime(o.expires.getTime()+60*n*1e3)),r&&(o.domain=r),document.cookie=function(e,t,n){var r=n||{};r.path=r.path||"/";var o=e+"="+encodeURIComponent(t);if(r.maxAge>0){var u=r.maxAge-0;if(isNaN(u))throw new Error("maxAge should be a Number");o+="; Max-Age="+Math.floor(u)}if(r.domain){if(!Hn.test(r.domain))throw new TypeError("option domain is invalid");o+="; Domain="+r.domain}if(r.path){if(!Hn.test(r.path))throw new TypeError("option path is invalid");o+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");o+="; Expires="+r.expires.toUTCString()}if(r.httpOnly&&(o+="; HttpOnly"),r.secure&&(o+="; Secure"),r.sameSite)switch("string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite){case!0:o+="; SameSite=Strict";break;case"lax":o+="; SameSite=Lax";break;case"strict":o+="; SameSite=Strict";break;case"none":o+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}return o}(e,encodeURIComponent(t),o)}(t.lookupCookie,e,t.cookieMinutes,t.cookieDomain,t.cookieOptions)}},Vn={name:"querystring",lookup:function(e){var t;if("undefined"!=typeof window)for(var n=window.location.search.substring(1).split("&"),r=0;r<n.length;r++){var o=n[r].indexOf("=");o>0&&n[r].substring(0,o)===e.lookupQuerystring&&(t=n[r].substring(o+1))}return t}},$n=null,Zn=function(){if(null!==$n)return $n;try{$n="undefined"!==window&&null!==window.localStorage;var e="i18next.translate.boo";window.localStorage.setItem(e,"foo"),window.localStorage.removeItem(e)}catch(e){$n=!1}return $n},Kn={name:"localStorage",lookup:function(e){var t;if(e.lookupLocalStorage&&Zn()){var n=window.localStorage.getItem(e.lookupLocalStorage);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupLocalStorage&&Zn()&&window.localStorage.setItem(t.lookupLocalStorage,e)}},Yn=null,Qn=function(){if(null!==Yn)return Yn;try{Yn="undefined"!==window&&null!==window.sessionStorage;var e="i18next.translate.boo";window.sessionStorage.setItem(e,"foo"),window.sessionStorage.removeItem(e)}catch(e){Yn=!1}return Yn},Xn={name:"sessionStorage",lookup:function(e){var t;if(e.lookupSessionStorage&&Qn()){var n=window.sessionStorage.getItem(e.lookupSessionStorage);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupSessionStorage&&Qn()&&window.sessionStorage.setItem(t.lookupSessionStorage,e)}},Jn={name:"navigator",lookup:function(e){var t=[];if("undefined"!=typeof navigator){if(navigator.languages)for(var n=0;n<navigator.languages.length;n++)t.push(navigator.languages[n]);navigator.userLanguage&&t.push(navigator.userLanguage),navigator.language&&t.push(navigator.language)}return t.length>0?t:void 0}},Gn={name:"htmlTag",lookup:function(e){var t,n=e.htmlTag||("undefined"!=typeof document?document.documentElement:null);return n&&"function"==typeof n.getAttribute&&(t=n.getAttribute("lang")),t}},er={name:"path",lookup:function(e){var t;if("undefined"!=typeof window){var n=window.location.pathname.match(/\/([a-zA-Z-]*)/g);if(n instanceof Array)if("number"==typeof e.lookupFromPathIndex){if("string"!=typeof n[e.lookupFromPathIndex])return;t=n[e.lookupFromPathIndex].replace("/","")}else t=n[0].replace("/","")}return t}},tr={name:"subdomain",lookup:function(e){var t;if("undefined"!=typeof window){var n=window.location.href.match(/(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi);n instanceof Array&&(t="number"==typeof e.lookupFromSubdomainIndex?n[e.lookupFromSubdomainIndex].replace("http://","").replace("https://","").replace(".",""):n[0].replace("http://","").replace("https://","").replace(".",""))}return t}},nr=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,Pt.Z)(this,e),this.type="languageDetector",this.detectors={},this.init(t,n)}return(0,jt.Z)(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.services=e,this.options=function(e){return Un.call(qn.call(arguments,1),(function(t){if(t)for(var n in t)void 0===e[n]&&(e[n]=t[n])})),e}(t,this.options||{},{order:["querystring","cookie","localStorage","sessionStorage","navigator","htmlTag"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupLocalStorage:"i18nextLng",lookupSessionStorage:"i18nextLng",caches:["localStorage"],excludeCacheFor:["cimode"]}),this.options.lookupFromUrlIndex&&(this.options.lookupFromPathIndex=this.options.lookupFromUrlIndex),this.i18nOptions=n,this.addDetector(Wn),this.addDetector(Vn),this.addDetector(Kn),this.addDetector(Xn),this.addDetector(Jn),this.addDetector(Gn),this.addDetector(er),this.addDetector(tr)}},{key:"addDetector",value:function(e){this.detectors[e.name]=e}},{key:"detect",value:function(e){var t=this;e||(e=this.options.order);var n=[];return e.forEach((function(e){if(t.detectors[e]){var r=t.detectors[e].lookup(t.options);r&&"string"==typeof r&&(r=[r]),r&&(n=n.concat(r))}})),this.services.languageUtils.getBestMatchFromCodes?n:n.length>0?n[0]:null}},{key:"cacheUserLanguage",value:function(e,t){var n=this;t||(t=this.options.caches),t&&(this.options.excludeCacheFor&&this.options.excludeCacheFor.indexOf(e)>-1||t.forEach((function(t){n.detectors[t]&&n.detectors[t].cacheUserLanguage(e,n.options)})))}}]),e}();function rr(e){return rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rr(e)}nr.type="languageDetector";var or=[],ur=or.forEach,ar=or.slice;function ir(e){return ur.call(ar.call(arguments,1),(function(t){if(t)for(var n in t)void 0===e[n]&&(e[n]=t[n])})),e}function lr(){return"function"==typeof XMLHttpRequest||"object"===("undefined"==typeof XMLHttpRequest?"undefined":rr(XMLHttpRequest))}var sr,cr,fr,dr=l(3154),pr=l.t(dr,2);function hr(e){return hr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hr(e)}"function"==typeof fetch&&("undefined"!=typeof global&&global.fetch?sr=global.fetch:"undefined"!=typeof window&&window.fetch&&(sr=window.fetch)),lr&&("undefined"!=typeof global&&global.XMLHttpRequest?cr=global.XMLHttpRequest:"undefined"!=typeof window&&window.XMLHttpRequest&&(cr=window.XMLHttpRequest)),"function"==typeof ActiveXObject&&("undefined"!=typeof global&&global.ActiveXObject?fr=global.ActiveXObject:"undefined"!=typeof window&&window.ActiveXObject&&(fr=window.ActiveXObject)),sr||!pr||cr||fr||(sr=dr||pr),"function"!=typeof sr&&(sr=void 0);var gr=function(e,t){if(t&&"object"===hr(t)){var n="";for(var r in t)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(t[r]);if(!n)return e;e=e+(-1!==e.indexOf("?")?"&":"?")+n.slice(1)}return e};const mr=function(e,t,n,r){return"function"==typeof n&&(r=n,n=void 0),r=r||function(){},sr?function(e,t,n,r){e.queryStringParams&&(t=gr(t,e.queryStringParams));var o=ir({},"function"==typeof e.customHeaders?e.customHeaders():e.customHeaders);n&&(o["Content-Type"]="application/json"),sr(t,ir({method:n?"POST":"GET",body:n?e.stringify(n):void 0,headers:o},"function"==typeof e.requestOptions?e.requestOptions(n):e.requestOptions)).then((function(e){if(!e.ok)return r(e.statusText||"Error",{status:e.status});e.text().then((function(t){r(null,{status:e.status,data:t})})).catch(r)})).catch(r)}(e,t,n,r):lr||"function"==typeof ActiveXObject?function(e,t,n,r){n&&"object"===hr(n)&&(n=gr("",n).slice(1)),e.queryStringParams&&(t=gr(t,e.queryStringParams));try{var o;(o=cr?new cr:new fr("MSXML2.XMLHTTP.3.0")).open(n?"POST":"GET",t,1),e.crossDomain||o.setRequestHeader("X-Requested-With","XMLHttpRequest"),o.withCredentials=!!e.withCredentials,n&&o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),o.overrideMimeType&&o.overrideMimeType("application/json");var u=e.customHeaders;if(u="function"==typeof u?u():u)for(var a in u)o.setRequestHeader(a,u[a]);o.onreadystatechange=function(){o.readyState>3&&r(o.status>=400?o.statusText:null,{status:o.status,data:o.responseText})},o.send(n)}catch(e){console&&console.log(e)}}(e,t,n,r):void 0};function Ar(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var yr=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.services=t,this.options=n,this.allOptions=r,this.type="backend",this.init(t,n,r)}var t,n;return t=e,n=[{key:"init",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.services=e,this.options=ir(n,this.options||{},{loadPath:"/locales/{{lng}}/{{ns}}.json",addPath:"/locales/add/{{lng}}/{{ns}}",allowMultiLoading:!1,parse:function(e){return JSON.parse(e)},stringify:JSON.stringify,parsePayload:function(e,t,n){return function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n||"")},request:mr,reloadInterval:"undefined"==typeof window&&36e5,customHeaders:{},queryStringParams:{},crossDomain:!1,withCredentials:!1,overrideMimeType:!1,requestOptions:{mode:"cors",credentials:"same-origin",cache:"default"}}),this.allOptions=r,this.services&&this.options.reloadInterval&&setInterval((function(){return t.reload()}),this.options.reloadInterval)}},{key:"readMulti",value:function(e,t,n){this._readAny(e,e,t,t,n)}},{key:"read",value:function(e,t,n){this._readAny([e],e,[t],t,n)}},{key:"_readAny",value:function(e,t,n,r,o){var u,a=this,i=this.options.loadPath;"function"==typeof this.options.loadPath&&(i=this.options.loadPath(e,n)),(i=function(e){return!!e&&"function"==typeof e.then}(u=i)?u:Promise.resolve(u)).then((function(u){var i=a.services.interpolator.interpolate(u,{lng:e.join("+"),ns:n.join("+")});a.loadUrl(i,o,t,r)}))}},{key:"loadUrl",value:function(e,t,n,r){var o=this;this.options.request(this.options,e,void 0,(function(u,a){if(a&&(a.status>=500&&a.status<600||!a.status))return t("failed loading "+e+"; status code: "+a.status,!0);if(a&&a.status>=400&&a.status<500)return t("failed loading "+e+"; status code: "+a.status,!1);if(!a&&u&&u.message&&u.message.indexOf("Failed to fetch")>-1)return t("failed loading "+e+": "+u.message,!0);if(u)return t(u,!1);var i,l;try{i="string"==typeof a.data?o.options.parse(a.data,n,r):a.data}catch(t){l="failed parsing "+e+" to json"}if(l)return t(l,!1);t(null,i)}))}},{key:"create",value:function(e,t,n,r,o){var u=this;if(this.options.addPath){"string"==typeof e&&(e=[e]);var a=this.options.parsePayload(t,n,r),i=0,l=[],s=[];e.forEach((function(n){var r=u.options.addPath;"function"==typeof u.options.addPath&&(r=u.options.addPath(n,t));var c=u.services.interpolator.interpolate(r,{lng:n,ns:t});u.options.request(u.options,c,a,(function(t,n){i+=1,l.push(t),s.push(n),i===e.length&&o&&o(l,s)}))}))}}},{key:"reload",value:function(){var e=this,t=this.services,n=t.backendConnector,r=t.languageUtils,o=t.logger,u=n.language;if(!u||"cimode"!==u.toLowerCase()){var a=[],i=function(e){r.toResolveHierarchy(e).forEach((function(e){a.indexOf(e)<0&&a.push(e)}))};i(u),this.allOptions.preload&&this.allOptions.preload.forEach((function(e){return i(e)})),a.forEach((function(t){e.allOptions.ns.forEach((function(e){n.read(t,e,"read",null,null,(function(r,u){r&&o.warn("loading namespace ".concat(e," for language ").concat(t," failed"),r),!r&&u&&o.log("loaded namespace ".concat(e," for language ").concat(t),u),n.loaded("".concat(t,"|").concat(e),r,u)}))}))}))}}}],n&&Ar(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();yr.type="backend";const vr=yr;Ln.use(vr).use(nr).use(Mn.Db).init({fallbackLng:"ru",debug:!1,interpolation:{escapeValue:!1}});(0,ct.s)(document.getElementById("root")).render((0,e.jsx)(gt,{children:(0,e.jsx)((function(e){let{basename:n,children:r,window:o}=e,u=(0,t.useRef)();null==u.current&&(u.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,r=n.history;function o(){var e=n.location,t=e.pathname,o=e.search,u=e.hash,a=r.state||{};return[a.idx,{pathname:t,search:o,hash:u,state:a.usr||null,key:a.key||"default"}]}var u=null;n.addEventListener("popstate",(function(){if(u)f.call(u),u=null;else{var e=A.Pop,t=o(),n=t[0],r=t[1];if(f.length){if(null!=n){var a=l-n;a&&(u={action:e,location:r,retry:function(){y(-1*a)}},y(a))}}else m(e)}}));var a=A.Pop,i=o(),l=i[0],s=i[1],c=x(),f=x();function d(e){return"string"==typeof e?e:k(e)}function p(e,t){return void 0===t&&(t=null),E({pathname:s.pathname,hash:"",search:""},"string"==typeof e?F(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function h(e,t){return[{usr:e.state,key:e.key,idx:t},d(e)]}function g(e,t,n){return!f.length||(f.call({action:e,location:t,retry:n}),!1)}function m(e){a=e;var t=o();l=t[0],s=t[1],c.call({action:a,location:s})}function y(e){r.go(e)}null==l&&(l=0,r.replaceState(E({},r.state,{idx:l}),""));var v={get action(){return a},get location(){return s},createHref:d,push:function e(t,o){var u=A.Push,a=p(t,o);if(g(u,a,(function(){e(t,o)}))){var i=h(a,l+1),s=i[0],c=i[1];try{r.pushState(s,"",c)}catch(e){n.location.assign(c)}m(u)}},replace:function e(t,n){var o=A.Replace,u=p(t,n);if(g(o,u,(function(){e(t,n)}))){var a=h(u,l),i=a[0],s=a[1];r.replaceState(i,"",s),m(o)}},go:y,back:function(){y(-1)},forward:function(){y(1)},listen:function(e){return c.push(e)},block:function(e){var t=f.push(e);return 1===f.length&&n.addEventListener(w,B),function(){t(),f.length||n.removeEventListener(w,B)}}};return v}({window:o}));let a=u.current,[i,l]=(0,t.useState)({action:a.action,location:a.location});return(0,t.useLayoutEffect)((()=>a.listen(l)),[a]),(0,t.createElement)(N,{basename:n,children:r,location:i.location,navigationType:i.action,navigator:a})}),{children:(0,e.jsx)((function(t){var n=t.children,r=t.initialState,o=L(),u=(0,C.E)(o,r);return(0,e.jsx)(v.zt,{store:u,children:n})}),{children:(0,e.jsx)((function(o){var u=o.children,a=(0,t.useState)(!1),i=a[0],l=a[1],s=(0,t.useState)(localStorage.getItem(r)||"light"),c=s[0],f=s[1],d=(0,t.useCallback)((function(){localStorage.setItem(r,"light"===c?"dark":"light"),l("light"!==c),f("light"===c?"dark":"light")}),[c]),p=(0,t.useMemo)((function(){return{theme:c,isDark:i,toggleTheme:d}}),[c,i,d]);return(0,e.jsx)(n.Provider,{value:p,children:(0,e.jsx)(e.Fragment,{children:u})})}),{children:(0,e.jsx)(p.DY,{children:(0,e.jsx)((function(n){var r=n.children,o=(0,t.useState)(!1),u=o[0],a=o[1],i=(0,t.useMemo)((function(){return u}),[u]);return(0,e.jsx)(le.Provider,{value:{isSidebarOpen:i,openSidebarHandler:function(){a((function(e){return!e}))}},children:(0,e.jsx)(e.Fragment,{children:r})})}),{children:(0,e.jsx)(st,{})})})})})})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsRUFBRyxFQUFHLEdBQ2RwNkQsR0FBSSxHQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxHQUNScDZELEdBQUksR0FDSCxDQUNEODFELEtBQU0sQ0FBQyxNQUNQc0UsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFDakJwNkQsR0FBSSxJQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsSUFDZHA2RCxHQUFJLElBQ0gsQ0FDRDgxRCxLQUFNLENBQUMsTUFDUHNFLEdBQUksQ0FBQyxFQUFHLEdBQ1JwNkQsR0FBSSxJQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxHQUNScDZELEdBQUksSUFDSCxDQUNEODFELEtBQU0sQ0FBQyxNQUNQc0UsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ2RwNkQsR0FBSSxJQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxFQUFHLElBQ1hwNkQsR0FBSSxJQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxFQUFHLEdBQ1hwNkQsR0FBSSxJQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxHQUNScDZELEdBQUksSUFDSCxDQUNEODFELEtBQU0sQ0FBQyxPQUNQc0UsR0FBSSxDQUFDLEVBQUcsRUFBRyxHQUNYcDZELEdBQUksSUFDSCxDQUNEODFELEtBQU0sQ0FBQyxNQUNQc0UsR0FBSSxDQUFDLEVBQUcsRUFBRyxHQUFJLElBQ2ZwNkQsR0FBSSxJQUNILENBQ0Q4MUQsS0FBTSxDQUFDLE1BQ1BzRSxHQUFJLENBQUMsRUFBRyxHQUNScDZELEdBQUksR0FDSCxDQUNEODFELEtBQU0sQ0FBQyxNQUNQc0UsR0FBSSxDQUFDLEVBQUcsRUFBRyxJQUNYcDZELEdBQUksSUFDSCxDQUNEODFELEtBQU0sQ0FBQyxNQUNQc0UsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFH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QUFBLEdBS3JDdzFGLEdBQWdCeG1DLEVBQUFBLEVBQUFBLFVBQVEsV0FDNUIsT0FBTzJvRCxDQUNULEdBQUcsQ0FBQ0EsSUFDSixPQUNFNzJHLEVBQUFBLEVBQUFBLEtBQUN5ekYsR0FBZXh6RixTQUFRLENBQUNOLE1BQU8sQ0FBRSswRixjQUFhQSxFQUFFQyxtQkFQeEIsV0FDekJtaUIsR0FBaUIsU0FBQWwzRyxHQUFRLE9BQUNBLENBQUQsR0FDM0IsR0FLdUVYLFVBQ25FZSxFQUFBQSxFQUFBQSxLQUFBRSxFQUFBQSxTQUFBLENBQUFqQixTQUFHQSxLQUdULEc4Q2Q0QixDQUFBQSxVQUNkZSxFQUFBQSxFQUFBQSxLQUFDKzJHLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vcGV0XzEvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL3BldF8xLy4vc3JjL2FwcC9wcm92aWRlcnMvTW9kYWxQcm92aWRlci91aS9Nb2RhbFByb3ZpZGVyLnRzeCIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9hcHAvcHJvdmlkZXJzL01vZGFsUHJvdmlkZXIvaG9va3MvdXNlTW9kYWwudHN4Iiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvQmxvYi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21wb3NlU2lnbmFscy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9zaGFyZWQvYXBpL2F4aW9zQXBpSW5zdGFuY2UudHMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvYXBwL3Byb3ZpZGVycy9TdG9yZVByb3ZpZGVyL2NvbmZpZy9zdG9yZS50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvYXBwL3Byb3ZpZGVycy9TdG9yZVByb3ZpZGVyL2NvbmZpZy9SZWR1Y2VyTWFuYWdlci50cyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9lbnRpdGllcy9Vc2VyL21vZGVsL3NlbGVjdG9ycy9nZXRVc2VySWQvZ2V0VXNlcklkLnRzIiwid2VicGFjazovL3BldF8xLy4vc3JjL2VudGl0aWVzL1VzZXIvbW9kZWwvc2VsZWN0b3JzL2dldFVzZXJBdXRob3JpemVkL2dldFVzZXJBdXRob3JpemVkLnRzIiwid2VicGFjazovL3BldF8xLy4vc3JjL2VudGl0aWVzL1VzZXIvbW9kZWwvc2xpY2UvVXNlclNsaWNlLnRzIiwid2VicGFjazovL3BldF8xLy4vc3JjL2ZlYXR1cmVzL0F1dGhCeVVzZXJuYW1lL3VpL0xvZ2luRm9ybS91aS9Mb2dpbkZvcm0uYXN5bmMudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL2ZlYXR1cmVzL0F1dGhCeVVzZXJuYW1lL21vZGVsL3NlcnZpY2VzL2xvZ2luQnlVc2VyTmFtZS9sb2dpbkJ5VXNlcm5hbWUudHMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvZmVhdHVyZXMvQXV0aEJ5VXNlcm5hbWUvbW9kZWwvc2xpY2UvbG9naW5Gb3JtU2xpY2UudHMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL2NvbnN0YW50cy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXMudHMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL3VpL0J1dHRvbi91aS9CdXR0b24ubW9kdWxlLnNjc3M/MmQ3ZSIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9zaGFyZWQvdWkvQnV0dG9uL3VpL0J1dHRvbi50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL3VpL0xvYWRlci91aS9Mb2FkZXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3NoYXJlZC91aS9Mb2FkZXIvdWkvTG9hZGVyLm1vZHVsZS5zY3NzP2IyMDciLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL3VpL1RleHQvdWkvVGV4dC5tb2R1bGUuc2Nzcz80NDQ4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3NoYXJlZC91aS9UZXh0L3VpL1RleHQudHN4Iiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2NhbWVsLWNhc2UvY2FtZWwtY2FzZS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9jYW1lbC1jYXNlL25vZGVfbW9kdWxlcy9sb3dlci1jYXNlL2xvd2VyLWNhc2UuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvY2FtZWwtY2FzZS9ub2RlX21vZHVsZXMvbm8tY2FzZS9uby1jYXNlLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2NhbWVsLWNhc2Uvbm9kZV9tb2R1bGVzL25vLWNhc2UvdmVuZG9yL2NhbWVsLWNhc2UtcmVnZXhwLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2NhbWVsLWNhc2Uvbm9kZV9tb2R1bGVzL25vLWNhc2UvdmVuZG9yL2NhbWVsLWNhc2UtdXBwZXItcmVnZXhwLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2NhbWVsLWNhc2Uvbm9kZV9tb2R1bGVzL25vLWNhc2UvdmVuZG9yL25vbi13b3JkLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L2Jyb3dzZXItcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtaTE4bmV4dC9kaXN0L2VzL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtaTE4bmV4dC9kaXN0L2VzL3V0aWxzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWkxOG5leHQvZGlzdC9lcy91c2VUcmFuc2xhdGlvbi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zLWtpdC9JY29uLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zLWtpdC9TdmdJY29uLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zLWtpdC9ob3Jpem9udGFsQ2VudGVyLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zLWtpdC9pY29tb29uL2J1YmJsZXMyLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zLWtpdC9pY29tb29uL2NpcmNsZUxlZnQuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtaWNvbnMta2l0L2ljb21vb24vY2lyY2xlUmlnaHQuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtaWNvbnMta2l0L2ljb21vb24vaG9tZS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pY29ucy1raXQvaWNvbW9vbi9pbmZvLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWljb25zLWtpdC9pY29tb29uL3VzZXIuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QtaWNvbnMta2l0L2ljb21vb24vd2FybmluZy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pY29ucy1raXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3VwcGVyLWNhc2UvdXBwZXItY2FzZS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS93aXRoLXNlbGVjdG9yLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL2VzbS9nZXRGZXRjaC5janMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5tanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZGlzdC9yZXNlbGVjdC5tanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZGlzdC9yZWR1eC10aHVuay5tanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQubW9kZXJuLm1qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9kaXN0L3JlYWN0LXJlZHV4Lm1qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWR1eC9kaXN0L3JlZHV4Lm1qcyIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcGV0XzEvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vcGV0XzEvd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3BldF8xL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcGV0XzEvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9wZXRfMS93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9hcHAvcHJvdmlkZXJzL1RoZW1lUHJvdmlkZXIvdWkvVGhlbWVDb250ZXh0LnRzeCIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9hcHAvcHJvdmlkZXJzL1RoZW1lUHJvdmlkZXIvaG9va3MvdXNlVGhlbWUudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3NoYXJlZC91aS9GbGV4Q29udGFpbmVyL3VpL0ZsZXhDb250YWluZXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3NoYXJlZC91aS9GbGV4Q29udGFpbmVyL3VpL0ZsZXhDb250YWluZXIubW9kdWxlLnNjc3M/Yjc1OSIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy93aWRnZXRzL0NvbnRlbnQvdWkvQ29udGVudC50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9Db250ZW50L3VpL0NvbnRlbnQubW9kdWxlLnNjc3M/ZTE2NyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9zaGFyZWQvdWkvUG9ydGFsL3VpL1BvcnRhbC50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9Nb2RhbC91aS9Nb2RhbC50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9Nb2RhbC91aS9Nb2RhbC5tb2R1bGUuc2Nzcz9iMDM3Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3dpZGdldHMvTW9kYWwvVG9nZ2xlTW9kYWxCdXR0b24vdWkvVG9nZ2xlTW9kYWxCdXR0b24udHN4Iiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9IZWFkZXIvdWkvSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy93aWRnZXRzL0hlYWRlci91aS9IZWFkZXIubW9kdWxlLnNjc3M/MGNiMSIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9hcHAvcHJvdmlkZXJzL1NpZGViYXJQcm92aWRlci91aS9TaWRlYmFyUHJvdmlkZXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL2FwcC9wcm92aWRlcnMvU2lkZWJhclByb3ZpZGVyL2hvb2tzL3VzZVNpZGViYXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3dpZGdldHMvTGFuZ1N3aXRjaGVyL3VpL0xhbmdTd2l0Y2hlci50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9MYW5nU3dpdGNoZXIvdWkvTGFuZ1N3aXRjaGVyLm1vZHVsZS5zY3NzP2JjNjIiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL2Fzc2V0cy9pY29ucy90aGVtZS1kYXJrLnN2ZyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9zaGFyZWQvYXNzZXRzL2ljb25zL3RoZW1lLWxpZ2h0LnN2ZyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy93aWRnZXRzL1RoZW1lU3dpdGNoZXIvdWkvVGhlbWVTd2l0Y2hlci50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9UaGVtZVN3aXRjaGVyL3VpL1RoZW1lU3dpdGNoZXIubW9kdWxlLnNjc3M/YjA1YyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy93aWRnZXRzL1NpZGViYXIvdWkvU2lkZWJhclN3aXRjaGVyL3VpL1NpZGViYXJTd2l0Y2hlci50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9TaWRlYmFyL3VpL1NpZGViYXJTd2l0Y2hlci91aS9TaWRlYmFyU3dpdGNoZXIubW9kdWxlLnNjc3M/NTA1MyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9wYWdlcy9BYm91dFBhZ2UvdWkvQWJvdXRQYWdlLmFzeW5jLnRzeCIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9wYWdlcy9NYWluUGFnZS91aS9NYWluUGFnZS5hc3luYy50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvcGFnZXMvTWVzc2FnZXNQYWdlL3VpL01lc3NhZ2VzUGFnZS5hc3luYy50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvcGFnZXMvTm90Rm91bmRQYWdlL3VpL05vdEZvdW5kUGFnZS5hc3luYy50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvcGFnZXMvUHJvZmlsZVBhZ2UvdWkvUHJvZmlsZVBhZ2UuYXN5bmMudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL2FwcC9wcm92aWRlcnMvUm91dGVyUHJvdmlkZXIvY29uZmlnL1JvdXRlckNvbmZpZy50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9QYWdlTG9hZGVyL3VpL1BhZ2VMb2FkZXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3dpZGdldHMvUGFnZUxvYWRlci91aS9QYWdlTG9hZGVyLm1vZHVsZS5zY3NzP2ZjMGQiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvYXBwL3Byb3ZpZGVycy9Sb3V0ZXJQcm92aWRlci91aS9BcHBSb3V0ZXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL3VpL0N1c3RvbUxpbmsvdWkvQ3VzdG9tTGluay5tb2R1bGUuc2Nzcz9hODFhIiwid2VicGFjazovL3BldF8xLy4vc3JjL3NoYXJlZC91aS9DdXN0b21MaW5rL3VpL0N1c3RvbUxpbmsudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3dpZGdldHMvTmF2YmFyL3VpL05hdmJhci50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9OYXZiYXIvdWkvTmF2YmFyLm1vZHVsZS5zY3NzPzViNWYiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9TaWRlYmFyL3VpL1NpZGViYXIudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3dpZGdldHMvU2lkZWJhci91aS9TaWRlYmFyLm1vZHVsZS5zY3NzPzcxYTQiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvc2hhcmVkL3VpL01vZGFscy91aS9Nb2RhbHMudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL2FwcC9BcHAudHN4Iiwid2VicGFjazovL3BldF8xLy4vc3JjL3NoYXJlZC9oZWxwZXJzL2Z1bmN0aW9ucy9hZGRUaGVtZUNsYXNzT25Cb2R5L2luZGV4LnRzIiwid2VicGFjazovL3BldF8xLy4vc3JjL3dpZGdldHMvUGFnZUVycm9yL3VpL1BhZ2VFcnJvci50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvd2lkZ2V0cy9QYWdlRXJyb3IvdWkvUGFnZUVycm9yLm1vZHVsZS5zY3NzP2E0NGMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvYXBwL3Byb3ZpZGVycy9FcnJvckJvdW5kYXJ5L3VpL0Vycm9yQm91bmRhcnkudHN4Iiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2xlYWZsZXQvZGlzdC9sZWFmbGV0LmNzcz83YWY4Iiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lc20vaTE4bmV4dC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWJyb3dzZXItbGFuZ3VhZ2VkZXRlY3Rvci9kaXN0L2VzbS9pMThuZXh0QnJvd3Nlckxhbmd1YWdlRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcGV0XzEvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1odHRwLWJhY2tlbmQvZXNtL3V0aWxzLmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL2VzbS9yZXF1ZXN0LmpzIiwid2VicGFjazovL3BldF8xLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9zaGFyZWQvY29uZmlnL2kxOG4vaTE4bi50cyIsIndlYnBhY2s6Ly9wZXRfMS8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vcGV0XzEvLi9zcmMvYXBwL3Byb3ZpZGVycy9TdG9yZVByb3ZpZGVyL3VpL1N0b3JlUHJvdmlkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcInBldF8xOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwidmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0dmFyIG9uTGlua0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzLlxuXHRcdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gbnVsbDtcblx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnKSB7XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLmNvZGUgPSBcIkNTU19DSFVOS19MT0FEX0ZBSUxFRFwiO1xuXHRcdFx0ZXJyLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRlcnIucmVxdWVzdCA9IHJlYWxIcmVmO1xuXHRcdFx0bGlua1RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtUYWcpXG5cdFx0XHRyZWplY3QoZXJyKTtcblx0XHR9XG5cdH1cblx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBvbkxpbmtDb21wbGV0ZTtcblx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cblx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcblx0cmV0dXJuIGxpbmtUYWc7XG59O1xudmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG5cdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiB0YWc7XG5cdH1cblx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG5cdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gdGFnO1xuXHR9XG59O1xudmFyIGxvYWRTdHlsZXNoZWV0ID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG5cdFx0Y3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0fSk7XG59XG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIENTUyBjaHVua3NcbnZhciBpbnN0YWxsZWRDc3NDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLm1pbmlDc3MgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0dmFyIGNzc0NodW5rcyA9IHtcIjExN1wiOjEsXCI1MzdcIjoxLFwiNjY5XCI6MSxcIjc0NFwiOjF9O1xuXHRpZihpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0pIHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKTtcblx0ZWxzZSBpZihpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gIT09IDAgJiYgY3NzQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSBsb2FkU3R5bGVzaGVldChjaHVua0lkKS50aGVuKCgpID0+IHtcblx0XHRcdGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0fSwgKGUpID0+IHtcblx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH0pKTtcblx0fVxufTtcblxuLy8gbm8gaG1yIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgRkMsIHVzZVN0YXRlLCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNb2RhbENvbnRleHRQcm9wcyB7XHJcbiAgaXNNb2RhbE9wZW4/OiBib29sZWFuO1xyXG4gIHRvZ2dsZU1vZGFsSGFuZGxlcj86ICh2YWx1ZT86IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgbW9kYWxJZD86IHN0cmluZztcclxuICBzZXRJZD86IChpZDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIGNsb3NlTW9kYWw/OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTW9kYWxDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxNb2RhbENvbnRleHRQcm9wcz4oe30pO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1vZGFsUHJvdmlkZXI6IEZDPFByb3BzV2l0aENoaWxkcmVuPE1vZGFsQ29udGV4dFByb3BzPj4gPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG59KSA9PiB7XHJcbiAgY29uc3QgW2lzTW9kYWxPcGVuLCBzZXRJc01vZGFsT3Blbl0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgW21vZGFsSWQsIHNldE1vZGFsSWRdID0gdXNlU3RhdGU8c3RyaW5nPihcIlwiKTtcclxuXHJcbiAgY29uc3Qgc2V0SWQgPSAoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgc2V0TW9kYWxJZChpZCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlTW9kYWxIYW5kbGVyID0gKHZhbHVlPzogYm9vbGVhbikgPT4ge1xyXG4gICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBzZXRJc01vZGFsT3Blbih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2V0SXNNb2RhbE9wZW4ocHJldiA9PiAhcHJldik7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY2xvc2VNb2RhbCA9ICgpID0+IHtcclxuICAgIHJldHVybiBzZXRJc01vZGFsT3BlbihmYWxzZSk7XHJcbiAgfTtcclxuICBjb25zdCBtZW1vaXplZFZhbHVlID0ge1xyXG4gICAgdG9nZ2xlTW9kYWxIYW5kbGVyLFxyXG4gICAgaXNNb2RhbE9wZW4sXHJcbiAgICBzZXRJZCxcclxuICAgIG1vZGFsSWQsXHJcbiAgICBjbG9zZU1vZGFsLFxyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TW9kYWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttZW1vaXplZFZhbHVlfT5cclxuICAgICAgPD57Y2hpbGRyZW59PC8+XHJcbiAgICA8L01vZGFsQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE1vZGFsQ29udGV4dCB9IGZyb20gXCIuLi91aS9Nb2RhbFByb3ZpZGVyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlTW9kYWwgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIHVzZUNvbnRleHQoTW9kYWxDb250ZXh0KTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbi8vIG9yaWdpbmFsIGNvZGVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EaWdpdGFsQnJhaW5KUy9BeGlvc1Byb21pc2UvYmxvYi8xNmRlYWIxMzcxMGVjMDk3Nzk5MjIxMzFmM2ZhNTk1NDMyMGY4M2FiL2xpYi91dGlscy5qcyNMMTEtTDM0XG5cbmNvbnN0IF9zZXRJbW1lZGlhdGUgPSAoKHNldEltbWVkaWF0ZVN1cHBvcnRlZCwgcG9zdE1lc3NhZ2VTdXBwb3J0ZWQpID0+IHtcbiAgaWYgKHNldEltbWVkaWF0ZVN1cHBvcnRlZCkge1xuICAgIHJldHVybiBzZXRJbW1lZGlhdGU7XG4gIH1cblxuICByZXR1cm4gcG9zdE1lc3NhZ2VTdXBwb3J0ZWQgPyAoKHRva2VuLCBjYWxsYmFja3MpID0+IHtcbiAgICBfZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsICh7c291cmNlLCBkYXRhfSkgPT4ge1xuICAgICAgaWYgKHNvdXJjZSA9PT0gX2dsb2JhbCAmJiBkYXRhID09PSB0b2tlbikge1xuICAgICAgICBjYWxsYmFja3MubGVuZ3RoICYmIGNhbGxiYWNrcy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIChjYikgPT4ge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgICAgX2dsb2JhbC5wb3N0TWVzc2FnZSh0b2tlbiwgXCIqXCIpO1xuICAgIH1cbiAgfSkoYGF4aW9zQCR7TWF0aC5yYW5kb20oKX1gLCBbXSkgOiAoY2IpID0+IHNldFRpbWVvdXQoY2IpO1xufSkoXG4gIHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsXG4gIGlzRnVuY3Rpb24oX2dsb2JhbC5wb3N0TWVzc2FnZSlcbik7XG5cbmNvbnN0IGFzYXAgPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgIT09ICd1bmRlZmluZWQnID9cbiAgcXVldWVNaWNyb3Rhc2suYmluZChfZ2xvYmFsKSA6ICggdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MubmV4dFRpY2sgfHwgX3NldEltbWVkaWF0ZSk7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1JlYWRhYmxlU3RyZWFtLFxuICBpc1JlcXVlc3QsXG4gIGlzUmVzcG9uc2UsXG4gIGlzSGVhZGVycyxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZSxcbiAgc2V0SW1tZWRpYXRlOiBfc2V0SW1tZWRpYXRlLFxuICBhc2FwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIGlmIChyZXNwb25zZSkge1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cyA/IHJlc3BvbnNlLnN0YXR1cyA6IG51bGw7XG4gIH1cbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXNcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogbnVsbFxuIiwiY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmNvbnN0IF9uYXZpZ2F0b3IgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3IgfHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gaGFzQnJvd3NlckVudiAmJlxuICAoIV9uYXZpZ2F0b3IgfHwgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKF9uYXZpZ2F0b3IucHJvZHVjdCkgPCAwKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuY29uc3Qgb3JpZ2luID0gaGFzQnJvd3NlckVudiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52LFxuICBfbmF2aWdhdG9yIGFzIG5hdmlnYXRvcixcbiAgb3JpZ2luXG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJywgJ2ZldGNoJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHV0aWxzLmlzUmVzcG9uc2UoZGF0YSkgfHwgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0hlYWRlcnMoaGVhZGVyKSkge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaGVhZGVyLmVudHJpZXMoKSkge1xuICAgICAgICBzZXRIZWFkZXIodmFsdWUsIGtleSwgcmV3cml0ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCJpbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSBcIi4vc3BlZWRvbWV0ZXIuanNcIjtcbmltcG9ydCB0aHJvdHRsZSBmcm9tIFwiLi90aHJvdHRsZS5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuXG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgPSAobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0sIGZyZXEgPSAzKSA9PiB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIHRocm90dGxlKGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGUsXG4gICAgICBsZW5ndGhDb21wdXRhYmxlOiB0b3RhbCAhPSBudWxsLFxuICAgICAgW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddOiB0cnVlXG4gICAgfTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn1cblxuZXhwb3J0IGNvbnN0IHByb2dyZXNzRXZlbnREZWNvcmF0b3IgPSAodG90YWwsIHRocm90dGxlZCkgPT4ge1xuICBjb25zdCBsZW5ndGhDb21wdXRhYmxlID0gdG90YWwgIT0gbnVsbDtcblxuICByZXR1cm4gWyhsb2FkZWQpID0+IHRocm90dGxlZFswXSh7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSksIHRocm90dGxlZFsxXV07XG59XG5cbmV4cG9ydCBjb25zdCBhc3luY0RlY29yYXRvciA9IChmbikgPT4gKC4uLmFyZ3MpID0+IHV0aWxzLmFzYXAoKCkgPT4gZm4oLi4uYXJncykpO1xuIiwiLyoqXG4gKiBUaHJvdHRsZSBkZWNvcmF0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCBmcmVxKSB7XG4gIGxldCB0aW1lc3RhbXAgPSAwO1xuICBsZXQgdGhyZXNob2xkID0gMTAwMCAvIGZyZXE7XG4gIGxldCBsYXN0QXJncztcbiAgbGV0IHRpbWVyO1xuXG4gIGNvbnN0IGludm9rZSA9IChhcmdzLCBub3cgPSBEYXRlLm5vdygpKSA9PiB7XG4gICAgdGltZXN0YW1wID0gbm93O1xuICAgIGxhc3RBcmdzID0gbnVsbDtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgfVxuICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9XG5cbiAgY29uc3QgdGhyb3R0bGVkID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHBhc3NlZCA9IG5vdyAtIHRpbWVzdGFtcDtcbiAgICBpZiAoIHBhc3NlZCA+PSB0aHJlc2hvbGQpIHtcbiAgICAgIGludm9rZShhcmdzLCBub3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0QXJncyA9IGFyZ3M7XG4gICAgICBpZiAoIXRpbWVyKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGludm9rZShsYXN0QXJncylcbiAgICAgICAgfSwgdGhyZXNob2xkIC0gcGFzc2VkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBmbHVzaCA9ICgpID0+IGxhc3RBcmdzICYmIGludm9rZShsYXN0QXJncyk7XG5cbiAgcmV0dXJuIFt0aHJvdHRsZWQsIGZsdXNoXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGhyb3R0bGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IHBsYXRmb3JtLm5hdmlnYXRvciAmJiAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KHBsYXRmb3JtLm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhYU1JGVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgcGFyc2VQcm90b2NvbCBmcm9tICcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IHtwcm9ncmVzc0V2ZW50UmVkdWNlcn0gZnJvbSAnLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyc7XG5pbXBvcnQgcmVzb2x2ZUNvbmZpZyBmcm9tIFwiLi4vaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzXCI7XG5cbmNvbnN0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCAmJiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY29uc3QgX2NvbmZpZyA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBfY29uZmlnLmRhdGE7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShfY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCBvblVwbG9hZFByb2dyZXNzLCBvbkRvd25sb2FkUHJvZ3Jlc3N9ID0gX2NvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBsZXQgdXBsb2FkVGhyb3R0bGVkLCBkb3dubG9hZFRocm90dGxlZDtcbiAgICBsZXQgZmx1c2hVcGxvYWQsIGZsdXNoRG93bmxvYWQ7XG5cbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgZmx1c2hVcGxvYWQgJiYgZmx1c2hVcGxvYWQoKTsgLy8gZmx1c2ggZXZlbnRzXG4gICAgICBmbHVzaERvd25sb2FkICYmIGZsdXNoRG93bmxvYWQoKTsgLy8gZmx1c2ggZXZlbnRzXG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcblxuICAgICAgX2NvbmZpZy5zaWduYWwgJiYgX2NvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxdWVzdC5vcGVuKF9jb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIF9jb25maWcudXJsLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gX2NvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBfY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gX2NvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChfY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFfY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBfY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKG9uRG93bmxvYWRQcm9ncmVzcykge1xuICAgICAgKFtkb3dubG9hZFRocm90dGxlZCwgZmx1c2hEb3dubG9hZF0gPSBwcm9ncmVzc0V2ZW50UmVkdWNlcihvbkRvd25sb2FkUHJvZ3Jlc3MsIHRydWUpKTtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBkb3dubG9hZFRocm90dGxlZCk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAob25VcGxvYWRQcm9ncmVzcyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgKFt1cGxvYWRUaHJvdHRsZWQsIGZsdXNoVXBsb2FkXSA9IHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uVXBsb2FkUHJvZ3Jlc3MpKTtcblxuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCB1cGxvYWRUaHJvdHRsZWQpO1xuXG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgZmx1c2hVcGxvYWQpO1xuICAgIH1cblxuICAgIGlmIChfY29uZmlnLmNhbmNlbFRva2VuIHx8IF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbiAmJiBfY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChfY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBfY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogX2NvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woX2NvbmZpZy51cmwpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIHBsYXRmb3JtLnByb3RvY29scy5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCJpbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tIFwiLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbmNvbnN0IGNvbXBvc2VTaWduYWxzID0gKHNpZ25hbHMsIHRpbWVvdXQpID0+IHtcbiAgY29uc3Qge2xlbmd0aH0gPSAoc2lnbmFscyA9IHNpZ25hbHMgPyBzaWduYWxzLmZpbHRlcihCb29sZWFuKSA6IFtdKTtcblxuICBpZiAodGltZW91dCB8fCBsZW5ndGgpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgIGxldCBhYm9ydGVkO1xuXG4gICAgY29uc3Qgb25hYm9ydCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmICghYWJvcnRlZCkge1xuICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgY29uc3QgZXJyID0gcmVhc29uIGluc3RhbmNlb2YgRXJyb3IgPyByZWFzb24gOiB0aGlzLnJlYXNvbjtcbiAgICAgICAgY29udHJvbGxlci5hYm9ydChlcnIgaW5zdGFuY2VvZiBBeGlvc0Vycm9yID8gZXJyIDogbmV3IENhbmNlbGVkRXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB0aW1lciA9IHRpbWVvdXQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICBvbmFib3J0KG5ldyBBeGlvc0Vycm9yKGB0aW1lb3V0ICR7dGltZW91dH0gb2YgbXMgZXhjZWVkZWRgLCBBeGlvc0Vycm9yLkVUSU1FRE9VVCkpXG4gICAgfSwgdGltZW91dClcblxuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgaWYgKHNpZ25hbHMpIHtcbiAgICAgICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICBzaWduYWxzLmZvckVhY2goc2lnbmFsID0+IHtcbiAgICAgICAgICBzaWduYWwudW5zdWJzY3JpYmUgPyBzaWduYWwudW5zdWJzY3JpYmUob25hYm9ydCkgOiBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNpZ25hbHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNpZ25hbHMuZm9yRWFjaCgoc2lnbmFsKSA9PiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSk7XG5cbiAgICBjb25zdCB7c2lnbmFsfSA9IGNvbnRyb2xsZXI7XG5cbiAgICBzaWduYWwudW5zdWJzY3JpYmUgPSAoKSA9PiB1dGlscy5hc2FwKHVuc3Vic2NyaWJlKTtcblxuICAgIHJldHVybiBzaWduYWw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZVNpZ25hbHM7XG4iLCJcbmV4cG9ydCBjb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHJlYWRTdHJlYW0oaXRlcmFibGUpKSB7XG4gICAgeWllbGQqIHN0cmVhbUNodW5rKGNodW5rLCBjaHVua1NpemUpO1xuICB9XG59XG5cbmNvbnN0IHJlYWRTdHJlYW0gPSBhc3luYyBmdW5jdGlvbiogKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkge1xuICAgIHlpZWxkKiBzdHJlYW07XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICB0cnkge1xuICAgIGZvciAoOzspIHtcbiAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB5aWVsZCB2YWx1ZTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgcmVhZGVyLmNhbmNlbCgpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFja1N0cmVhbSA9IChzdHJlYW0sIGNodW5rU2l6ZSwgb25Qcm9ncmVzcywgb25GaW5pc2gpID0+IHtcbiAgY29uc3QgaXRlcmF0b3IgPSByZWFkQnl0ZXMoc3RyZWFtLCBjaHVua1NpemUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG4gIGxldCBkb25lO1xuICBsZXQgX29uRmluaXNoID0gKGUpID0+IHtcbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgb25GaW5pc2ggJiYgb25GaW5pc2goZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgYXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgaXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICBfb25GaW5pc2goKTtcbiAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxlbiA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvblByb2dyZXNzKSB7XG4gICAgICAgICAgbGV0IGxvYWRlZEJ5dGVzID0gYnl0ZXMgKz0gbGVuO1xuICAgICAgICAgIG9uUHJvZ3Jlc3MobG9hZGVkQnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShuZXcgVWludDhBcnJheSh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9vbkZpbmlzaChlcnIpO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICBfb25GaW5pc2gocmVhc29uKTtcbiAgICAgIHJldHVybiBpdGVyYXRvci5yZXR1cm4oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBoaWdoV2F0ZXJNYXJrOiAyXG4gIH0pXG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgY29tcG9zZVNpZ25hbHMgZnJvbSBcIi4uL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanNcIjtcbmltcG9ydCB7dHJhY2tTdHJlYW19IGZyb20gXCIuLi9oZWxwZXJzL3RyYWNrU3RyZWFtLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IHtwcm9ncmVzc0V2ZW50UmVkdWNlciwgcHJvZ3Jlc3NFdmVudERlY29yYXRvciwgYXN5bmNEZWNvcmF0b3J9IGZyb20gXCIuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzXCI7XG5pbXBvcnQgcmVzb2x2ZUNvbmZpZyBmcm9tIFwiLi4vaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzXCI7XG5pbXBvcnQgc2V0dGxlIGZyb20gXCIuLi9jb3JlL3NldHRsZS5qc1wiO1xuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCB0ZXN0ID0gKGZuLCAuLi5hcmdzKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZm4oLi4uYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmIHRlc3QoKCkgPT4ge1xuICBsZXQgZHVwbGV4QWNjZXNzZWQgPSBmYWxzZTtcblxuICBjb25zdCBoYXNDb250ZW50VHlwZSA9IG5ldyBSZXF1ZXN0KHBsYXRmb3JtLm9yaWdpbiwge1xuICAgIGJvZHk6IG5ldyBSZWFkYWJsZVN0cmVhbSgpLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGdldCBkdXBsZXgoKSB7XG4gICAgICBkdXBsZXhBY2Nlc3NlZCA9IHRydWU7XG4gICAgICByZXR1cm4gJ2hhbGYnO1xuICAgIH0sXG4gIH0pLmhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKTtcblxuICByZXR1cm4gZHVwbGV4QWNjZXNzZWQgJiYgIWhhc0NvbnRlbnRUeXBlO1xufSk7XG5cbmNvbnN0IERFRkFVTFRfQ0hVTktfU0laRSA9IDY0ICogMTAyNDtcblxuY29uc3Qgc3VwcG9ydHNSZXNwb25zZVN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiZcbiAgdGVzdCgoKSA9PiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSkpO1xuXG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgc3RyZWFtOiBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmICgocmVzKSA9PiByZXMuYm9keSlcbn07XG5cbmlzRmV0Y2hTdXBwb3J0ZWQgJiYgKCgocmVzKSA9PiB7XG4gIFsndGV4dCcsICdhcnJheUJ1ZmZlcicsICdibG9iJywgJ2Zvcm1EYXRhJywgJ3N0cmVhbSddLmZvckVhY2godHlwZSA9PiB7XG4gICAgIXJlc29sdmVyc1t0eXBlXSAmJiAocmVzb2x2ZXJzW3R5cGVdID0gdXRpbHMuaXNGdW5jdGlvbihyZXNbdHlwZV0pID8gKHJlcykgPT4gcmVzW3R5cGVdKCkgOlxuICAgICAgKF8sIGNvbmZpZykgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgUmVzcG9uc2UgdHlwZSAnJHt0eXBlfScgaXMgbm90IHN1cHBvcnRlZGAsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JULCBjb25maWcpO1xuICAgICAgfSlcbiAgfSk7XG59KShuZXcgUmVzcG9uc2UpKTtcblxuY29uc3QgZ2V0Qm9keUxlbmd0aCA9IGFzeW5jIChib2R5KSA9PiB7XG4gIGlmIChib2R5ID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQmxvYihib2R5KSkge1xuICAgIHJldHVybiBib2R5LnNpemU7XG4gIH1cblxuICBpZih1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGJvZHkpKSB7XG4gICAgY29uc3QgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keSxcbiAgICB9KTtcbiAgICByZXR1cm4gKGF3YWl0IF9yZXF1ZXN0LmFycmF5QnVmZmVyKCkpLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc0FycmF5QnVmZmVyVmlldyhib2R5KSB8fCB1dGlscy5pc0FycmF5QnVmZmVyKGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IGNvbXBvc2VkU2lnbmFsID0gY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW4gJiYgY2FuY2VsVG9rZW4udG9BYm9ydFNpZ25hbCgpXSwgdGltZW91dCk7XG5cbiAgbGV0IHJlcXVlc3Q7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmUgPSBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSAmJiAoKCkgPT4ge1xuICAgICAgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IHByb2dyZXNzRXZlbnREZWNvcmF0b3IoXG4gICAgICAgICAgcmVxdWVzdENvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoYXN5bmNEZWNvcmF0b3Iob25VcGxvYWRQcm9ncmVzcykpXG4gICAgICAgICk7XG5cbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgb25Qcm9ncmVzcywgZmx1c2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNTdHJpbmcod2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgd2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ29taXQnO1xuICAgIH1cblxuICAgIC8vIENsb3VkZmxhcmUgV29ya2VycyB0aHJvd3Mgd2hlbiBjcmVkZW50aWFscyBhcmUgZGVmaW5lZFxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2xvdWRmbGFyZS93b3JrZXJkL2lzc3Vlcy85MDJcbiAgICBjb25zdCBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID0gXCJjcmVkZW50aWFsc1wiIGluIFJlcXVlc3QucHJvdG90eXBlO1xuICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICAgIHNpZ25hbDogY29tcG9zZWRTaWduYWwsXG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5ub3JtYWxpemUoKS50b0pTT04oKSxcbiAgICAgIGJvZHk6IGRhdGEsXG4gICAgICBkdXBsZXg6IFwiaGFsZlwiLFxuICAgICAgY3JlZGVudGlhbHM6IGlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQgPyB3aXRoQ3JlZGVudGlhbHMgOiB1bmRlZmluZWRcbiAgICB9KTtcblxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xuXG4gICAgY29uc3QgaXNTdHJlYW1SZXNwb25zZSA9IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKHJlc3BvbnNlVHlwZSA9PT0gJ3N0cmVhbScgfHwgcmVzcG9uc2VUeXBlID09PSAncmVzcG9uc2UnKTtcblxuICAgIGlmIChzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChvbkRvd25sb2FkUHJvZ3Jlc3MgfHwgKGlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUpKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICBjb25zdCBbb25Qcm9ncmVzcywgZmx1c2hdID0gb25Eb3dubG9hZFByb2dyZXNzICYmIHByb2dyZXNzRXZlbnREZWNvcmF0b3IoXG4gICAgICAgIHJlc3BvbnNlQ29udGVudExlbmd0aCxcbiAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoYXN5bmNEZWNvcmF0b3Iob25Eb3dubG9hZFByb2dyZXNzKSwgdHJ1ZSlcbiAgICAgICkgfHwgW107XG5cbiAgICAgIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFxuICAgICAgICB0cmFja1N0cmVhbShyZXNwb25zZS5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsICgpID0+IHtcbiAgICAgICAgICBmbHVzaCAmJiBmbHVzaCgpO1xuICAgICAgICAgIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSB8fCAndGV4dCc7XG5cbiAgICBsZXQgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzb2x2ZXJzW3V0aWxzLmZpbmRLZXkocmVzb2x2ZXJzLCByZXNwb25zZVR5cGUpIHx8ICd0ZXh0J10ocmVzcG9uc2UsIGNvbmZpZyk7XG5cbiAgICAhaXNTdHJlYW1SZXNwb25zZSAmJiB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBoZWFkZXJzOiBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKSxcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfSlcbiAgICB9KVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuXG4gICAgaWYgKGVyciAmJiBlcnIubmFtZSA9PT0gJ1R5cGVFcnJvcicgJiYgL2ZldGNoL2kudGVzdChlcnIubWVzc2FnZSkpIHtcbiAgICAgIHRocm93IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSxcbiAgICAgICAge1xuICAgICAgICAgIGNhdXNlOiBlcnIuY2F1c2UgfHwgZXJyXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZXJyLCBlcnIgJiYgZXJyLmNvZGUsIGNvbmZpZywgcmVxdWVzdCk7XG4gIH1cbn0pO1xuXG5cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgaHR0cEFkYXB0ZXIgZnJvbSAnLi9odHRwLmpzJztcbmltcG9ydCB4aHJBZGFwdGVyIGZyb20gJy4veGhyLmpzJztcbmltcG9ydCBmZXRjaEFkYXB0ZXIgZnJvbSAnLi9mZXRjaC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXIsXG4gIGZldGNoOiBmZXRjaEFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikgfHwgYWRhcHRlciA9PT0gbnVsbCB8fCBhZGFwdGVyID09PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS43LjdcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgdGhlIGNhc2Ugd2hlcmUgXCJzdGFja1wiIGlzIGFuIHVuLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgdG9BYm9ydFNpZ25hbCgpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgY29uc3QgYWJvcnQgPSAoZXJyKSA9PiB7XG4gICAgICBjb250cm9sbGVyLmFib3J0KGVycik7XG4gICAgfTtcblxuICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIGNvbnRyb2xsZXIuc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdGhpcy51bnN1YnNjcmliZShhYm9ydCk7XG5cbiAgICByZXR1cm4gY29udHJvbGxlci5zaWduYWw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCB7IFVTRVJfTE9DQUxTVE9SQUdFX0tFWSB9IGZyb20gXCJzaGFyZWQvY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0ICRhcGkgPSBheGlvcy5jcmVhdGUoe1xyXG4gIGJhc2VVUkw6IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgQXV0aG9yaXphdGlvbjogbG9jYWxTdG9yYWdlLmdldEl0ZW0oVVNFUl9MT0NBTFNUT1JBR0VfS0VZKSxcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IHsgY29uZmlndXJlU3RvcmUsIFJlZHVjZXJzTWFwT2JqZWN0IH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IHsgU3RhdGVTY2hlbWEsIFRodW5rRXh0cmFBcmcgfSBmcm9tIFwiLi9TdGF0ZVNjaGVtYVwiO1xyXG4vLyBpbXBvcnQgeyB1c2VyUmVkdWNlciB9IGZyb20gXCJlbnRpdGllcy9Vc2VyXCI7XHJcblxyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyB1c2VyUmVkdWNlciB9IGZyb20gXCJlbnRpdGllcy9Vc2VyL21vZGVsL3NsaWNlL1VzZXJTbGljZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVSZWR1Y2VyTWFuYWdlciB9IGZyb20gXCIuL1JlZHVjZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCB7ICRhcGkgfSBmcm9tIFwic2hhcmVkL2FwaS9heGlvc0FwaUluc3RhbmNlXCI7XHJcbmltcG9ydCB7IE5hdmlnYXRlRnVuY3Rpb24gfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJlZHV4U3RvcmUgPSAoXHJcbiAgbmF2aWdhdGU6IE5hdmlnYXRlRnVuY3Rpb24sXHJcbiAgaW5pdGlhbFN0YXRlPzogU3RhdGVTY2hlbWEsXHJcbikgPT4ge1xyXG4gIGNvbnN0IHJvb3RSZWR1Y2VyczogUmVkdWNlcnNNYXBPYmplY3Q8U3RhdGVTY2hlbWE+ID0ge1xyXG4gICAgdXNlcjogdXNlclJlZHVjZXIsXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZXh0cmFBcmc6IFRodW5rRXh0cmFBcmcgPSB7XHJcbiAgICBhcGk6ICRhcGksXHJcbiAgICBuYXZpZ2F0ZSxcclxuICB9O1xyXG5cclxuICBjb25zdCByZWR1Y2VyTWFuYWdlciA9IGNyZWF0ZVJlZHVjZXJNYW5hZ2VyKHJvb3RSZWR1Y2Vycyk7XHJcblxyXG4gIGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmU8U3RhdGVTY2hlbWE+KHtcclxuICAgIHJlZHVjZXI6IHJlZHVjZXJNYW5hZ2VyLnJlZHVjZSxcclxuICAgIG1pZGRsZXdhcmU6IGdldERlZmF1bHRNaWRkbGV3YXJlID0+XHJcbiAgICAgIGdldERlZmF1bHRNaWRkbGV3YXJlKHtcclxuICAgICAgICB0aHVuazoge1xyXG4gICAgICAgICAgZXh0cmFBcmd1bWVudDogZXh0cmFBcmcsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSksXHJcbiAgICBkZXZUb29sczogX19JU19ERVZfXyxcclxuICAgIHByZWxvYWRlZFN0YXRlOiBpbml0aWFsU3RhdGUsXHJcbiAgfSk7XHJcbiAgLy9AdHMtaWdub3JlXHJcbiAgc3RvcmUucmVkdWNlck1hbmFnZXIgPSByZWR1Y2VyTWFuYWdlcjtcclxuXHJcbiAgcmV0dXJuIHN0b3JlO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQXBwU3RvcmUgPSBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVSZWR1eFN0b3JlPjtcclxuZXhwb3J0IHR5cGUgUm9vdFN0YXRlID0gUmV0dXJuVHlwZTxBcHBTdG9yZVtcImdldFN0YXRlXCJdPjtcclxuZXhwb3J0IHR5cGUgQXBwRGlzcGF0Y2ggPSBBcHBTdG9yZVtcImRpc3BhdGNoXCJdO1xyXG5leHBvcnQgY29uc3QgdXNlQXBwRGlzcGF0Y2g6ICgpID0+IEFwcERpc3BhdGNoID0gdXNlRGlzcGF0Y2g7XHJcbiIsImltcG9ydCB7XHJcbiAgQWN0aW9uLFxyXG4gIGNvbWJpbmVSZWR1Y2VycyxcclxuICBSZWR1Y2VyLFxyXG4gIFJlZHVjZXJzTWFwT2JqZWN0LFxyXG59IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7IFJlZHVjZXJNYW5hZ2VyLCBTdGF0ZVNjaGVtYSwgU3RhdGVTY2hlbWFLZXkgfSBmcm9tIFwiLi9TdGF0ZVNjaGVtYVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXJNYW5hZ2VyKFxyXG4gIGluaXRpYWxSZWR1Y2VyczogUmVkdWNlcnNNYXBPYmplY3Q8U3RhdGVTY2hlbWE+LFxyXG4pOiBSZWR1Y2VyTWFuYWdlciB7XHJcbiAgY29uc3QgcmVkdWNlcnMgPSB7IC4uLmluaXRpYWxSZWR1Y2VycyB9O1xyXG5cclxuICBsZXQgY29tYmluZWRSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKTtcclxuXHJcbiAgbGV0IGtleXNUb1JlbW92ZTogU3RhdGVTY2hlbWFLZXlbXSA9IFtdO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0UmVkdWNlck1hcDogKCkgPT4gcmVkdWNlcnMsXHJcblxyXG4gICAgcmVkdWNlOiAoc3RhdGU6IFN0YXRlU2NoZW1hLCBhY3Rpb246IEFjdGlvbikgPT4ge1xyXG4gICAgICBpZiAoa2V5c1RvUmVtb3ZlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzdGF0ZSA9IHsgLi4uc3RhdGUgfTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzVG9SZW1vdmUpIHtcclxuICAgICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBrZXlzVG9SZW1vdmUgPSBbXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbWJpbmVkUmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICAgIH0sXHJcblxyXG4gICAgYWRkOiAoa2V5OiBTdGF0ZVNjaGVtYUtleSwgcmVkdWNlcjogUmVkdWNlcikgPT4ge1xyXG4gICAgICBpZiAoIWtleSB8fCByZWR1Y2Vyc1trZXldKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZWR1Y2Vyc1trZXldID0gcmVkdWNlcjtcclxuXHJcbiAgICAgIGNvbWJpbmVkUmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZTogKGtleTogU3RhdGVTY2hlbWFLZXkpID0+IHtcclxuICAgICAgaWYgKCFrZXkgfHwgIXJlZHVjZXJzW2tleV0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRlbGV0ZSByZWR1Y2Vyc1trZXldO1xyXG5cclxuICAgICAga2V5c1RvUmVtb3ZlLnB1c2goa2V5KTtcclxuXHJcbiAgICAgIGNvbWJpbmVkUmVkdWNlciA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycyk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RhdGVTY2hlbWEgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9TdG9yZVByb3ZpZGVyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VXNlcklkID0gKHN0YXRlOiBTdGF0ZVNjaGVtYSkgPT5cclxuICBzdGF0ZT8udXNlcj8uYXV0aERhdGE/LmlkIHx8IFwiXCI7XHJcbiIsImltcG9ydCB7IFN0YXRlU2NoZW1hIH0gZnJvbSBcImFwcC9wcm92aWRlcnMvU3RvcmVQcm92aWRlclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFVzZXJBdXRob3JpemVkID0gKHN0YXRlOiBTdGF0ZVNjaGVtYSkgPT5cclxuICBzdGF0ZT8udXNlcj8uYXV0aG9yaXplZCB8fCBmYWxzZTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UsIFBheWxvYWRBY3Rpb24gfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xyXG5pbXBvcnQgeyBVc2VyLCBVc2VyU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGVzL3VzZXJTY2hlbWFcIjtcclxuaW1wb3J0IHsgVVNFUl9MT0NBTFNUT1JBR0VfS0VZIH0gZnJvbSBcInNoYXJlZC9jb25zdGFudHMvY29uc3RhbnRzXCI7XHJcbmNvbnN0IGluaXRpYWxTdGF0ZTogVXNlclNjaGVtYSA9IHtcclxuICBhdXRoRGF0YToge1xyXG4gICAgaWQ6IFwiXCIsXHJcbiAgICB1c2VybmFtZTogXCJcIixcclxuICB9LFxyXG4gIGF1dGhvcml6ZWQ6IGZhbHNlLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZXJTbGljZSA9IGNyZWF0ZVNsaWNlKHtcclxuICBuYW1lOiBcInVzZXJcIixcclxuICBpbml0aWFsU3RhdGUsXHJcbiAgcmVkdWNlcnM6IHtcclxuICAgIGxvZ2luOiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxVc2VyPikgPT4ge1xyXG4gICAgICBzdGF0ZS5hdXRoRGF0YS5pZCA9IGFjdGlvbi5wYXlsb2FkLmlkO1xyXG4gICAgICBzdGF0ZS5hdXRoRGF0YS51c2VybmFtZSA9IGFjdGlvbi5wYXlsb2FkLnVzZXJuYW1lO1xyXG4gICAgICBzdGF0ZS5hdXRob3JpemVkID0gdHJ1ZTtcclxuICAgICAgY29uc3QgdXNlciA9IHtcclxuICAgICAgICBpZDogYWN0aW9uLnBheWxvYWQuaWQsXHJcbiAgICAgICAgdXNlcm5hbWU6IGFjdGlvbi5wYXlsb2FkLnVzZXJuYW1lLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oVVNFUl9MT0NBTFNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XHJcbiAgICB9LFxyXG4gICAgbG9nb3V0OiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxVc2VyPikgPT4ge1xyXG4gICAgICBzdGF0ZS5hdXRob3JpemVkID0gZmFsc2U7XHJcbiAgICAgIHN0YXRlLmF1dGhEYXRhID0ge1xyXG4gICAgICAgIGlkOiBcIlwiLFxyXG4gICAgICAgIHVzZXJuYW1lOiBcIlwiLFxyXG4gICAgICB9O1xyXG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShVU0VSX0xPQ0FMU1RPUkFHRV9LRVkpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZVVzZXI6IHN0YXRlID0+IHtcclxuICAgICAgY29uc3QgdXNlcjogVXNlciA9IEpTT04ucGFyc2UoXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oVVNFUl9MT0NBTFNUT1JBR0VfS0VZKSxcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICh1c2VyICE9PSBudWxsICYmIHVzZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0YXRlLmF1dGhEYXRhLmlkID0gdXNlci5pZDtcclxuICAgICAgICBzdGF0ZS5hdXRoRGF0YS51c2VybmFtZSA9IHVzZXIudXNlcm5hbWU7XHJcbiAgICAgICAgc3RhdGUuYXV0aG9yaXplZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgeyBhY3Rpb25zOiB1c2VyQWN0aW9ucyB9ID0gdXNlclNsaWNlO1xyXG5leHBvcnQgY29uc3QgeyByZWR1Y2VyOiB1c2VyUmVkdWNlciB9ID0gdXNlclNsaWNlO1xyXG4iLCJpbXBvcnQgeyBsYXp5IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgTG9naW5Gb3JtQXN5bmMgPSBsYXp5KCgpID0+IGltcG9ydChcIi4vTG9naW5Gb3JtXCIpKTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlQXN5bmNUaHVuayB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7IFRodW5rQ29uZmlnIH0gZnJvbSBcImFwcC9wcm92aWRlcnMvU3RvcmVQcm92aWRlclwiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcImVudGl0aWVzL1VzZXJcIjtcclxuaW1wb3J0IHsgdXNlckFjdGlvbnMgfSBmcm9tIFwiZW50aXRpZXMvVXNlclwiO1xyXG5leHBvcnQgaW50ZXJmYWNlIExvZ2luQnlVc2VybmFtZVByb3BzIHtcclxuICB1c2VybmFtZTogc3RyaW5nO1xyXG4gIHBhc3N3b3JkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2dpbkJ5VXNlck5hbWUgPSBjcmVhdGVBc3luY1RodW5rPFxyXG4gIFVzZXIsXHJcbiAgTG9naW5CeVVzZXJuYW1lUHJvcHMsXHJcbiAgVGh1bmtDb25maWc8c3RyaW5nPlxyXG4+KFwibG9naW4vbG9naW5CeVVzZXJOYW1lXCIsIGFzeW5jIChsb2dpbkRhdGEsIHRodW5rQVBJKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGh1bmtBUEkuZXh0cmEuYXBpLnBvc3Q8VXNlcj4oXCIvbG9naW5cIiwgbG9naW5EYXRhKTtcclxuICAgIGlmICghcmVzcG9uc2UuZGF0YSkge1xyXG4gICAgICByZXR1cm4gdGh1bmtBUEkucmVqZWN0V2l0aFZhbHVlKFwiTm8gZGF0YSBpbiByZXNwb25zZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aHVua0FQSS5kaXNwYXRjaCh1c2VyQWN0aW9ucy5sb2dpbihyZXNwb25zZS5kYXRhKSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyci5yZXNwb25zZT8uZGF0YT8ubWVzc2FnZSB8fCBcIkZhaWxlZCB0byBsb2dpblwiO1xyXG4gICAgcmV0dXJuIHRodW5rQVBJLnJlamVjdFdpdGhWYWx1ZShlcnJvck1lc3NhZ2UpO1xyXG4gIH1cclxufSk7XHJcbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlLCBQYXlsb2FkQWN0aW9uIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IHsgTG9naW5TY2hlbWEgfSBmcm9tIFwiZmVhdHVyZXMvQXV0aEJ5VXNlcm5hbWVcIjtcclxuaW1wb3J0IHsgbG9naW5CeVVzZXJOYW1lIH0gZnJvbSBcImZlYXR1cmVzL0F1dGhCeVVzZXJuYW1lXCI7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGU6IExvZ2luU2NoZW1hID0ge1xyXG4gIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgcGFzc3dvcmQ6IFwiXCIsXHJcbiAgdXNlcm5hbWU6IFwiXCIsXHJcbiAgZXJyb3I6IFwiXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbG9naW5Gb3JtU2xpY2UgPSBjcmVhdGVTbGljZSh7XHJcbiAgbmFtZTogXCJsb2dpbkZvcm1cIixcclxuICBpbml0aWFsU3RhdGUsXHJcbiAgcmVkdWNlcnM6IHtcclxuICAgIHNldFVzZXJuYW1lOiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxzdHJpbmc+KSA9PiB7XHJcbiAgICAgIHN0YXRlLnVzZXJuYW1lID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9LFxyXG4gICAgc2V0UGFzc3dvcmQ6IChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHN0cmluZz4pID0+IHtcclxuICAgICAgc3RhdGUucGFzc3dvcmQgPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgIH0sXHJcbiAgICBzZXRFcnJvcjogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248c3RyaW5nPikgPT4ge1xyXG4gICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIGV4dHJhUmVkdWNlcnM6IGJ1aWxkZXIgPT4ge1xyXG4gICAgYnVpbGRlclxyXG4gICAgICAuYWRkQ2FzZShsb2dpbkJ5VXNlck5hbWUuZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIHN0YXRlLmVycm9yID0gXCJcIjtcclxuICAgICAgICBzdGF0ZS5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgfSlcclxuICAgICAgLmFkZENhc2UobG9naW5CeVVzZXJOYW1lLnJlamVjdGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgICAgc3RhdGUuaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5hZGRDYXNlKGxvZ2luQnlVc2VyTmFtZS5wZW5kaW5nLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgIHN0YXRlLmlzTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBcIlwiO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCB7IGFjdGlvbnM6IGxvZ2luRm9ybUFjdGlvbnMgfSA9IGxvZ2luRm9ybVNsaWNlO1xyXG5leHBvcnQgY29uc3QgeyByZWR1Y2VyOiBsb2dpbkZvcm1SZWR1Y2VyIH0gPSBsb2dpbkZvcm1TbGljZTtcclxuIiwiZXhwb3J0IGNvbnN0IFVTRVJfTE9DQUxTVE9SQUdFX0tFWSA9IFwidXNlclwiO1xyXG4iLCJ0eXBlIE1vZHMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBib29sZWFuPlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYXNzTmFtZXMoY2xzOiBzdHJpbmcsIG1vZHM6IE1vZHMgPSB7fSwgYWRkaXRpb25hbDogc3RyaW5nW10gPSBbXSk6IHN0cmluZ3tcclxuXHRyZXR1cm4gW1xyXG5cdFx0Y2xzLFxyXG5cdFx0Li4uYWRkaXRpb25hbC5maWx0ZXIoQm9vbGVhbiksXHJcblx0XHQuLi5PYmplY3QuZW50cmllcyhtb2RzKVxyXG5cdFx0IFxyXG5cdFx0LmZpbHRlcigoW18sIHZhbHVlXSkgPT4gQm9vbGVhbih2YWx1ZSkpXHJcblx0XHQubWFwKChba2V5XSkgPT4ga2V5KVxyXG5cdF0uam9pbignICcpXHJcbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcImJ1dHRvblwiOlwiVjF4Y1RvcWFcIixcIm91dGxpbmVcIjpcImIxV0ZIbHZnXCIsXCJyb3VuZGVkXCI6XCJXNHpqYXFlSFwifTsiLCJpbXBvcnQgeyBCdXR0b25IVE1MQXR0cmlidXRlcywgRkMsIG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCJzaGFyZWQvbGliL0NsYXNzTmFtZXMvY2xhc3NOYW1lc1wiO1xyXG5pbXBvcnQgY2xzIGZyb20gXCIuL0J1dHRvbi5tb2R1bGUuc2Nzc1wiO1xyXG5pbnRlcmZhY2UgQnV0dG9uUHJvcHMgZXh0ZW5kcyBCdXR0b25IVE1MQXR0cmlidXRlczxIVE1MQnV0dG9uRWxlbWVudD4ge1xyXG4gIG90aGVyQ2xhc3Nlcz86IHN0cmluZztcclxuICB2YXJpYW50cz86IEJ1dHRvblZhcmlhbnRzW107XHJcbiAgb25DbGljaz86ICgpID0+IHZvaWQ7XHJcbn1cclxuZXhwb3J0IGNvbnN0IGVudW0gQnV0dG9uVmFyaWFudHMge1xyXG4gIHByaW1hcnkgPSBcInByaW1hcnlcIixcclxuICBzZWNvbmRhcnkgPSBcInNlY29uZGFyeVwiLFxyXG4gIHJvdW5kZWQgPSBcInJvdW5kZWRcIixcclxuICBvdXRsaW5lID0gXCJvdXRsaW5lXCIsXHJcbn1cclxuXHJcbmNvbnN0IEJ1dHRvbjogRkM8QnV0dG9uUHJvcHM+ID0gbWVtbyhcclxuICAoeyBvdGhlckNsYXNzZXMsIG9uQ2xpY2ssIHZhcmlhbnRzLCBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8YnV0dG9uXHJcbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b25fdGVzdFwiXHJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cclxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXHJcbiAgICAgICAgICBjbHMuYnV0dG9uLFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBbY2xzW0J1dHRvblZhcmlhbnRzLm91dGxpbmVdXTogdmFyaWFudHM/LmZpbmQoXHJcbiAgICAgICAgICAgICAgaXRlbSA9PiBpdGVtID09IEJ1dHRvblZhcmlhbnRzLm91dGxpbmUsXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIFtjbHNbQnV0dG9uVmFyaWFudHMucHJpbWFyeV1dOiB2YXJpYW50cz8uZmluZChcclxuICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0gPT0gQnV0dG9uVmFyaWFudHMucHJpbWFyeSxcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgW2Nsc1tCdXR0b25WYXJpYW50cy5yb3VuZGVkXV06IHZhcmlhbnRzPy5maW5kKFxyXG4gICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbSA9PSBCdXR0b25WYXJpYW50cy5yb3VuZGVkLFxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBbY2xzW0J1dHRvblZhcmlhbnRzLnNlY29uZGFyeV1dOiB2YXJpYW50cz8uZmluZChcclxuICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0gPT0gQnV0dG9uVmFyaWFudHMuc2Vjb25kYXJ5LFxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIFtvdGhlckNsYXNzZXNdLFxyXG4gICAgICAgICl9XHJcbiAgICAgID5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgKTtcclxuICB9LFxyXG4pO1xyXG5cclxuZXhwb3J0IHsgQnV0dG9uIH07XHJcbiIsImltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwic2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXNcIjtcclxuaW1wb3J0IG1haW5DbGFzc2VzIGZyb20gXCIuL0xvYWRlci5tb2R1bGUuc2Nzc1wiO1xyXG5cclxuaW50ZXJmYWNlIExvYWRlclByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgTG9hZGVyOiBGQzxMb2FkZXJQcm9wcz4gPSAoeyBzb21lQ2xhc3NlcywgLi4ucHJvcHMgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhtYWluQ2xhc3Nlc1tcImxkcy1yb2xsZXJcIl0sIHt9LCBbc29tZUNsYXNzZXNdKX0+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9hZGVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIlBhZ2VMb2FkZXJcIjpcIlVUOGtwbmxiXCIsXCJsZHMtcm9sbGVyXCI6XCJwQ2gzelB6V1wifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIlRleHRcIjpcImpyaHpZckhYXCIsXCJzbWFsbFwiOlwicElFWm1WNzBcIixcIm1lZGl1bVwiOlwiYnpjc3dWamxcIixcImxhcmdlXCI6XCJ2ejVBOE9hZFwiLFwicHJpbWFyeVwiOlwidlRWb3FVTXRcIixcInNlY29uZGFyeVwiOlwiQnU0Q2p6S0ZcIixcImVycm9yXCI6XCJWQ3hXU3JNQ1wiLFwic3VjY2Vzc1wiOlwiU0V3ODA3YVlcIixcIndhcm5pbmdcIjpcIlF4S2xsMkFsXCIsXCJub3JtYWxcIjpcIkhqcXBPbnJZXCIsXCJib2xkXCI6XCJ1bGJlcTFhWlwiLFwibGVmdFwiOlwiSF8yel83TUpcIixcImNlbnRlclwiOlwiR25aMWt5clBcIixcInJpZ2h0XCI6XCJVbFZjR0hQU1wifTsiLCJpbXBvcnQgeyBGQywgbWVtbywgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwic2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXNcIjtcclxuaW1wb3J0IG1haW5DbGFzc2VzIGZyb20gXCIuL1RleHQubW9kdWxlLnNjc3NcIjtcclxuXHJcbmludGVyZmFjZSBUZXh0UHJvcHMge1xyXG4gIHRhZz86IFwicFwiIHwgXCJzcGFuXCIgfCBcImgxXCIgfCBcImgyXCIgfCBcImgzXCIgfCBcImg0XCIgfCBcImg1XCIgfCBcImg2XCI7XHJcbiAgc2l6ZT86IFwic21hbGxcIiB8IFwibWVkaXVtXCIgfCBcImxhcmdlXCI7XHJcbiAgY29sb3I/OiBcInByaW1hcnlcIiB8IFwic2Vjb25kYXJ5XCIgfCBcImVycm9yXCIgfCBcInN1Y2Nlc3NcIiB8IFwid2FybmluZ1wiO1xyXG4gIHdlaWdodD86IFwibm9ybWFsXCIgfCBcImJvbGRcIjtcclxuICBhbGlnbj86IFwibGVmdFwiIHwgXCJjZW50ZXJcIiB8IFwicmlnaHRcIjtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgVGV4dDogRkM8VGV4dFByb3BzPiA9IG1lbW8oXHJcbiAgKHtcclxuICAgIHRhZzogVGFnID0gXCJwXCIsXHJcbiAgICBzaXplID0gXCJtZWRpdW1cIixcclxuICAgIGNvbG9yLFxyXG4gICAgd2VpZ2h0ID0gXCJub3JtYWxcIixcclxuICAgIGFsaWduID0gXCJsZWZ0XCIsXHJcbiAgICBjaGlsZHJlbixcclxuICAgIGNsYXNzTmFtZSxcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCB0ZXh0Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXMobWFpbkNsYXNzZXMuVGV4dCwge30sIFtcclxuICAgICAgbWFpbkNsYXNzZXNbc2l6ZV0sXHJcbiAgICAgIG1haW5DbGFzc2VzW2NvbG9yXSxcclxuICAgICAgbWFpbkNsYXNzZXNbd2VpZ2h0XSxcclxuICAgICAgbWFpbkNsYXNzZXNbYWxpZ25dLFxyXG4gICAgICBjbGFzc05hbWUsXHJcbiAgICBdKTtcclxuXHJcbiAgICByZXR1cm4gPFRhZyBjbGFzc05hbWU9e3RleHRDbGFzc05hbWVzfT57Y2hpbGRyZW59PC9UYWc+O1xyXG4gIH0sXHJcbik7XHJcblxyXG5leHBvcnQgeyBUZXh0IH07XHJcbiIsInZhciB1cHBlckNhc2UgPSByZXF1aXJlKCd1cHBlci1jYXNlJylcbnZhciBub0Nhc2UgPSByZXF1aXJlKCduby1jYXNlJylcblxuLyoqXG4gKiBDYW1lbCBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSAge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGxvY2FsZSwgbWVyZ2VOdW1iZXJzKSB7XG4gIHZhciByZXN1bHQgPSBub0Nhc2UodmFsdWUsIGxvY2FsZSlcblxuICAvLyBSZXBsYWNlIHBlcmlvZHMgYmV0d2VlbiBudW1lcmljIGVudGl0aWVzIHdpdGggYW4gdW5kZXJzY29yZS5cbiAgaWYgKCFtZXJnZU51bWJlcnMpIHtcbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvICg/PVxcZCkvZywgJ18nKVxuICB9XG5cbiAgLy8gUmVwbGFjZSBzcGFjZXMgYmV0d2VlbiB3b3JkcyB3aXRoIGFuIHVwcGVyIGNhc2VkIGNoYXJhY3Rlci5cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC8gKC4pL2csIGZ1bmN0aW9uIChtLCAkMSkge1xuICAgIHJldHVybiB1cHBlckNhc2UoJDEsIGxvY2FsZSlcbiAgfSlcbn1cbiIsIi8qKlxuICogU3BlY2lhbCBsYW5ndWFnZS1zcGVjaWZpYyBvdmVycmlkZXMuXG4gKlxuICogU291cmNlOiBmdHA6Ly9mdHAudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL1NwZWNpYWxDYXNpbmcudHh0XG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIExBTkdVQUdFUyA9IHtcbiAgdHI6IHtcbiAgICByZWdleHA6IC9cXHUwMTMwfFxcdTAwNDl8XFx1MDA0OVxcdTAzMDcvZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMTMwJzogJ1xcdTAwNjknLFxuICAgICAgJ1xcdTAwNDknOiAnXFx1MDEzMScsXG4gICAgICAnXFx1MDA0OVxcdTAzMDcnOiAnXFx1MDA2OSdcbiAgICB9XG4gIH0sXG4gIGF6OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAxMzBdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDEzMCc6ICdcXHUwMDY5JyxcbiAgICAgICdcXHUwMDQ5JzogJ1xcdTAxMzEnLFxuICAgICAgJ1xcdTAwNDlcXHUwMzA3JzogJ1xcdTAwNjknXG4gICAgfVxuICB9LFxuICBsdDoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDQ5XFx1MDA0QVxcdTAxMkVcXHUwMENDXFx1MDBDRFxcdTAxMjhdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA0OSc6ICdcXHUwMDY5XFx1MDMwNycsXG4gICAgICAnXFx1MDA0QSc6ICdcXHUwMDZBXFx1MDMwNycsXG4gICAgICAnXFx1MDEyRSc6ICdcXHUwMTJGXFx1MDMwNycsXG4gICAgICAnXFx1MDBDQyc6ICdcXHUwMDY5XFx1MDMwN1xcdTAzMDAnLFxuICAgICAgJ1xcdTAwQ0QnOiAnXFx1MDA2OVxcdTAzMDdcXHUwMzAxJyxcbiAgICAgICdcXHUwMTI4JzogJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMydcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBMb3dlcmNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUpIHtcbiAgdmFyIGxhbmcgPSBMQU5HVUFHRVNbbG9jYWxlXVxuXG4gIHN0ciA9IHN0ciA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyKVxuXG4gIGlmIChsYW5nKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBsYW5nLm1hcFttXSB9KVxuICB9XG5cbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpXG59XG4iLCJ2YXIgbG93ZXJDYXNlID0gcmVxdWlyZSgnbG93ZXItY2FzZScpXG5cbnZhciBOT05fV09SRF9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9ub24td29yZC1yZWdleHAnKVxudmFyIENBTUVMX0NBU0VfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3IvY2FtZWwtY2FzZS1yZWdleHAnKVxudmFyIENBTUVMX0NBU0VfVVBQRVJfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3IvY2FtZWwtY2FzZS11cHBlci1yZWdleHAnKVxuXG4vKipcbiAqIFNlbnRlbmNlIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlLCByZXBsYWNlbWVudCkge1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHJlcGxhY2VtZW50ID0gdHlwZW9mIHJlcGxhY2VtZW50ICE9PSAnc3RyaW5nJyA/ICcgJyA6IHJlcGxhY2VtZW50XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSAobWF0Y2gsIGluZGV4LCB2YWx1ZSkge1xuICAgIGlmIChpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gKHZhbHVlLmxlbmd0aCAtIG1hdGNoLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIHJldHVybiByZXBsYWNlbWVudFxuICB9XG5cbiAgc3RyID0gU3RyaW5nKHN0cilcbiAgICAvLyBTdXBwb3J0IGNhbWVsIGNhc2UgKFwiY2FtZWxDYXNlXCIgLT4gXCJjYW1lbCBDYXNlXCIpLlxuICAgIC5yZXBsYWNlKENBTUVMX0NBU0VfUkVHRVhQLCAnJDEgJDInKVxuICAgIC8vIFN1cHBvcnQgb2RkIGNhbWVsIGNhc2UgKFwiQ0FNRUxDYXNlXCIgLT4gXCJDQU1FTCBDYXNlXCIpLlxuICAgIC5yZXBsYWNlKENBTUVMX0NBU0VfVVBQRVJfUkVHRVhQLCAnJDEgJDInKVxuICAgIC8vIFJlbW92ZSBhbGwgbm9uLXdvcmQgY2hhcmFjdGVycyBhbmQgcmVwbGFjZSB3aXRoIGEgc2luZ2xlIHNwYWNlLlxuICAgIC5yZXBsYWNlKE5PTl9XT1JEX1JFR0VYUCwgcmVwbGFjZSlcblxuICAvLyBMb3dlciBjYXNlIHRoZSBlbnRpcmUgc3RyaW5nLlxuICByZXR1cm4gbG93ZXJDYXNlKHN0ciwgbG9jYWxlKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSAvKFthLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MS1cXHUwNTg3XFx1MTNGOC1cXHUxM0ZEXFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QjVcXHVBN0I3XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGNDEtXFx1RkY1QTAtOVxceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MDlGNC1cXHUwOUY5XFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEI3Mi1cXHUwQjc3XFx1MEJFNi1cXHUwQkYyXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdFXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDc1XFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjMzXFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTM2OS1cXHUxMzdDXFx1MTZFRS1cXHUxNkYwXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOURBXFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1MjA3MFxcdTIwNzQtXFx1MjA3OVxcdTIwODAtXFx1MjA4OVxcdTIxNTAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDRkRcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNBXFx1MzE5Mi1cXHUzMTk1XFx1MzIyMC1cXHUzMjI5XFx1MzI0OC1cXHUzMjRGXFx1MzI1MS1cXHUzMjVGXFx1MzI4MC1cXHUzMjg5XFx1MzJCMS1cXHUzMkJGXFx1QTYyMC1cXHVBNjI5XFx1QTZFNi1cXHVBNkVGXFx1QTgzMC1cXHVBODM1XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XSkoW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdKS9nXG4iLCJtb2R1bGUuZXhwb3J0cyA9IC8oW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdKShbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FEXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV1bYS16XFx4QjVcXHhERi1cXHhGNlxceEY4LVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RS1cXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTktXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJELVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzMtXFx1MDIzOVxcdTAyM0NcXHUwMjNGXFx1MDI0MFxcdTAyNDJcXHUwMjQ3XFx1MDI0OVxcdTAyNEJcXHUwMjREXFx1MDI0Ri1cXHUwMjkzXFx1MDI5NS1cXHUwMkFGXFx1MDM3MVxcdTAzNzNcXHUwMzc3XFx1MDM3Qi1cXHUwMzdEXFx1MDM5MFxcdTAzQUMtXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENS1cXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGLVxcdTAzRjNcXHUwM0Y1XFx1MDNGOFxcdTAzRkJcXHUwM0ZDXFx1MDQzMC1cXHUwNDVGXFx1MDQ2MVxcdTA0NjNcXHUwNDY1XFx1MDQ2N1xcdTA0NjlcXHUwNDZCXFx1MDQ2RFxcdTA0NkZcXHUwNDcxXFx1MDQ3M1xcdTA0NzVcXHUwNDc3XFx1MDQ3OVxcdTA0N0JcXHUwNDdEXFx1MDQ3RlxcdTA0ODFcXHUwNDhCXFx1MDQ4RFxcdTA0OEZcXHUwNDkxXFx1MDQ5M1xcdTA0OTVcXHUwNDk3XFx1MDQ5OVxcdTA0OUJcXHUwNDlEXFx1MDQ5RlxcdTA0QTFcXHUwNEEzXFx1MDRBNVxcdTA0QTdcXHUwNEE5XFx1MDRBQlxcdTA0QURcXHUwNEFGXFx1MDRCMVxcdTA0QjNcXHUwNEI1XFx1MDRCN1xcdTA0QjlcXHUwNEJCXFx1MDRCRFxcdTA0QkZcXHUwNEMyXFx1MDRDNFxcdTA0QzZcXHUwNEM4XFx1MDRDQVxcdTA0Q0NcXHUwNENFXFx1MDRDRlxcdTA0RDFcXHUwNEQzXFx1MDRENVxcdTA0RDdcXHUwNEQ5XFx1MDREQlxcdTA0RERcXHUwNERGXFx1MDRFMVxcdTA0RTNcXHUwNEU1XFx1MDRFN1xcdTA0RTlcXHUwNEVCXFx1MDRFRFxcdTA0RUZcXHUwNEYxXFx1MDRGM1xcdTA0RjVcXHUwNEY3XFx1MDRGOVxcdTA0RkJcXHUwNEZEXFx1MDRGRlxcdTA1MDFcXHUwNTAzXFx1MDUwNVxcdTA1MDdcXHUwNTA5XFx1MDUwQlxcdTA1MERcXHUwNTBGXFx1MDUxMVxcdTA1MTNcXHUwNTE1XFx1MDUxN1xcdTA1MTlcXHUwNTFCXFx1MDUxRFxcdTA1MUZcXHUwNTIxXFx1MDUyM1xcdTA1MjVcXHUwNTI3XFx1MDUyOVxcdTA1MkJcXHUwNTJEXFx1MDUyRlxcdTA1NjEtXFx1MDU4N1xcdTEzRjgtXFx1MTNGRFxcdTFEMDAtXFx1MUQyQlxcdTFENkItXFx1MUQ3N1xcdTFENzktXFx1MUQ5QVxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NS1cXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRi1cXHUxRjA3XFx1MUYxMC1cXHUxRjE1XFx1MUYyMC1cXHUxRjI3XFx1MUYzMC1cXHUxRjM3XFx1MUY0MC1cXHUxRjQ1XFx1MUY1MC1cXHUxRjU3XFx1MUY2MC1cXHUxRjY3XFx1MUY3MC1cXHUxRjdEXFx1MUY4MC1cXHUxRjg3XFx1MUY5MC1cXHUxRjk3XFx1MUZBMC1cXHUxRkE3XFx1MUZCMC1cXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2XFx1MUZEN1xcdTFGRTAtXFx1MUZFN1xcdTFGRjItXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjEwQVxcdTIxMEVcXHUyMTBGXFx1MjExM1xcdTIxMkZcXHUyMTM0XFx1MjEzOVxcdTIxM0NcXHUyMTNEXFx1MjE0Ni1cXHUyMTQ5XFx1MjE0RVxcdTIxODRcXHUyQzMwLVxcdTJDNUVcXHUyQzYxXFx1MkM2NVxcdTJDNjZcXHUyQzY4XFx1MkM2QVxcdTJDNkNcXHUyQzcxXFx1MkM3M1xcdTJDNzRcXHUyQzc2LVxcdTJDN0JcXHUyQzgxXFx1MkM4M1xcdTJDODVcXHUyQzg3XFx1MkM4OVxcdTJDOEJcXHUyQzhEXFx1MkM4RlxcdTJDOTFcXHUyQzkzXFx1MkM5NVxcdTJDOTdcXHUyQzk5XFx1MkM5QlxcdTJDOURcXHUyQzlGXFx1MkNBMVxcdTJDQTNcXHUyQ0E1XFx1MkNBN1xcdTJDQTlcXHUyQ0FCXFx1MkNBRFxcdTJDQUZcXHUyQ0IxXFx1MkNCM1xcdTJDQjVcXHUyQ0I3XFx1MkNCOVxcdTJDQkJcXHUyQ0JEXFx1MkNCRlxcdTJDQzFcXHUyQ0MzXFx1MkNDNVxcdTJDQzdcXHUyQ0M5XFx1MkNDQlxcdTJDQ0RcXHUyQ0NGXFx1MkNEMVxcdTJDRDNcXHUyQ0Q1XFx1MkNEN1xcdTJDRDlcXHUyQ0RCXFx1MkNERFxcdTJDREZcXHUyQ0UxXFx1MkNFM1xcdTJDRTRcXHUyQ0VDXFx1MkNFRVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdUE2NDFcXHVBNjQzXFx1QTY0NVxcdUE2NDdcXHVBNjQ5XFx1QTY0QlxcdUE2NERcXHVBNjRGXFx1QTY1MVxcdUE2NTNcXHVBNjU1XFx1QTY1N1xcdUE2NTlcXHVBNjVCXFx1QTY1RFxcdUE2NUZcXHVBNjYxXFx1QTY2M1xcdUE2NjVcXHVBNjY3XFx1QTY2OVxcdUE2NkJcXHVBNjZEXFx1QTY4MVxcdUE2ODNcXHVBNjg1XFx1QTY4N1xcdUE2ODlcXHVBNjhCXFx1QTY4RFxcdUE2OEZcXHVBNjkxXFx1QTY5M1xcdUE2OTVcXHVBNjk3XFx1QTY5OVxcdUE2OUJcXHVBNzIzXFx1QTcyNVxcdUE3MjdcXHVBNzI5XFx1QTcyQlxcdUE3MkRcXHVBNzJGLVxcdUE3MzFcXHVBNzMzXFx1QTczNVxcdUE3MzdcXHVBNzM5XFx1QTczQlxcdUE3M0RcXHVBNzNGXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTc0N1xcdUE3NDlcXHVBNzRCXFx1QTc0RFxcdUE3NEZcXHVBNzUxXFx1QTc1M1xcdUE3NTVcXHVBNzU3XFx1QTc1OVxcdUE3NUJcXHVBNzVEXFx1QTc1RlxcdUE3NjFcXHVBNzYzXFx1QTc2NVxcdUE3NjdcXHVBNzY5XFx1QTc2QlxcdUE3NkRcXHVBNzZGXFx1QTc3MS1cXHVBNzc4XFx1QTc3QVxcdUE3N0NcXHVBNzdGXFx1QTc4MVxcdUE3ODNcXHVBNzg1XFx1QTc4N1xcdUE3OENcXHVBNzhFXFx1QTc5MVxcdUE3OTMtXFx1QTc5NVxcdUE3OTdcXHVBNzk5XFx1QTc5QlxcdUE3OURcXHVBNzlGXFx1QTdBMVxcdUE3QTNcXHVBN0E1XFx1QTdBN1xcdUE3QTlcXHVBN0I1XFx1QTdCN1xcdUE3RkFcXHVBQjMwLVxcdUFCNUFcXHVBQjYwLVxcdUFCNjVcXHVBQjcwLVxcdUFCQkZcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGRjQxLVxcdUZGNUFdKS9nXG4iLCJtb2R1bGUuZXhwb3J0cyA9IC9bXkEtWmEtelxceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQzAtOVxceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MDlGNC1cXHUwOUY5XFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEI3Mi1cXHUwQjc3XFx1MEJFNi1cXHUwQkYyXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdFXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDc1XFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjMzXFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTM2OS1cXHUxMzdDXFx1MTZFRS1cXHUxNkYwXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOURBXFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1MjA3MFxcdTIwNzQtXFx1MjA3OVxcdTIwODAtXFx1MjA4OVxcdTIxNTAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDRkRcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNBXFx1MzE5Mi1cXHUzMTk1XFx1MzIyMC1cXHUzMjI5XFx1MzI0OC1cXHUzMjRGXFx1MzI1MS1cXHUzMjVGXFx1MzI4MC1cXHUzMjg5XFx1MzJCMS1cXHUzMkJGXFx1QTYyMC1cXHVBNjI5XFx1QTZFNi1cXHVBNkVGXFx1QTgzMC1cXHVBODM1XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XSsvZ1xuIiwidmFyIGdsb2JhbCA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzO1xudmFyIF9fc2VsZl9fID0gKGZ1bmN0aW9uICgpIHtcbmZ1bmN0aW9uIEYoKSB7XG50aGlzLmZldGNoID0gZmFsc2U7XG50aGlzLkRPTUV4Y2VwdGlvbiA9IGdsb2JhbC5ET01FeGNlcHRpb25cbn1cbkYucHJvdG90eXBlID0gZ2xvYmFsO1xucmV0dXJuIG5ldyBGKCk7XG59KSgpO1xuKGZ1bmN0aW9uKHNlbGYpIHtcblxudmFyIGlycmVsZXZhbnQgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjpcbiAgICAgICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmXG4gICAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5ldyBCbG9iKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICAgIF07XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge307XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdO1xuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV07XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgaXRlbXMucHVzaChuYW1lKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH07XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG4gICAgICB9O1xuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKTtcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBjaGFycy5qb2luKCcnKVxuICB9XG5cbiAgZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gICAgaWYgKGJ1Zi5zbGljZSkge1xuICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKTtcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpO1xuICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keTtcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKTtcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ107XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5O1xuXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybDtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFscztcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpO1xuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2Q7XG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlO1xuICAgICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWw7XG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdDtcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dCk7XG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nO1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpO1xuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbDtcbiAgICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsO1xuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsO1xuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KTtcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG4gIH07XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGJvZHlcbiAgICAgIC50cmltKClcbiAgICAgIC5zcGxpdCgnJicpXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpO1xuICAgICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICAgIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpO1xuICAgIHByZVByb2Nlc3NlZEhlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKTtcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKTtcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCc7XG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXM7XG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMDtcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSyc7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnO1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KTtcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpO1xuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH07XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KTtcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJztcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfTtcblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF07XG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfTtcblxuICBleHBvcnRzLkRPTUV4Y2VwdGlvbiA9IHNlbGYuRE9NRXhjZXB0aW9uO1xuICB0cnkge1xuICAgIG5ldyBleHBvcnRzLkRPTUV4Y2VwdGlvbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gICAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gICAgfTtcbiAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gZXhwb3J0cy5ET01FeGNlcHRpb247XG4gIH1cblxuICBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBleHBvcnRzLkRPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgICB9XG5cbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpO1xuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBleHBvcnRzLkRPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKTtcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJztcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKTtcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KTtcbiAgICB9KVxuICB9XG5cbiAgZmV0Y2gucG9seWZpbGwgPSB0cnVlO1xuXG4gIGlmICghc2VsZi5mZXRjaCkge1xuICAgIHNlbGYuZmV0Y2ggPSBmZXRjaDtcbiAgICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzO1xuICAgIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gICAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlO1xuICB9XG5cbiAgZXhwb3J0cy5IZWFkZXJzID0gSGVhZGVycztcbiAgZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgZXhwb3J0cy5SZXNwb25zZSA9IFJlc3BvbnNlO1xuICBleHBvcnRzLmZldGNoID0gZmV0Y2g7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZXhwb3J0cztcblxufSkoe30pO1xufSkoX19zZWxmX18pO1xuX19zZWxmX18uZmV0Y2gucG9ueWZpbGwgPSB0cnVlO1xuLy8gUmVtb3ZlIFwicG9seWZpbGxcIiBwcm9wZXJ0eSBhZGRlZCBieSB3aGF0d2ctZmV0Y2hcbmRlbGV0ZSBfX3NlbGZfXy5mZXRjaC5wb2x5ZmlsbDtcbi8vIENob29zZSBiZXR3ZWVuIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiAoZ2xvYmFsKSBvciBjdXN0b20gaW1wbGVtZW50YXRpb24gKF9fc2VsZl9fKVxuLy8gdmFyIGN0eCA9IGdsb2JhbC5mZXRjaCA/IGdsb2JhbCA6IF9fc2VsZl9fO1xudmFyIGN0eCA9IF9fc2VsZl9fOyAvLyB0aGlzIGxpbmUgZGlzYWJsZSBzZXJ2aWNlIHdvcmtlciBzdXBwb3J0IHRlbXBvcmFyaWx5XG5leHBvcnRzID0gY3R4LmZldGNoIC8vIFRvIGVuYWJsZTogaW1wb3J0IGZldGNoIGZyb20gJ2Nyb3NzLWZldGNoJ1xuZXhwb3J0cy5kZWZhdWx0ID0gY3R4LmZldGNoIC8vIEZvciBUeXBlU2NyaXB0IGNvbnN1bWVycyB3aXRob3V0IGVzTW9kdWxlSW50ZXJvcC5cbmV4cG9ydHMuZmV0Y2ggPSBjdHguZmV0Y2ggLy8gVG8gZW5hYmxlOiBpbXBvcnQge2ZldGNofSBmcm9tICdjcm9zcy1mZXRjaCdcbmV4cG9ydHMuSGVhZGVycyA9IGN0eC5IZWFkZXJzXG5leHBvcnRzLlJlcXVlc3QgPSBjdHguUmVxdWVzdFxuZXhwb3J0cy5SZXNwb25zZSA9IGN0eC5SZXNwb25zZVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzXG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiaW1hZ2VzL2xheWVycy5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCJpbWFnZXMvbGF5ZXJzLTJ4LnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcImltYWdlcy9tYXJrZXItaWNvbi5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIHJlcXVpcmVkIHN0eWxlcyAqL1xcclxcblxcclxcbi5sZWFmbGV0LXBhbmUsXFxyXFxuLmxlYWZsZXQtdGlsZSxcXHJcXG4ubGVhZmxldC1tYXJrZXItaWNvbixcXHJcXG4ubGVhZmxldC1tYXJrZXItc2hhZG93LFxcclxcbi5sZWFmbGV0LXRpbGUtY29udGFpbmVyLFxcclxcbi5sZWFmbGV0LXBhbmUgPiBzdmcsXFxyXFxuLmxlYWZsZXQtcGFuZSA+IGNhbnZhcyxcXHJcXG4ubGVhZmxldC16b29tLWJveCxcXHJcXG4ubGVhZmxldC1pbWFnZS1sYXllcixcXHJcXG4ubGVhZmxldC1sYXllciB7XFxyXFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdGxlZnQ6IDA7XFxyXFxuXFx0dG9wOiAwO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250YWluZXIge1xcclxcblxcdG92ZXJmbG93OiBoaWRkZW47XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRpbGUsXFxyXFxuLmxlYWZsZXQtbWFya2VyLWljb24sXFxyXFxuLmxlYWZsZXQtbWFya2VyLXNoYWRvdyB7XFxyXFxuXFx0LXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG5cXHQgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdCAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFx0ICAtd2Via2l0LXVzZXItZHJhZzogbm9uZTtcXHJcXG5cXHR9XFxyXFxuLyogUHJldmVudHMgSUUxMSBmcm9tIGhpZ2hsaWdodGluZyB0aWxlcyBpbiBibHVlICovXFxyXFxuLmxlYWZsZXQtdGlsZTo6c2VsZWN0aW9uIHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG59XFxyXFxuLyogU2FmYXJpIHJlbmRlcnMgbm9uLXJldGluYSB0aWxlIG9uIHJldGluYSBiZXR0ZXIgd2l0aCB0aGlzLCBidXQgQ2hyb21lIGlzIHdvcnNlICovXFxyXFxuLmxlYWZsZXQtc2FmYXJpIC5sZWFmbGV0LXRpbGUge1xcclxcblxcdGltYWdlLXJlbmRlcmluZzogLXdlYmtpdC1vcHRpbWl6ZS1jb250cmFzdDtcXHJcXG5cXHR9XFxyXFxuLyogaGFjayB0aGF0IHByZXZlbnRzIGh3IGxheWVycyBcXFwic3RyZXRjaGluZ1xcXCIgd2hlbiBsb2FkaW5nIG5ldyB0aWxlcyAqL1xcclxcbi5sZWFmbGV0LXNhZmFyaSAubGVhZmxldC10aWxlLWNvbnRhaW5lciB7XFxyXFxuXFx0d2lkdGg6IDE2MDBweDtcXHJcXG5cXHRoZWlnaHQ6IDE2MDBweDtcXHJcXG5cXHQtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtbWFya2VyLWljb24sXFxyXFxuLmxlYWZsZXQtbWFya2VyLXNoYWRvdyB7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxuXFx0fVxcclxcbi8qIC5sZWFmbGV0LWNvbnRhaW5lciBzdmc6IHJlc2V0IHN2ZyBtYXgtd2lkdGggZGVjbGVyYXRpb24gc2hpcHBlZCBpbiBKb29tbGEhIChqb29tbGEub3JnKSAzLnggKi9cXHJcXG4vKiAubGVhZmxldC1jb250YWluZXIgaW1nOiBtYXAgaXMgYnJva2VuIGluIEZGIGlmIHlvdSBoYXZlIG1heC13aWR0aDogMTAwJSBvbiB0aWxlcyAqL1xcclxcbi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC1vdmVybGF5LXBhbmUgc3ZnIHtcXHJcXG5cXHRtYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDtcXHJcXG5cXHRtYXgtaGVpZ2h0OiBub25lICFpbXBvcnRhbnQ7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC1tYXJrZXItcGFuZSBpbWcsXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIC5sZWFmbGV0LXNoYWRvdy1wYW5lIGltZyxcXHJcXG4ubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtdGlsZS1wYW5lIGltZyxcXHJcXG4ubGVhZmxldC1jb250YWluZXIgaW1nLmxlYWZsZXQtaW1hZ2UtbGF5ZXIsXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIC5sZWFmbGV0LXRpbGUge1xcclxcblxcdG1heC13aWR0aDogbm9uZSAhaW1wb3J0YW50O1xcclxcblxcdG1heC1oZWlnaHQ6IG5vbmUgIWltcG9ydGFudDtcXHJcXG5cXHR3aWR0aDogYXV0bztcXHJcXG5cXHRwYWRkaW5nOiAwO1xcclxcblxcdH1cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250YWluZXIgaW1nLmxlYWZsZXQtdGlsZSB7XFxyXFxuXFx0LyogU2VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02MDAxMjAgKi9cXHJcXG5cXHRtaXgtYmxlbmQtbW9kZTogcGx1cy1saWdodGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250YWluZXIubGVhZmxldC10b3VjaC16b29tIHtcXHJcXG5cXHQtbXMtdG91Y2gtYWN0aW9uOiBwYW4teCBwYW4teTtcXHJcXG5cXHR0b3VjaC1hY3Rpb246IHBhbi14IHBhbi15O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250YWluZXIubGVhZmxldC10b3VjaC1kcmFnIHtcXHJcXG5cXHQtbXMtdG91Y2gtYWN0aW9uOiBwaW5jaC16b29tO1xcclxcblxcdC8qIEZhbGxiYWNrIGZvciBGRiB3aGljaCBkb2Vzbid0IHN1cHBvcnQgcGluY2gtem9vbSAqL1xcclxcblxcdHRvdWNoLWFjdGlvbjogbm9uZTtcXHJcXG5cXHR0b3VjaC1hY3Rpb246IHBpbmNoLXpvb207XFxyXFxufVxcclxcbi5sZWFmbGV0LWNvbnRhaW5lci5sZWFmbGV0LXRvdWNoLWRyYWcubGVhZmxldC10b3VjaC16b29tIHtcXHJcXG5cXHQtbXMtdG91Y2gtYWN0aW9uOiBub25lO1xcclxcblxcdHRvdWNoLWFjdGlvbjogbm9uZTtcXHJcXG59XFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIHtcXHJcXG5cXHQtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbn1cXHJcXG4ubGVhZmxldC1jb250YWluZXIgYSB7XFxyXFxuXFx0LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDUxLCAxODEsIDIyOSwgMC40KTtcXHJcXG59XFxyXFxuLmxlYWZsZXQtdGlsZSB7XFxyXFxuXFx0ZmlsdGVyOiBpbmhlcml0O1xcclxcblxcdHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtdGlsZS1sb2FkZWQge1xcclxcblxcdHZpc2liaWxpdHk6IGluaGVyaXQ7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXpvb20tYm94IHtcXHJcXG5cXHR3aWR0aDogMDtcXHJcXG5cXHRoZWlnaHQ6IDA7XFxyXFxuXFx0LW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcblxcdCAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG5cXHR6LWluZGV4OiA4MDA7XFxyXFxuXFx0fVxcclxcbi8qIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg4ODMxOSAqL1xcclxcbi5sZWFmbGV0LW92ZXJsYXktcGFuZSBzdmcge1xcclxcblxcdC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LXBhbmUgICAgICAgICB7IHotaW5kZXg6IDQwMDsgfVxcclxcblxcclxcbi5sZWFmbGV0LXRpbGUtcGFuZSAgICB7IHotaW5kZXg6IDIwMDsgfVxcclxcbi5sZWFmbGV0LW92ZXJsYXktcGFuZSB7IHotaW5kZXg6IDQwMDsgfVxcclxcbi5sZWFmbGV0LXNoYWRvdy1wYW5lICB7IHotaW5kZXg6IDUwMDsgfVxcclxcbi5sZWFmbGV0LW1hcmtlci1wYW5lICB7IHotaW5kZXg6IDYwMDsgfVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtcGFuZSAgIHsgei1pbmRleDogNjUwOyB9XFxyXFxuLmxlYWZsZXQtcG9wdXAtcGFuZSAgIHsgei1pbmRleDogNzAwOyB9XFxyXFxuXFxyXFxuLmxlYWZsZXQtbWFwLXBhbmUgY2FudmFzIHsgei1pbmRleDogMTAwOyB9XFxyXFxuLmxlYWZsZXQtbWFwLXBhbmUgc3ZnICAgIHsgei1pbmRleDogMjAwOyB9XFxyXFxuXFxyXFxuLmxlYWZsZXQtdm1sLXNoYXBlIHtcXHJcXG5cXHR3aWR0aDogMXB4O1xcclxcblxcdGhlaWdodDogMXB4O1xcclxcblxcdH1cXHJcXG4ubHZtbCB7XFxyXFxuXFx0YmVoYXZpb3I6IHVybCgjZGVmYXVsdCNWTUwpO1xcclxcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcbi8qIGNvbnRyb2wgcG9zaXRpb25pbmcgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250cm9sIHtcXHJcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFx0ei1pbmRleDogODAwO1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiB2aXNpYmxlUGFpbnRlZDsgLyogSUUgOS0xMCBkb2Vzbid0IGhhdmUgYXV0byAqL1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b3AsXFxyXFxuLmxlYWZsZXQtYm90dG9tIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0ei1pbmRleDogMTAwMDtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtdG9wIHtcXHJcXG5cXHR0b3A6IDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXJpZ2h0IHtcXHJcXG5cXHRyaWdodDogMDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYm90dG9tIHtcXHJcXG5cXHRib3R0b206IDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWxlZnQge1xcclxcblxcdGxlZnQ6IDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wge1xcclxcblxcdGZsb2F0OiBsZWZ0O1xcclxcblxcdGNsZWFyOiBib3RoO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1yaWdodCAubGVhZmxldC1jb250cm9sIHtcXHJcXG5cXHRmbG9hdDogcmlnaHQ7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvcCAubGVhZmxldC1jb250cm9sIHtcXHJcXG5cXHRtYXJnaW4tdG9wOiAxMHB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1ib3R0b20gLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0bWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtbGVmdCAubGVhZmxldC1jb250cm9sIHtcXHJcXG5cXHRtYXJnaW4tbGVmdDogMTBweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcmlnaHQgLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0bWFyZ2luLXJpZ2h0OiAxMHB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiB6b29tIGFuZCBmYWRlIGFuaW1hdGlvbnMgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1mYWRlLWFuaW0gLmxlYWZsZXQtcG9wdXAge1xcclxcblxcdG9wYWNpdHk6IDA7XFxyXFxuXFx0LXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgbGluZWFyO1xcclxcblxcdCAgIC1tb3otdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGxpbmVhcjtcXHJcXG5cXHQgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBsaW5lYXI7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWZhZGUtYW5pbSAubGVhZmxldC1tYXAtcGFuZSAubGVhZmxldC1wb3B1cCB7XFxyXFxuXFx0b3BhY2l0eTogMTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtem9vbS1hbmltYXRlZCB7XFxyXFxuXFx0LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxyXFxuXFx0ICAgIC1tcy10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxyXFxuXFx0ICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxyXFxuXFx0fVxcclxcbnN2Zy5sZWFmbGV0LXpvb20tYW5pbWF0ZWQge1xcclxcblxcdHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxyXFxufVxcclxcblxcclxcbi5sZWFmbGV0LXpvb20tYW5pbSAubGVhZmxldC16b29tLWFuaW1hdGVkIHtcXHJcXG5cXHQtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuMjVzIGN1YmljLWJlemllcigwLDAsMC4yNSwxKTtcXHJcXG5cXHQgICAtbW96LXRyYW5zaXRpb246ICAgIC1tb3otdHJhbnNmb3JtIDAuMjVzIGN1YmljLWJlemllcigwLDAsMC4yNSwxKTtcXHJcXG5cXHQgICAgICAgIHRyYW5zaXRpb246ICAgICAgICAgdHJhbnNmb3JtIDAuMjVzIGN1YmljLWJlemllcigwLDAsMC4yNSwxKTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtem9vbS1hbmltIC5sZWFmbGV0LXRpbGUsXFxyXFxuLmxlYWZsZXQtcGFuLWFuaW0gLmxlYWZsZXQtdGlsZSB7XFxyXFxuXFx0LXdlYmtpdC10cmFuc2l0aW9uOiBub25lO1xcclxcblxcdCAgIC1tb3otdHJhbnNpdGlvbjogbm9uZTtcXHJcXG5cXHQgICAgICAgIHRyYW5zaXRpb246IG5vbmU7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LXpvb20tYW5pbSAubGVhZmxldC16b29tLWhpZGUge1xcclxcblxcdHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuLyogY3Vyc29ycyAqL1xcclxcblxcclxcbi5sZWFmbGV0LWludGVyYWN0aXZlIHtcXHJcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWdyYWIge1xcclxcblxcdGN1cnNvcjogLXdlYmtpdC1ncmFiO1xcclxcblxcdGN1cnNvcjogICAgLW1vei1ncmFiO1xcclxcblxcdGN1cnNvcjogICAgICAgICBncmFiO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jcm9zc2hhaXIsXFxyXFxuLmxlYWZsZXQtY3Jvc3NoYWlyIC5sZWFmbGV0LWludGVyYWN0aXZlIHtcXHJcXG5cXHRjdXJzb3I6IGNyb3NzaGFpcjtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtcGFuZSxcXHJcXG4ubGVhZmxldC1jb250cm9sIHtcXHJcXG5cXHRjdXJzb3I6IGF1dG87XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWRyYWdnaW5nIC5sZWFmbGV0LWdyYWIsXFxyXFxuLmxlYWZsZXQtZHJhZ2dpbmcgLmxlYWZsZXQtZ3JhYiAubGVhZmxldC1pbnRlcmFjdGl2ZSxcXHJcXG4ubGVhZmxldC1kcmFnZ2luZyAubGVhZmxldC1tYXJrZXItZHJhZ2dhYmxlIHtcXHJcXG5cXHRjdXJzb3I6IG1vdmU7XFxyXFxuXFx0Y3Vyc29yOiAtd2Via2l0LWdyYWJiaW5nO1xcclxcblxcdGN1cnNvcjogICAgLW1vei1ncmFiYmluZztcXHJcXG5cXHRjdXJzb3I6ICAgICAgICAgZ3JhYmJpbmc7XFxyXFxuXFx0fVxcclxcblxcclxcbi8qIG1hcmtlciAmIG92ZXJsYXlzIGludGVyYWN0aXZpdHkgKi9cXHJcXG4ubGVhZmxldC1tYXJrZXItaWNvbixcXHJcXG4ubGVhZmxldC1tYXJrZXItc2hhZG93LFxcclxcbi5sZWFmbGV0LWltYWdlLWxheWVyLFxcclxcbi5sZWFmbGV0LXBhbmUgPiBzdmcgcGF0aCxcXHJcXG4ubGVhZmxldC10aWxlLWNvbnRhaW5lciB7XFxyXFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LW1hcmtlci1pY29uLmxlYWZsZXQtaW50ZXJhY3RpdmUsXFxyXFxuLmxlYWZsZXQtaW1hZ2UtbGF5ZXIubGVhZmxldC1pbnRlcmFjdGl2ZSxcXHJcXG4ubGVhZmxldC1wYW5lID4gc3ZnIHBhdGgubGVhZmxldC1pbnRlcmFjdGl2ZSxcXHJcXG5zdmcubGVhZmxldC1pbWFnZS1sYXllci5sZWFmbGV0LWludGVyYWN0aXZlIHBhdGgge1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiB2aXNpYmxlUGFpbnRlZDsgLyogSUUgOS0xMCBkb2Vzbid0IGhhdmUgYXV0byAqL1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcclxcblxcdH1cXHJcXG5cXHJcXG4vKiB2aXN1YWwgdHdlYWtzICovXFxyXFxuXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIHtcXHJcXG5cXHRiYWNrZ3JvdW5kOiAjZGRkO1xcclxcblxcdG91dGxpbmUtb2Zmc2V0OiAxcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciBhIHtcXHJcXG5cXHRjb2xvcjogIzAwNzhBODtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtem9vbS1ib3gge1xcclxcblxcdGJvcmRlcjogMnB4IGRvdHRlZCAjMzhmO1xcclxcblxcdGJhY2tncm91bmQ6IHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuLyogZ2VuZXJhbCB0eXBvZ3JhcGh5ICovXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIHtcXHJcXG5cXHRmb250LWZhbWlseTogXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXHJcXG5cXHRmb250LXNpemU6IDEycHg7XFxyXFxuXFx0Zm9udC1zaXplOiAwLjc1cmVtO1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxLjU7XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcbi8qIGdlbmVyYWwgdG9vbGJhciBzdHlsZXMgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1iYXIge1xcclxcblxcdGJveC1zaGFkb3c6IDAgMXB4IDVweCByZ2JhKDAsMCwwLDAuNjUpO1xcclxcblxcdGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYmFyIGEge1xcclxcblxcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7XFxyXFxuXFx0d2lkdGg6IDI2cHg7XFxyXFxuXFx0aGVpZ2h0OiAyNnB4O1xcclxcblxcdGxpbmUtaGVpZ2h0OiAyNnB4O1xcclxcblxcdGRpc3BsYXk6IGJsb2NrO1xcclxcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuXFx0Y29sb3I6IGJsYWNrO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1iYXIgYSxcXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycy10b2dnbGUge1xcclxcblxcdGJhY2tncm91bmQtcG9zaXRpb246IDUwJSA1MCU7XFxyXFxuXFx0YmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG5cXHRkaXNwbGF5OiBibG9jaztcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYmFyIGE6aG92ZXIsXFxyXFxuLmxlYWZsZXQtYmFyIGE6Zm9jdXMge1xcclxcblxcdGJhY2tncm91bmQtY29sb3I6ICNmNGY0ZjQ7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWJhciBhOmZpcnN0LWNoaWxkIHtcXHJcXG5cXHRib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA0cHg7XFxyXFxuXFx0Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDRweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYmFyIGE6bGFzdC1jaGlsZCB7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNHB4O1xcclxcblxcdGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbTogbm9uZTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYmFyIGEubGVhZmxldC1kaXNhYmxlZCB7XFxyXFxuXFx0Y3Vyc29yOiBkZWZhdWx0O1xcclxcblxcdGJhY2tncm91bmQtY29sb3I6ICNmNGY0ZjQ7XFxyXFxuXFx0Y29sb3I6ICNiYmI7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciBhIHtcXHJcXG5cXHR3aWR0aDogMzBweDtcXHJcXG5cXHRoZWlnaHQ6IDMwcHg7XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDMwcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciBhOmZpcnN0LWNoaWxkIHtcXHJcXG5cXHRib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAycHg7XFxyXFxuXFx0Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDJweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtYmFyIGE6bGFzdC1jaGlsZCB7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMnB4O1xcclxcblxcdGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XFxyXFxuXFx0fVxcclxcblxcclxcbi8qIHpvb20gY29udHJvbCAqL1xcclxcblxcclxcbi5sZWFmbGV0LWNvbnRyb2wtem9vbS1pbixcXHJcXG4ubGVhZmxldC1jb250cm9sLXpvb20tb3V0IHtcXHJcXG5cXHRmb250OiBib2xkIDE4cHggJ0x1Y2lkYSBDb25zb2xlJywgTW9uYWNvLCBtb25vc3BhY2U7XFxyXFxuXFx0dGV4dC1pbmRlbnQ6IDFweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtY29udHJvbC16b29tLWluLCAubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLXpvb20tb3V0ICB7XFxyXFxuXFx0Zm9udC1zaXplOiAyMnB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBsYXllcnMgY29udHJvbCAqL1xcclxcblxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzIHtcXHJcXG5cXHRib3gtc2hhZG93OiAwIDFweCA1cHggcmdiYSgwLDAsMCwwLjQpO1xcclxcblxcdGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogNXB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycy10b2dnbGUge1xcclxcblxcdGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxyXFxuXFx0d2lkdGg6IDM2cHg7XFxyXFxuXFx0aGVpZ2h0OiAzNnB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1yZXRpbmEgLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlIHtcXHJcXG5cXHRiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpO1xcclxcblxcdGJhY2tncm91bmQtc2l6ZTogMjZweCAyNnB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLWxheWVycy10b2dnbGUge1xcclxcblxcdHdpZHRoOiA0NHB4O1xcclxcblxcdGhlaWdodDogNDRweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMgLmxlYWZsZXQtY29udHJvbC1sYXllcnMtbGlzdCxcXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycy1leHBhbmRlZCAubGVhZmxldC1jb250cm9sLWxheWVycy10b2dnbGUge1xcclxcblxcdGRpc3BsYXk6IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWV4cGFuZGVkIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWxpc3Qge1xcclxcblxcdGRpc3BsYXk6IGJsb2NrO1xcclxcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMtZXhwYW5kZWQge1xcclxcblxcdHBhZGRpbmc6IDZweCAxMHB4IDZweCA2cHg7XFxyXFxuXFx0Y29sb3I6ICMzMzM7XFxyXFxuXFx0YmFja2dyb3VuZDogI2ZmZjtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMtc2Nyb2xsYmFyIHtcXHJcXG5cXHRvdmVyZmxvdy15OiBzY3JvbGw7XFxyXFxuXFx0b3ZlcmZsb3cteDogaGlkZGVuO1xcclxcblxcdHBhZGRpbmctcmlnaHQ6IDVweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMtc2VsZWN0b3Ige1xcclxcblxcdG1hcmdpbi10b3A6IDJweDtcXHJcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFx0dG9wOiAxcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzIGxhYmVsIHtcXHJcXG5cXHRkaXNwbGF5OiBibG9jaztcXHJcXG5cXHRmb250LXNpemU6IDEzcHg7XFxyXFxuXFx0Zm9udC1zaXplOiAxLjA4MzMzZW07XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXNlcGFyYXRvciB7XFxyXFxuXFx0aGVpZ2h0OiAwO1xcclxcblxcdGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1xcclxcblxcdG1hcmdpbjogNXB4IC0xMHB4IDVweCAtNnB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG4vKiBEZWZhdWx0IGljb24gVVJMcyAqL1xcclxcbi5sZWFmbGV0LWRlZmF1bHQtaWNvbi1wYXRoIHsgLyogdXNlZCBvbmx5IGluIHBhdGgtZ3Vlc3NpbmcgaGV1cmlzdGljLCBzZWUgTC5JY29uLkRlZmF1bHQgKi9cXHJcXG5cXHRiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBhdHRyaWJ1dGlvbiBhbmQgc2NhbGUgY29udHJvbHMgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiB7XFxyXFxuXFx0YmFja2dyb3VuZDogI2ZmZjtcXHJcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLWF0dHJpYnV0aW9uLFxcclxcbi5sZWFmbGV0LWNvbnRyb2wtc2NhbGUtbGluZSB7XFxyXFxuXFx0cGFkZGluZzogMCA1cHg7XFxyXFxuXFx0Y29sb3I6ICMzMzM7XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDEuNDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiBhIHtcXHJcXG5cXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24gYTpob3ZlcixcXHJcXG4ubGVhZmxldC1jb250cm9sLWF0dHJpYnV0aW9uIGE6Zm9jdXMge1xcclxcblxcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1hdHRyaWJ1dGlvbi1mbGFnIHtcXHJcXG5cXHRkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXHJcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXHJcXG5cXHR3aWR0aDogMWVtO1xcclxcblxcdGhlaWdodDogMC42NjY5ZW07XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWxlZnQgLmxlYWZsZXQtY29udHJvbC1zY2FsZSB7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IDVweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYm90dG9tIC5sZWFmbGV0LWNvbnRyb2wtc2NhbGUge1xcclxcblxcdG1hcmdpbi1ib3R0b206IDVweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1zY2FsZS1saW5lIHtcXHJcXG5cXHRib3JkZXI6IDJweCBzb2xpZCAjNzc3O1xcclxcblxcdGJvcmRlci10b3A6IG5vbmU7XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDEuMTtcXHJcXG5cXHRwYWRkaW5nOiAycHggNXB4IDFweDtcXHJcXG5cXHR3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcblxcdC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG5cXHQgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuXFx0YmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcclxcblxcdHRleHQtc2hhZG93OiAxcHggMXB4ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtc2NhbGUtbGluZTpub3QoOmZpcnN0LWNoaWxkKSB7XFxyXFxuXFx0Ym9yZGVyLXRvcDogMnB4IHNvbGlkICM3Nzc7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbTogbm9uZTtcXHJcXG5cXHRtYXJnaW4tdG9wOiAtMnB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLXNjYWxlLWxpbmU6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKSB7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICM3Nzc7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24sXFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtY29udHJvbC1sYXllcnMsXFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtYmFyIHtcXHJcXG5cXHRib3gtc2hhZG93OiBub25lO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLWxheWVycyxcXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1iYXIge1xcclxcblxcdGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMCwwLDAsMC4yKTtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBwb3B1cCAqL1xcclxcblxcclxcbi5sZWFmbGV0LXBvcHVwIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcdG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlciB7XFxyXFxuXFx0cGFkZGluZzogMXB4O1xcclxcblxcdHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMTJweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtY29udGVudCB7XFxyXFxuXFx0bWFyZ2luOiAxM3B4IDI0cHggMTNweCAyMHB4O1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxLjM7XFxyXFxuXFx0Zm9udC1zaXplOiAxM3B4O1xcclxcblxcdGZvbnQtc2l6ZTogMS4wODMzM2VtO1xcclxcblxcdG1pbi1oZWlnaHQ6IDFweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtY29udGVudCBwIHtcXHJcXG5cXHRtYXJnaW46IDE3cHggMDtcXHJcXG5cXHRtYXJnaW46IDEuM2VtIDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXRpcC1jb250YWluZXIge1xcclxcblxcdHdpZHRoOiA0MHB4O1xcclxcblxcdGhlaWdodDogMjBweDtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0bGVmdDogNTAlO1xcclxcblxcdG1hcmdpbi10b3A6IC0xcHg7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IC0yMHB4O1xcclxcblxcdG92ZXJmbG93OiBoaWRkZW47XFxyXFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXRpcCB7XFxyXFxuXFx0d2lkdGg6IDE3cHg7XFxyXFxuXFx0aGVpZ2h0OiAxN3B4O1xcclxcblxcdHBhZGRpbmc6IDFweDtcXHJcXG5cXHJcXG5cXHRtYXJnaW46IC0xMHB4IGF1dG8gMDtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogYXV0bztcXHJcXG5cXHJcXG5cXHQtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHQgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHQgICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHQgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyLFxcclxcbi5sZWFmbGV0LXBvcHVwLXRpcCB7XFxyXFxuXFx0YmFja2dyb3VuZDogd2hpdGU7XFxyXFxuXFx0Y29sb3I6ICMzMzM7XFxyXFxuXFx0Ym94LXNoYWRvdzogMCAzcHggMTRweCByZ2JhKDAsMCwwLDAuNCk7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciBhLmxlYWZsZXQtcG9wdXAtY2xvc2UtYnV0dG9uIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0dG9wOiAwO1xcclxcblxcdHJpZ2h0OiAwO1xcclxcblxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0d2lkdGg6IDI0cHg7XFxyXFxuXFx0aGVpZ2h0OiAyNHB4O1xcclxcblxcdGZvbnQ6IDE2cHgvMjRweCBUYWhvbWEsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XFxyXFxuXFx0Y29sb3I6ICM3NTc1NzU7XFxyXFxuXFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcblxcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250YWluZXIgYS5sZWFmbGV0LXBvcHVwLWNsb3NlLWJ1dHRvbjpob3ZlcixcXHJcXG4ubGVhZmxldC1jb250YWluZXIgYS5sZWFmbGV0LXBvcHVwLWNsb3NlLWJ1dHRvbjpmb2N1cyB7XFxyXFxuXFx0Y29sb3I6ICM1ODU4NTg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXNjcm9sbGVkIHtcXHJcXG5cXHRvdmVyZmxvdzogYXV0bztcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyIHtcXHJcXG5cXHQtbXMtem9vbTogMTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtcG9wdXAtdGlwIHtcXHJcXG5cXHR3aWR0aDogMjRweDtcXHJcXG5cXHRtYXJnaW46IDAgYXV0bztcXHJcXG5cXHJcXG5cXHQtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9MC43MDcxMDY3OCwgTTEyPTAuNzA3MTA2NzgsIE0yMT0tMC43MDcxMDY3OCwgTTIyPTAuNzA3MTA2NzgpXFxcIjtcXHJcXG5cXHRmaWx0ZXI6IHByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5NYXRyaXgoTTExPTAuNzA3MTA2NzgsIE0xMj0wLjcwNzEwNjc4LCBNMjE9LTAuNzA3MTA2NzgsIE0yMj0wLjcwNzEwNjc4KTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtY29udHJvbC16b29tLFxcclxcbi5sZWFmbGV0LW9sZGllIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLFxcclxcbi5sZWFmbGV0LW9sZGllIC5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlcixcXHJcXG4ubGVhZmxldC1vbGRpZSAubGVhZmxldC1wb3B1cC10aXAge1xcclxcblxcdGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcbi8qIGRpdiBpY29uICovXFxyXFxuXFxyXFxuLmxlYWZsZXQtZGl2LWljb24ge1xcclxcblxcdGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuXFx0Ym9yZGVyOiAxcHggc29saWQgIzY2NjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuLyogVG9vbHRpcCAqL1xcclxcbi8qIEJhc2Ugc3R5bGVzIGZvciB0aGUgZWxlbWVudCB0aGF0IGhhcyBhIHRvb2x0aXAgKi9cXHJcXG4ubGVhZmxldC10b29sdGlwIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0cGFkZGluZzogNnB4O1xcclxcblxcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuXFx0Ym9yZGVyOiAxcHggc29saWQgI2ZmZjtcXHJcXG5cXHRib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuXFx0Y29sb3I6ICMyMjI7XFxyXFxuXFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG5cXHQtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFx0LW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdHVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcblxcdGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsMCwwLDAuNCk7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAubGVhZmxldC1pbnRlcmFjdGl2ZSB7XFxyXFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b29sdGlwLXRvcDpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC1ib3R0b206YmVmb3JlLFxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC1yaWdodDpiZWZvcmUge1xcclxcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG5cXHRib3JkZXI6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG5cXHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG5cXHRjb250ZW50OiBcXFwiXFxcIjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLyogRGlyZWN0aW9ucyAqL1xcclxcblxcclxcbi5sZWFmbGV0LXRvb2x0aXAtYm90dG9tIHtcXHJcXG5cXHRtYXJnaW4tdG9wOiA2cHg7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtdG9wIHtcXHJcXG5cXHRtYXJnaW4tdG9wOiAtNnB4O1xcclxcbn1cXHJcXG4ubGVhZmxldC10b29sdGlwLWJvdHRvbTpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC10b3A6YmVmb3JlIHtcXHJcXG5cXHRsZWZ0OiA1MCU7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IC02cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtdG9wOmJlZm9yZSB7XFxyXFxuXFx0Ym90dG9tOiAwO1xcclxcblxcdG1hcmdpbi1ib3R0b206IC0xMnB4O1xcclxcblxcdGJvcmRlci10b3AtY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtYm90dG9tOmJlZm9yZSB7XFxyXFxuXFx0dG9wOiAwO1xcclxcblxcdG1hcmdpbi10b3A6IC0xMnB4O1xcclxcblxcdG1hcmdpbi1sZWZ0OiAtNnB4O1xcclxcblxcdGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdCB7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IC02cHg7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtcmlnaHQge1xcclxcblxcdG1hcmdpbi1sZWZ0OiA2cHg7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC1yaWdodDpiZWZvcmUge1xcclxcblxcdHRvcDogNTAlO1xcclxcblxcdG1hcmdpbi10b3A6IC02cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUge1xcclxcblxcdHJpZ2h0OiAwO1xcclxcblxcdG1hcmdpbi1yaWdodDogLTEycHg7XFxyXFxuXFx0Ym9yZGVyLWxlZnQtY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtcmlnaHQ6YmVmb3JlIHtcXHJcXG5cXHRsZWZ0OiAwO1xcclxcblxcdG1hcmdpbi1sZWZ0OiAtMTJweDtcXHJcXG5cXHRib3JkZXItcmlnaHQtY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcblxcclxcbi8qIFByaW50aW5nICovXFxyXFxuXFxyXFxuQG1lZGlhIHByaW50IHtcXHJcXG5cXHQvKiBQcmV2ZW50IHByaW50ZXJzIGZyb20gcmVtb3ZpbmcgYmFja2dyb3VuZC1pbWFnZXMgb2YgY29udHJvbHMuICovXFxyXFxuXFx0LmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0XFx0LXdlYmtpdC1wcmludC1jb2xvci1hZGp1c3Q6IGV4YWN0O1xcclxcblxcdFxcdHByaW50LWNvbG9yLWFkanVzdDogZXhhY3Q7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG9CQUFvQjs7QUFFcEI7Ozs7Ozs7Ozs7Q0FVQyxrQkFBa0I7Q0FDbEIsT0FBTztDQUNQLE1BQU07Q0FDTjtBQUNEO0NBQ0MsZ0JBQWdCO0NBQ2hCO0FBQ0Q7OztDQUdDLHlCQUF5QjtJQUN0QixzQkFBc0I7U0FDakIsaUJBQWlCO0dBQ3ZCLHVCQUF1QjtDQUN6QjtBQUNELGtEQUFrRDtBQUNsRDtDQUNDLHVCQUF1QjtBQUN4QjtBQUNBLG1GQUFtRjtBQUNuRjtDQUNDLDBDQUEwQztDQUMxQztBQUNELHFFQUFxRTtBQUNyRTtDQUNDLGFBQWE7Q0FDYixjQUFjO0NBQ2QsNkJBQTZCO0NBQzdCO0FBQ0Q7O0NBRUMsY0FBYztDQUNkO0FBQ0QsZ0dBQWdHO0FBQ2hHLHFGQUFxRjtBQUNyRjtDQUNDLDBCQUEwQjtDQUMxQiwyQkFBMkI7Q0FDM0I7QUFDRDs7Ozs7Q0FLQywwQkFBMEI7Q0FDMUIsMkJBQTJCO0NBQzNCLFdBQVc7Q0FDWCxVQUFVO0NBQ1Y7O0FBRUQ7Q0FDQyxzRUFBc0U7Q0FDdEUsNEJBQTRCO0FBQzdCOztBQUVBO0NBQ0MsNkJBQTZCO0NBQzdCLHlCQUF5QjtDQUN6QjtBQUNEO0NBQ0MsNEJBQTRCO0NBQzVCLHFEQUFxRDtDQUNyRCxrQkFBa0I7Q0FDbEIsd0JBQXdCO0FBQ3pCO0FBQ0E7Q0FDQyxzQkFBc0I7Q0FDdEIsa0JBQWtCO0FBQ25CO0FBQ0E7Q0FDQyx3Q0FBd0M7QUFDekM7QUFDQTtDQUNDLG9EQUFvRDtBQUNyRDtBQUNBO0NBQ0MsZUFBZTtDQUNmLGtCQUFrQjtDQUNsQjtBQUNEO0NBQ0MsbUJBQW1CO0NBQ25CO0FBQ0Q7Q0FDQyxRQUFRO0NBQ1IsU0FBUztDQUNULDJCQUEyQjtNQUN0QixzQkFBc0I7Q0FDM0IsWUFBWTtDQUNaO0FBQ0QsdUVBQXVFO0FBQ3ZFO0NBQ0Msc0JBQXNCO0NBQ3RCOztBQUVELHdCQUF3QixZQUFZLEVBQUU7O0FBRXRDLHdCQUF3QixZQUFZLEVBQUU7QUFDdEMsd0JBQXdCLFlBQVksRUFBRTtBQUN0Qyx3QkFBd0IsWUFBWSxFQUFFO0FBQ3RDLHdCQUF3QixZQUFZLEVBQUU7QUFDdEMsMEJBQTBCLFlBQVksRUFBRTtBQUN4Qyx3QkFBd0IsWUFBWSxFQUFFOztBQUV0QywyQkFBMkIsWUFBWSxFQUFFO0FBQ3pDLDJCQUEyQixZQUFZLEVBQUU7O0FBRXpDO0NBQ0MsVUFBVTtDQUNWLFdBQVc7Q0FDWDtBQUNEO0NBQ0MsMkJBQTJCO0NBQzNCLHFCQUFxQjtDQUNyQixrQkFBa0I7Q0FDbEI7OztBQUdELHdCQUF3Qjs7QUFFeEI7Q0FDQyxrQkFBa0I7Q0FDbEIsWUFBWTtDQUNaLDhCQUE4QixFQUFFLDhCQUE4QjtDQUM5RCxvQkFBb0I7Q0FDcEI7QUFDRDs7Q0FFQyxrQkFBa0I7Q0FDbEIsYUFBYTtDQUNiLG9CQUFvQjtDQUNwQjtBQUNEO0NBQ0MsTUFBTTtDQUNOO0FBQ0Q7Q0FDQyxRQUFRO0NBQ1I7QUFDRDtDQUNDLFNBQVM7Q0FDVDtBQUNEO0NBQ0MsT0FBTztDQUNQO0FBQ0Q7Q0FDQyxXQUFXO0NBQ1gsV0FBVztDQUNYO0FBQ0Q7Q0FDQyxZQUFZO0NBQ1o7QUFDRDtDQUNDLGdCQUFnQjtDQUNoQjtBQUNEO0NBQ0MsbUJBQW1CO0NBQ25CO0FBQ0Q7Q0FDQyxpQkFBaUI7Q0FDakI7QUFDRDtDQUNDLGtCQUFrQjtDQUNsQjs7O0FBR0QsNkJBQTZCOztBQUU3QjtDQUNDLFVBQVU7Q0FDVix1Q0FBdUM7SUFDcEMsb0NBQW9DO1NBQy9CLCtCQUErQjtDQUN2QztBQUNEO0NBQ0MsVUFBVTtDQUNWO0FBQ0Q7Q0FDQyw2QkFBNkI7S0FDekIseUJBQXlCO1NBQ3JCLHFCQUFxQjtDQUM3QjtBQUNEO0NBQ0Msc0JBQXNCO0FBQ3ZCOztBQUVBO0NBQ0Msb0VBQW9FO0lBQ2pFLGlFQUFpRTtTQUM1RCw0REFBNEQ7Q0FDcEU7QUFDRDs7Q0FFQyx3QkFBd0I7SUFDckIscUJBQXFCO1NBQ2hCLGdCQUFnQjtDQUN4Qjs7QUFFRDtDQUNDLGtCQUFrQjtDQUNsQjs7O0FBR0QsWUFBWTs7QUFFWjtDQUNDLGVBQWU7Q0FDZjtBQUNEO0NBQ0Msb0JBQW9CO0NBQ3BCLG9CQUFvQjtDQUNwQixvQkFBb0I7Q0FDcEI7QUFDRDs7Q0FFQyxpQkFBaUI7Q0FDakI7QUFDRDs7Q0FFQyxZQUFZO0NBQ1o7QUFDRDs7O0NBR0MsWUFBWTtDQUNaLHdCQUF3QjtDQUN4Qix3QkFBd0I7Q0FDeEIsd0JBQXdCO0NBQ3hCOztBQUVELG9DQUFvQztBQUNwQzs7Ozs7Q0FLQyxvQkFBb0I7Q0FDcEI7O0FBRUQ7Ozs7Q0FJQyw4QkFBOEIsRUFBRSw4QkFBOEI7Q0FDOUQsb0JBQW9CO0NBQ3BCOztBQUVELGtCQUFrQjs7QUFFbEI7Q0FDQyxnQkFBZ0I7Q0FDaEIsbUJBQW1CO0NBQ25CO0FBQ0Q7Q0FDQyxjQUFjO0NBQ2Q7QUFDRDtDQUNDLHVCQUF1QjtDQUN2QixpQ0FBaUM7Q0FDakM7OztBQUdELHVCQUF1QjtBQUN2QjtDQUNDLDJEQUEyRDtDQUMzRCxlQUFlO0NBQ2Ysa0JBQWtCO0NBQ2xCLGdCQUFnQjtDQUNoQjs7O0FBR0QsMkJBQTJCOztBQUUzQjtDQUNDLHNDQUFzQztDQUN0QyxrQkFBa0I7Q0FDbEI7QUFDRDtDQUNDLHNCQUFzQjtDQUN0Qiw2QkFBNkI7Q0FDN0IsV0FBVztDQUNYLFlBQVk7Q0FDWixpQkFBaUI7Q0FDakIsY0FBYztDQUNkLGtCQUFrQjtDQUNsQixxQkFBcUI7Q0FDckIsWUFBWTtDQUNaO0FBQ0Q7O0NBRUMsNEJBQTRCO0NBQzVCLDRCQUE0QjtDQUM1QixjQUFjO0NBQ2Q7QUFDRDs7Q0FFQyx5QkFBeUI7Q0FDekI7QUFDRDtDQUNDLDJCQUEyQjtDQUMzQiw0QkFBNEI7Q0FDNUI7QUFDRDtDQUNDLDhCQUE4QjtDQUM5QiwrQkFBK0I7Q0FDL0IsbUJBQW1CO0NBQ25CO0FBQ0Q7Q0FDQyxlQUFlO0NBQ2YseUJBQXlCO0NBQ3pCLFdBQVc7Q0FDWDs7QUFFRDtDQUNDLFdBQVc7Q0FDWCxZQUFZO0NBQ1osaUJBQWlCO0NBQ2pCO0FBQ0Q7Q0FDQywyQkFBMkI7Q0FDM0IsNEJBQTRCO0NBQzVCO0FBQ0Q7Q0FDQyw4QkFBOEI7Q0FDOUIsK0JBQStCO0NBQy9COztBQUVELGlCQUFpQjs7QUFFakI7O0NBRUMsbURBQW1EO0NBQ25ELGdCQUFnQjtDQUNoQjs7QUFFRDtDQUNDLGVBQWU7Q0FDZjs7O0FBR0QsbUJBQW1COztBQUVuQjtDQUNDLHFDQUFxQztDQUNyQyxnQkFBZ0I7Q0FDaEIsa0JBQWtCO0NBQ2xCO0FBQ0Q7Q0FDQyx5REFBd0M7Q0FDeEMsV0FBVztDQUNYLFlBQVk7Q0FDWjtBQUNEO0NBQ0MseURBQTJDO0NBQzNDLDBCQUEwQjtDQUMxQjtBQUNEO0NBQ0MsV0FBVztDQUNYLFlBQVk7Q0FDWjtBQUNEOztDQUVDLGFBQWE7Q0FDYjtBQUNEO0NBQ0MsY0FBYztDQUNkLGtCQUFrQjtDQUNsQjtBQUNEO0NBQ0MseUJBQXlCO0NBQ3pCLFdBQVc7Q0FDWCxnQkFBZ0I7Q0FDaEI7QUFDRDtDQUNDLGtCQUFrQjtDQUNsQixrQkFBa0I7Q0FDbEIsa0JBQWtCO0NBQ2xCO0FBQ0Q7Q0FDQyxlQUFlO0NBQ2Ysa0JBQWtCO0NBQ2xCLFFBQVE7Q0FDUjtBQUNEO0NBQ0MsY0FBYztDQUNkLGVBQWU7Q0FDZixvQkFBb0I7Q0FDcEI7QUFDRDtDQUNDLFNBQVM7Q0FDVCwwQkFBMEI7Q0FDMUIsMEJBQTBCO0NBQzFCOztBQUVELHNCQUFzQjtBQUN0Qiw2QkFBNkIsNkRBQTZEO0NBQ3pGLHlEQUE2QztDQUM3Qzs7O0FBR0QsbUNBQW1DOztBQUVuQztDQUNDLGdCQUFnQjtDQUNoQixvQ0FBb0M7Q0FDcEMsU0FBUztDQUNUO0FBQ0Q7O0NBRUMsY0FBYztDQUNkLFdBQVc7Q0FDWCxnQkFBZ0I7Q0FDaEI7QUFDRDtDQUNDLHFCQUFxQjtDQUNyQjtBQUNEOztDQUVDLDBCQUEwQjtDQUMxQjtBQUNEO0NBQ0MsMEJBQTBCO0NBQzFCLG1DQUFtQztDQUNuQyxVQUFVO0NBQ1YsZ0JBQWdCO0NBQ2hCO0FBQ0Q7Q0FDQyxnQkFBZ0I7Q0FDaEI7QUFDRDtDQUNDLGtCQUFrQjtDQUNsQjtBQUNEO0NBQ0Msc0JBQXNCO0NBQ3RCLGdCQUFnQjtDQUNoQixnQkFBZ0I7Q0FDaEIsb0JBQW9CO0NBQ3BCLG1CQUFtQjtDQUNuQiwyQkFBMkI7TUFDdEIsc0JBQXNCO0NBQzNCLG9DQUFvQztDQUNwQyx5QkFBeUI7Q0FDekI7QUFDRDtDQUNDLDBCQUEwQjtDQUMxQixtQkFBbUI7Q0FDbkIsZ0JBQWdCO0NBQ2hCO0FBQ0Q7Q0FDQyw2QkFBNkI7Q0FDN0I7O0FBRUQ7OztDQUdDLGdCQUFnQjtDQUNoQjtBQUNEOztDQUVDLGlDQUFpQztDQUNqQyw0QkFBNEI7Q0FDNUI7OztBQUdELFVBQVU7O0FBRVY7Q0FDQyxrQkFBa0I7Q0FDbEIsa0JBQWtCO0NBQ2xCLG1CQUFtQjtDQUNuQjtBQUNEO0NBQ0MsWUFBWTtDQUNaLGdCQUFnQjtDQUNoQixtQkFBbUI7Q0FDbkI7QUFDRDtDQUNDLDJCQUEyQjtDQUMzQixnQkFBZ0I7Q0FDaEIsZUFBZTtDQUNmLG9CQUFvQjtDQUNwQixlQUFlO0NBQ2Y7QUFDRDtDQUNDLGNBQWM7Q0FDZCxlQUFlO0NBQ2Y7QUFDRDtDQUNDLFdBQVc7Q0FDWCxZQUFZO0NBQ1osa0JBQWtCO0NBQ2xCLFNBQVM7Q0FDVCxnQkFBZ0I7Q0FDaEIsa0JBQWtCO0NBQ2xCLGdCQUFnQjtDQUNoQixvQkFBb0I7Q0FDcEI7QUFDRDtDQUNDLFdBQVc7Q0FDWCxZQUFZO0NBQ1osWUFBWTs7Q0FFWixvQkFBb0I7Q0FDcEIsb0JBQW9COztDQUVwQixnQ0FBZ0M7SUFDN0IsNkJBQTZCO0tBQzVCLDRCQUE0QjtTQUN4Qix3QkFBd0I7Q0FDaEM7QUFDRDs7Q0FFQyxpQkFBaUI7Q0FDakIsV0FBVztDQUNYLHNDQUFzQztDQUN0QztBQUNEO0NBQ0Msa0JBQWtCO0NBQ2xCLE1BQU07Q0FDTixRQUFRO0NBQ1IsWUFBWTtDQUNaLGtCQUFrQjtDQUNsQixXQUFXO0NBQ1gsWUFBWTtDQUNaLDJDQUEyQztDQUMzQyxjQUFjO0NBQ2QscUJBQXFCO0NBQ3JCLHVCQUF1QjtDQUN2QjtBQUNEOztDQUVDLGNBQWM7Q0FDZDtBQUNEO0NBQ0MsY0FBYztDQUNkOztBQUVEO0NBQ0MsV0FBVztDQUNYO0FBQ0Q7Q0FDQyxXQUFXO0NBQ1gsY0FBYzs7Q0FFZCx1SEFBdUg7Q0FDdkgsaUhBQWlIO0NBQ2pIOztBQUVEOzs7O0NBSUMsc0JBQXNCO0NBQ3RCOzs7QUFHRCxhQUFhOztBQUViO0NBQ0MsZ0JBQWdCO0NBQ2hCLHNCQUFzQjtDQUN0Qjs7O0FBR0QsWUFBWTtBQUNaLG1EQUFtRDtBQUNuRDtDQUNDLGtCQUFrQjtDQUNsQixZQUFZO0NBQ1osc0JBQXNCO0NBQ3RCLHNCQUFzQjtDQUN0QixrQkFBa0I7Q0FDbEIsV0FBVztDQUNYLG1CQUFtQjtDQUNuQix5QkFBeUI7Q0FDekIsc0JBQXNCO0NBQ3RCLHFCQUFxQjtDQUNyQixpQkFBaUI7Q0FDakIsb0JBQW9CO0NBQ3BCLHFDQUFxQztDQUNyQztBQUNEO0NBQ0MsZUFBZTtDQUNmLG9CQUFvQjtDQUNwQjtBQUNEOzs7O0NBSUMsa0JBQWtCO0NBQ2xCLG9CQUFvQjtDQUNwQiw2QkFBNkI7Q0FDN0IsdUJBQXVCO0NBQ3ZCLFdBQVc7Q0FDWDs7QUFFRCxlQUFlOztBQUVmO0NBQ0MsZUFBZTtBQUNoQjtBQUNBO0NBQ0MsZ0JBQWdCO0FBQ2pCO0FBQ0E7O0NBRUMsU0FBUztDQUNULGlCQUFpQjtDQUNqQjtBQUNEO0NBQ0MsU0FBUztDQUNULG9CQUFvQjtDQUNwQixzQkFBc0I7Q0FDdEI7QUFDRDtDQUNDLE1BQU07Q0FDTixpQkFBaUI7Q0FDakIsaUJBQWlCO0NBQ2pCLHlCQUF5QjtDQUN6QjtBQUNEO0NBQ0MsaUJBQWlCO0FBQ2xCO0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7QUFDQTs7Q0FFQyxRQUFRO0NBQ1IsZ0JBQWdCO0NBQ2hCO0FBQ0Q7Q0FDQyxRQUFRO0NBQ1IsbUJBQW1CO0NBQ25CLHVCQUF1QjtDQUN2QjtBQUNEO0NBQ0MsT0FBTztDQUNQLGtCQUFrQjtDQUNsQix3QkFBd0I7Q0FDeEI7O0FBRUQsYUFBYTs7QUFFYjtDQUNDLGtFQUFrRTtDQUNsRTtFQUNDLGlDQUFpQztFQUNqQyx5QkFBeUI7RUFDekI7Q0FDRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiByZXF1aXJlZCBzdHlsZXMgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1wYW5lLFxcclxcbi5sZWFmbGV0LXRpbGUsXFxyXFxuLmxlYWZsZXQtbWFya2VyLWljb24sXFxyXFxuLmxlYWZsZXQtbWFya2VyLXNoYWRvdyxcXHJcXG4ubGVhZmxldC10aWxlLWNvbnRhaW5lcixcXHJcXG4ubGVhZmxldC1wYW5lID4gc3ZnLFxcclxcbi5sZWFmbGV0LXBhbmUgPiBjYW52YXMsXFxyXFxuLmxlYWZsZXQtem9vbS1ib3gsXFxyXFxuLmxlYWZsZXQtaW1hZ2UtbGF5ZXIsXFxyXFxuLmxlYWZsZXQtbGF5ZXIge1xcclxcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRsZWZ0OiAwO1xcclxcblxcdHRvcDogMDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIHtcXHJcXG5cXHRvdmVyZmxvdzogaGlkZGVuO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10aWxlLFxcclxcbi5sZWFmbGV0LW1hcmtlci1pY29uLFxcclxcbi5sZWFmbGV0LW1hcmtlci1zaGFkb3cge1xcclxcblxcdC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFx0ICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG5cXHQgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdCAgLXdlYmtpdC11c2VyLWRyYWc6IG5vbmU7XFxyXFxuXFx0fVxcclxcbi8qIFByZXZlbnRzIElFMTEgZnJvbSBoaWdobGlnaHRpbmcgdGlsZXMgaW4gYmx1ZSAqL1xcclxcbi5sZWFmbGV0LXRpbGU6OnNlbGVjdGlvbiB7XFxyXFxuXFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcbi8qIFNhZmFyaSByZW5kZXJzIG5vbi1yZXRpbmEgdGlsZSBvbiByZXRpbmEgYmV0dGVyIHdpdGggdGhpcywgYnV0IENocm9tZSBpcyB3b3JzZSAqL1xcclxcbi5sZWFmbGV0LXNhZmFyaSAubGVhZmxldC10aWxlIHtcXHJcXG5cXHRpbWFnZS1yZW5kZXJpbmc6IC13ZWJraXQtb3B0aW1pemUtY29udHJhc3Q7XFxyXFxuXFx0fVxcclxcbi8qIGhhY2sgdGhhdCBwcmV2ZW50cyBodyBsYXllcnMgXFxcInN0cmV0Y2hpbmdcXFwiIHdoZW4gbG9hZGluZyBuZXcgdGlsZXMgKi9cXHJcXG4ubGVhZmxldC1zYWZhcmkgLmxlYWZsZXQtdGlsZS1jb250YWluZXIge1xcclxcblxcdHdpZHRoOiAxNjAwcHg7XFxyXFxuXFx0aGVpZ2h0OiAxNjAwcHg7XFxyXFxuXFx0LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LW1hcmtlci1pY29uLFxcclxcbi5sZWFmbGV0LW1hcmtlci1zaGFkb3cge1xcclxcblxcdGRpc3BsYXk6IGJsb2NrO1xcclxcblxcdH1cXHJcXG4vKiAubGVhZmxldC1jb250YWluZXIgc3ZnOiByZXNldCBzdmcgbWF4LXdpZHRoIGRlY2xlcmF0aW9uIHNoaXBwZWQgaW4gSm9vbWxhISAoam9vbWxhLm9yZykgMy54ICovXFxyXFxuLyogLmxlYWZsZXQtY29udGFpbmVyIGltZzogbWFwIGlzIGJyb2tlbiBpbiBGRiBpZiB5b3UgaGF2ZSBtYXgtd2lkdGg6IDEwMCUgb24gdGlsZXMgKi9cXHJcXG4ubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtb3ZlcmxheS1wYW5lIHN2ZyB7XFxyXFxuXFx0bWF4LXdpZHRoOiBub25lICFpbXBvcnRhbnQ7XFxyXFxuXFx0bWF4LWhlaWdodDogbm9uZSAhaW1wb3J0YW50O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtbWFya2VyLXBhbmUgaW1nLFxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC1zaGFkb3ctcGFuZSBpbWcsXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIC5sZWFmbGV0LXRpbGUtcGFuZSBpbWcsXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIGltZy5sZWFmbGV0LWltYWdlLWxheWVyLFxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC10aWxlIHtcXHJcXG5cXHRtYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDtcXHJcXG5cXHRtYXgtaGVpZ2h0OiBub25lICFpbXBvcnRhbnQ7XFxyXFxuXFx0d2lkdGg6IGF1dG87XFxyXFxuXFx0cGFkZGluZzogMDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIGltZy5sZWFmbGV0LXRpbGUge1xcclxcblxcdC8qIFNlZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjAwMTIwICovXFxyXFxuXFx0bWl4LWJsZW5kLW1vZGU6IHBsdXMtbGlnaHRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmxlYWZsZXQtY29udGFpbmVyLmxlYWZsZXQtdG91Y2gtem9vbSB7XFxyXFxuXFx0LW1zLXRvdWNoLWFjdGlvbjogcGFuLXggcGFuLXk7XFxyXFxuXFx0dG91Y2gtYWN0aW9uOiBwYW4teCBwYW4teTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udGFpbmVyLmxlYWZsZXQtdG91Y2gtZHJhZyB7XFxyXFxuXFx0LW1zLXRvdWNoLWFjdGlvbjogcGluY2gtem9vbTtcXHJcXG5cXHQvKiBGYWxsYmFjayBmb3IgRkYgd2hpY2ggZG9lc24ndCBzdXBwb3J0IHBpbmNoLXpvb20gKi9cXHJcXG5cXHR0b3VjaC1hY3Rpb246IG5vbmU7XFxyXFxuXFx0dG91Y2gtYWN0aW9uOiBwaW5jaC16b29tO1xcclxcbn1cXHJcXG4ubGVhZmxldC1jb250YWluZXIubGVhZmxldC10b3VjaC1kcmFnLmxlYWZsZXQtdG91Y2gtem9vbSB7XFxyXFxuXFx0LW1zLXRvdWNoLWFjdGlvbjogbm9uZTtcXHJcXG5cXHR0b3VjaC1hY3Rpb246IG5vbmU7XFxyXFxufVxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciB7XFxyXFxuXFx0LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG59XFxyXFxuLmxlYWZsZXQtY29udGFpbmVyIGEge1xcclxcblxcdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSg1MSwgMTgxLCAyMjksIDAuNCk7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRpbGUge1xcclxcblxcdGZpbHRlcjogaW5oZXJpdDtcXHJcXG5cXHR2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRpbGUtbG9hZGVkIHtcXHJcXG5cXHR2aXNpYmlsaXR5OiBpbmhlcml0O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC16b29tLWJveCB7XFxyXFxuXFx0d2lkdGg6IDA7XFxyXFxuXFx0aGVpZ2h0OiAwO1xcclxcblxcdC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG5cXHQgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuXFx0ei1pbmRleDogODAwO1xcclxcblxcdH1cXHJcXG4vKiB3b3JrYXJvdW5kIGZvciBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODgzMTkgKi9cXHJcXG4ubGVhZmxldC1vdmVybGF5LXBhbmUgc3ZnIHtcXHJcXG5cXHQtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG4ubGVhZmxldC1wYW5lICAgICAgICAgeyB6LWluZGV4OiA0MDA7IH1cXHJcXG5cXHJcXG4ubGVhZmxldC10aWxlLXBhbmUgICAgeyB6LWluZGV4OiAyMDA7IH1cXHJcXG4ubGVhZmxldC1vdmVybGF5LXBhbmUgeyB6LWluZGV4OiA0MDA7IH1cXHJcXG4ubGVhZmxldC1zaGFkb3ctcGFuZSAgeyB6LWluZGV4OiA1MDA7IH1cXHJcXG4ubGVhZmxldC1tYXJrZXItcGFuZSAgeyB6LWluZGV4OiA2MDA7IH1cXHJcXG4ubGVhZmxldC10b29sdGlwLXBhbmUgICB7IHotaW5kZXg6IDY1MDsgfVxcclxcbi5sZWFmbGV0LXBvcHVwLXBhbmUgICB7IHotaW5kZXg6IDcwMDsgfVxcclxcblxcclxcbi5sZWFmbGV0LW1hcC1wYW5lIGNhbnZhcyB7IHotaW5kZXg6IDEwMDsgfVxcclxcbi5sZWFmbGV0LW1hcC1wYW5lIHN2ZyAgICB7IHotaW5kZXg6IDIwMDsgfVxcclxcblxcclxcbi5sZWFmbGV0LXZtbC1zaGFwZSB7XFxyXFxuXFx0d2lkdGg6IDFweDtcXHJcXG5cXHRoZWlnaHQ6IDFweDtcXHJcXG5cXHR9XFxyXFxuLmx2bWwge1xcclxcblxcdGJlaGF2aW9yOiB1cmwoI2RlZmF1bHQjVk1MKTtcXHJcXG5cXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBjb250cm9sIHBvc2l0aW9uaW5nICovXFxyXFxuXFxyXFxuLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcdHotaW5kZXg6IDgwMDtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogdmlzaWJsZVBhaW50ZWQ7IC8qIElFIDktMTAgZG9lc24ndCBoYXZlIGF1dG8gKi9cXHJcXG5cXHRwb2ludGVyLWV2ZW50czogYXV0bztcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtdG9wLFxcclxcbi5sZWFmbGV0LWJvdHRvbSB7XFxyXFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdHotaW5kZXg6IDEwMDA7XFxyXFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvcCB7XFxyXFxuXFx0dG9wOiAwO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1yaWdodCB7XFxyXFxuXFx0cmlnaHQ6IDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWJvdHRvbSB7XFxyXFxuXFx0Ym90dG9tOiAwO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1sZWZ0IHtcXHJcXG5cXHRsZWZ0OiAwO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sIHtcXHJcXG5cXHRmbG9hdDogbGVmdDtcXHJcXG5cXHRjbGVhcjogYm90aDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcmlnaHQgLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0ZmxvYXQ6IHJpZ2h0O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b3AgLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0bWFyZ2luLXRvcDogMTBweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYm90dG9tIC5sZWFmbGV0LWNvbnRyb2wge1xcclxcblxcdG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWxlZnQgLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXJpZ2h0IC5sZWFmbGV0LWNvbnRyb2wge1xcclxcblxcdG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuLyogem9vbSBhbmQgZmFkZSBhbmltYXRpb25zICovXFxyXFxuXFxyXFxuLmxlYWZsZXQtZmFkZS1hbmltIC5sZWFmbGV0LXBvcHVwIHtcXHJcXG5cXHRvcGFjaXR5OiAwO1xcclxcblxcdC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGxpbmVhcjtcXHJcXG5cXHQgICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBsaW5lYXI7XFxyXFxuXFx0ICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgbGluZWFyO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1mYWRlLWFuaW0gLmxlYWZsZXQtbWFwLXBhbmUgLmxlYWZsZXQtcG9wdXAge1xcclxcblxcdG9wYWNpdHk6IDE7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXpvb20tYW5pbWF0ZWQge1xcclxcblxcdC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xcclxcblxcdCAgICAtbXMtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xcclxcblxcdCAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xcclxcblxcdH1cXHJcXG5zdmcubGVhZmxldC16b29tLWFuaW1hdGVkIHtcXHJcXG5cXHR3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcclxcbn1cXHJcXG5cXHJcXG4ubGVhZmxldC16b29tLWFuaW0gLmxlYWZsZXQtem9vbS1hbmltYXRlZCB7XFxyXFxuXFx0LXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjI1cyBjdWJpYy1iZXppZXIoMCwwLDAuMjUsMSk7XFxyXFxuXFx0ICAgLW1vei10cmFuc2l0aW9uOiAgICAtbW96LXRyYW5zZm9ybSAwLjI1cyBjdWJpYy1iZXppZXIoMCwwLDAuMjUsMSk7XFxyXFxuXFx0ICAgICAgICB0cmFuc2l0aW9uOiAgICAgICAgIHRyYW5zZm9ybSAwLjI1cyBjdWJpYy1iZXppZXIoMCwwLDAuMjUsMSk7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXpvb20tYW5pbSAubGVhZmxldC10aWxlLFxcclxcbi5sZWFmbGV0LXBhbi1hbmltIC5sZWFmbGV0LXRpbGUge1xcclxcblxcdC13ZWJraXQtdHJhbnNpdGlvbjogbm9uZTtcXHJcXG5cXHQgICAtbW96LXRyYW5zaXRpb246IG5vbmU7XFxyXFxuXFx0ICAgICAgICB0cmFuc2l0aW9uOiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG4ubGVhZmxldC16b29tLWFuaW0gLmxlYWZsZXQtem9vbS1oaWRlIHtcXHJcXG5cXHR2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcbi8qIGN1cnNvcnMgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1pbnRlcmFjdGl2ZSB7XFxyXFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1ncmFiIHtcXHJcXG5cXHRjdXJzb3I6IC13ZWJraXQtZ3JhYjtcXHJcXG5cXHRjdXJzb3I6ICAgIC1tb3otZ3JhYjtcXHJcXG5cXHRjdXJzb3I6ICAgICAgICAgZ3JhYjtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY3Jvc3NoYWlyLFxcclxcbi5sZWFmbGV0LWNyb3NzaGFpciAubGVhZmxldC1pbnRlcmFjdGl2ZSB7XFxyXFxuXFx0Y3Vyc29yOiBjcm9zc2hhaXI7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXBhbmUsXFxyXFxuLmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0Y3Vyc29yOiBhdXRvO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1kcmFnZ2luZyAubGVhZmxldC1ncmFiLFxcclxcbi5sZWFmbGV0LWRyYWdnaW5nIC5sZWFmbGV0LWdyYWIgLmxlYWZsZXQtaW50ZXJhY3RpdmUsXFxyXFxuLmxlYWZsZXQtZHJhZ2dpbmcgLmxlYWZsZXQtbWFya2VyLWRyYWdnYWJsZSB7XFxyXFxuXFx0Y3Vyc29yOiBtb3ZlO1xcclxcblxcdGN1cnNvcjogLXdlYmtpdC1ncmFiYmluZztcXHJcXG5cXHRjdXJzb3I6ICAgIC1tb3otZ3JhYmJpbmc7XFxyXFxuXFx0Y3Vyc29yOiAgICAgICAgIGdyYWJiaW5nO1xcclxcblxcdH1cXHJcXG5cXHJcXG4vKiBtYXJrZXIgJiBvdmVybGF5cyBpbnRlcmFjdGl2aXR5ICovXFxyXFxuLmxlYWZsZXQtbWFya2VyLWljb24sXFxyXFxuLmxlYWZsZXQtbWFya2VyLXNoYWRvdyxcXHJcXG4ubGVhZmxldC1pbWFnZS1sYXllcixcXHJcXG4ubGVhZmxldC1wYW5lID4gc3ZnIHBhdGgsXFxyXFxuLmxlYWZsZXQtdGlsZS1jb250YWluZXIge1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcblxcdH1cXHJcXG5cXHJcXG4ubGVhZmxldC1tYXJrZXItaWNvbi5sZWFmbGV0LWludGVyYWN0aXZlLFxcclxcbi5sZWFmbGV0LWltYWdlLWxheWVyLmxlYWZsZXQtaW50ZXJhY3RpdmUsXFxyXFxuLmxlYWZsZXQtcGFuZSA+IHN2ZyBwYXRoLmxlYWZsZXQtaW50ZXJhY3RpdmUsXFxyXFxuc3ZnLmxlYWZsZXQtaW1hZ2UtbGF5ZXIubGVhZmxldC1pbnRlcmFjdGl2ZSBwYXRoIHtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogdmlzaWJsZVBhaW50ZWQ7IC8qIElFIDktMTAgZG9lc24ndCBoYXZlIGF1dG8gKi9cXHJcXG5cXHRwb2ludGVyLWV2ZW50czogYXV0bztcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLyogdmlzdWFsIHR3ZWFrcyAqL1xcclxcblxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciB7XFxyXFxuXFx0YmFja2dyb3VuZDogI2RkZDtcXHJcXG5cXHRvdXRsaW5lLW9mZnNldDogMXB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250YWluZXIgYSB7XFxyXFxuXFx0Y29sb3I6ICMwMDc4QTg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXpvb20tYm94IHtcXHJcXG5cXHRib3JkZXI6IDJweCBkb3R0ZWQgIzM4ZjtcXHJcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcbi8qIGdlbmVyYWwgdHlwb2dyYXBoeSAqL1xcclxcbi5sZWFmbGV0LWNvbnRhaW5lciB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxyXFxuXFx0Zm9udC1zaXplOiAxMnB4O1xcclxcblxcdGZvbnQtc2l6ZTogMC43NXJlbTtcXHJcXG5cXHRsaW5lLWhlaWdodDogMS41O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBnZW5lcmFsIHRvb2xiYXIgc3R5bGVzICovXFxyXFxuXFxyXFxuLmxlYWZsZXQtYmFyIHtcXHJcXG5cXHRib3gtc2hhZG93OiAwIDFweCA1cHggcmdiYSgwLDAsMCwwLjY1KTtcXHJcXG5cXHRib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWJhciBhIHtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcblxcdGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjO1xcclxcblxcdHdpZHRoOiAyNnB4O1xcclxcblxcdGhlaWdodDogMjZweDtcXHJcXG5cXHRsaW5lLWhlaWdodDogMjZweDtcXHJcXG5cXHRkaXNwbGF5OiBibG9jaztcXHJcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcblxcdGNvbG9yOiBibGFjaztcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYmFyIGEsXFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlIHtcXHJcXG5cXHRiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCUgNTAlO1xcclxcblxcdGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWJhciBhOmhvdmVyLFxcclxcbi5sZWFmbGV0LWJhciBhOmZvY3VzIHtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1iYXIgYTpmaXJzdC1jaGlsZCB7XFxyXFxuXFx0Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNHB4O1xcclxcblxcdGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWJhciBhOmxhc3QtY2hpbGQge1xcclxcblxcdGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDtcXHJcXG5cXHRib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xcclxcblxcdGJvcmRlci1ib3R0b206IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWJhciBhLmxlYWZsZXQtZGlzYWJsZWQge1xcclxcblxcdGN1cnNvcjogZGVmYXVsdDtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xcclxcblxcdGNvbG9yOiAjYmJiO1xcclxcblxcdH1cXHJcXG5cXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1iYXIgYSB7XFxyXFxuXFx0d2lkdGg6IDMwcHg7XFxyXFxuXFx0aGVpZ2h0OiAzMHB4O1xcclxcblxcdGxpbmUtaGVpZ2h0OiAzMHB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1iYXIgYTpmaXJzdC1jaGlsZCB7XFxyXFxuXFx0Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMnB4O1xcclxcblxcdGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAycHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciBhOmxhc3QtY2hpbGQge1xcclxcblxcdGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDJweDtcXHJcXG5cXHRib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMnB4O1xcclxcblxcdH1cXHJcXG5cXHJcXG4vKiB6b29tIGNvbnRyb2wgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250cm9sLXpvb20taW4sXFxyXFxuLmxlYWZsZXQtY29udHJvbC16b29tLW91dCB7XFxyXFxuXFx0Zm9udDogYm9sZCAxOHB4ICdMdWNpZGEgQ29uc29sZScsIE1vbmFjbywgbW9ub3NwYWNlO1xcclxcblxcdHRleHQtaW5kZW50OiAxcHg7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWNvbnRyb2wtem9vbS1pbiwgLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtY29udHJvbC16b29tLW91dCAge1xcclxcblxcdGZvbnQtc2l6ZTogMjJweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuLyogbGF5ZXJzIGNvbnRyb2wgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycyB7XFxyXFxuXFx0Ym94LXNoYWRvdzogMCAxcHggNXB4IHJnYmEoMCwwLDAsMC40KTtcXHJcXG5cXHRiYWNrZ3JvdW5kOiAjZmZmO1xcclxcblxcdGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlIHtcXHJcXG5cXHRiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL2xheWVycy5wbmcpO1xcclxcblxcdHdpZHRoOiAzNnB4O1xcclxcblxcdGhlaWdodDogMzZweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcmV0aW5hIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXRvZ2dsZSB7XFxyXFxuXFx0YmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9sYXllcnMtMngucG5nKTtcXHJcXG5cXHRiYWNrZ3JvdW5kLXNpemU6IDI2cHggMjZweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlIHtcXHJcXG5cXHR3aWR0aDogNDRweDtcXHJcXG5cXHRoZWlnaHQ6IDQ0cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWxpc3QsXFxyXFxuLmxlYWZsZXQtY29udHJvbC1sYXllcnMtZXhwYW5kZWQgLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlIHtcXHJcXG5cXHRkaXNwbGF5OiBub25lO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycy1leHBhbmRlZCAubGVhZmxldC1jb250cm9sLWxheWVycy1saXN0IHtcXHJcXG5cXHRkaXNwbGF5OiBibG9jaztcXHJcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWV4cGFuZGVkIHtcXHJcXG5cXHRwYWRkaW5nOiA2cHggMTBweCA2cHggNnB4O1xcclxcblxcdGNvbG9yOiAjMzMzO1xcclxcblxcdGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXNjcm9sbGJhciB7XFxyXFxuXFx0b3ZlcmZsb3cteTogc2Nyb2xsO1xcclxcblxcdG92ZXJmbG93LXg6IGhpZGRlbjtcXHJcXG5cXHRwYWRkaW5nLXJpZ2h0OiA1cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXNlbGVjdG9yIHtcXHJcXG5cXHRtYXJnaW4tdG9wOiAycHg7XFxyXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcdHRvcDogMXB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycyBsYWJlbCB7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxuXFx0Zm9udC1zaXplOiAxM3B4O1xcclxcblxcdGZvbnQtc2l6ZTogMS4wODMzM2VtO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLWxheWVycy1zZXBhcmF0b3Ige1xcclxcblxcdGhlaWdodDogMDtcXHJcXG5cXHRib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDtcXHJcXG5cXHRtYXJnaW46IDVweCAtMTBweCA1cHggLTZweDtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLyogRGVmYXVsdCBpY29uIFVSTHMgKi9cXHJcXG4ubGVhZmxldC1kZWZhdWx0LWljb24tcGF0aCB7IC8qIHVzZWQgb25seSBpbiBwYXRoLWd1ZXNzaW5nIGhldXJpc3RpYywgc2VlIEwuSWNvbi5EZWZhdWx0ICovXFxyXFxuXFx0YmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9tYXJrZXItaWNvbi5wbmcpO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBhdHRyaWJ1dGlvbiBhbmQgc2NhbGUgY29udHJvbHMgKi9cXHJcXG5cXHJcXG4ubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiB7XFxyXFxuXFx0YmFja2dyb3VuZDogI2ZmZjtcXHJcXG5cXHRiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLWF0dHJpYnV0aW9uLFxcclxcbi5sZWFmbGV0LWNvbnRyb2wtc2NhbGUtbGluZSB7XFxyXFxuXFx0cGFkZGluZzogMCA1cHg7XFxyXFxuXFx0Y29sb3I6ICMzMzM7XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDEuNDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiBhIHtcXHJcXG5cXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24gYTpob3ZlcixcXHJcXG4ubGVhZmxldC1jb250cm9sLWF0dHJpYnV0aW9uIGE6Zm9jdXMge1xcclxcblxcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1hdHRyaWJ1dGlvbi1mbGFnIHtcXHJcXG5cXHRkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXHJcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDtcXHJcXG5cXHR3aWR0aDogMWVtO1xcclxcblxcdGhlaWdodDogMC42NjY5ZW07XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWxlZnQgLmxlYWZsZXQtY29udHJvbC1zY2FsZSB7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IDVweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtYm90dG9tIC5sZWFmbGV0LWNvbnRyb2wtc2NhbGUge1xcclxcblxcdG1hcmdpbi1ib3R0b206IDVweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtY29udHJvbC1zY2FsZS1saW5lIHtcXHJcXG5cXHRib3JkZXI6IDJweCBzb2xpZCAjNzc3O1xcclxcblxcdGJvcmRlci10b3A6IG5vbmU7XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDEuMTtcXHJcXG5cXHRwYWRkaW5nOiAycHggNXB4IDFweDtcXHJcXG5cXHR3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcblxcdC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG5cXHQgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuXFx0YmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcclxcblxcdHRleHQtc2hhZG93OiAxcHggMXB4ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRyb2wtc2NhbGUtbGluZTpub3QoOmZpcnN0LWNoaWxkKSB7XFxyXFxuXFx0Ym9yZGVyLXRvcDogMnB4IHNvbGlkICM3Nzc7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbTogbm9uZTtcXHJcXG5cXHRtYXJnaW4tdG9wOiAtMnB4O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250cm9sLXNjYWxlLWxpbmU6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKSB7XFxyXFxuXFx0Ym9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICM3Nzc7XFxyXFxuXFx0fVxcclxcblxcclxcbi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24sXFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtY29udHJvbC1sYXllcnMsXFxyXFxuLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtYmFyIHtcXHJcXG5cXHRib3gtc2hhZG93OiBub25lO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLWxheWVycyxcXHJcXG4ubGVhZmxldC10b3VjaCAubGVhZmxldC1iYXIge1xcclxcblxcdGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMCwwLDAsMC4yKTtcXHJcXG5cXHRiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHJcXG4vKiBwb3B1cCAqL1xcclxcblxcclxcbi5sZWFmbGV0LXBvcHVwIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcdG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlciB7XFxyXFxuXFx0cGFkZGluZzogMXB4O1xcclxcblxcdHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMTJweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtY29udGVudCB7XFxyXFxuXFx0bWFyZ2luOiAxM3B4IDI0cHggMTNweCAyMHB4O1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxLjM7XFxyXFxuXFx0Zm9udC1zaXplOiAxM3B4O1xcclxcblxcdGZvbnQtc2l6ZTogMS4wODMzM2VtO1xcclxcblxcdG1pbi1oZWlnaHQ6IDFweDtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtY29udGVudCBwIHtcXHJcXG5cXHRtYXJnaW46IDE3cHggMDtcXHJcXG5cXHRtYXJnaW46IDEuM2VtIDA7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXRpcC1jb250YWluZXIge1xcclxcblxcdHdpZHRoOiA0MHB4O1xcclxcblxcdGhlaWdodDogMjBweDtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0bGVmdDogNTAlO1xcclxcblxcdG1hcmdpbi10b3A6IC0xcHg7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IC0yMHB4O1xcclxcblxcdG92ZXJmbG93OiBoaWRkZW47XFxyXFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXRpcCB7XFxyXFxuXFx0d2lkdGg6IDE3cHg7XFxyXFxuXFx0aGVpZ2h0OiAxN3B4O1xcclxcblxcdHBhZGRpbmc6IDFweDtcXHJcXG5cXHJcXG5cXHRtYXJnaW46IC0xMHB4IGF1dG8gMDtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogYXV0bztcXHJcXG5cXHJcXG5cXHQtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHQgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHQgICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHQgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyLFxcclxcbi5sZWFmbGV0LXBvcHVwLXRpcCB7XFxyXFxuXFx0YmFja2dyb3VuZDogd2hpdGU7XFxyXFxuXFx0Y29sb3I6ICMzMzM7XFxyXFxuXFx0Ym94LXNoYWRvdzogMCAzcHggMTRweCByZ2JhKDAsMCwwLDAuNCk7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LWNvbnRhaW5lciBhLmxlYWZsZXQtcG9wdXAtY2xvc2UtYnV0dG9uIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0dG9wOiAwO1xcclxcblxcdHJpZ2h0OiAwO1xcclxcblxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFx0d2lkdGg6IDI0cHg7XFxyXFxuXFx0aGVpZ2h0OiAyNHB4O1xcclxcblxcdGZvbnQ6IDE2cHgvMjRweCBUYWhvbWEsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XFxyXFxuXFx0Y29sb3I6ICM3NTc1NzU7XFxyXFxuXFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcblxcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC1jb250YWluZXIgYS5sZWFmbGV0LXBvcHVwLWNsb3NlLWJ1dHRvbjpob3ZlcixcXHJcXG4ubGVhZmxldC1jb250YWluZXIgYS5sZWFmbGV0LXBvcHVwLWNsb3NlLWJ1dHRvbjpmb2N1cyB7XFxyXFxuXFx0Y29sb3I6ICM1ODU4NTg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXBvcHVwLXNjcm9sbGVkIHtcXHJcXG5cXHRvdmVyZmxvdzogYXV0bztcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyIHtcXHJcXG5cXHQtbXMtem9vbTogMTtcXHJcXG5cXHR9XFxyXFxuLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtcG9wdXAtdGlwIHtcXHJcXG5cXHR3aWR0aDogMjRweDtcXHJcXG5cXHRtYXJnaW46IDAgYXV0bztcXHJcXG5cXHJcXG5cXHQtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9MC43MDcxMDY3OCwgTTEyPTAuNzA3MTA2NzgsIE0yMT0tMC43MDcxMDY3OCwgTTIyPTAuNzA3MTA2NzgpXFxcIjtcXHJcXG5cXHRmaWx0ZXI6IHByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5NYXRyaXgoTTExPTAuNzA3MTA2NzgsIE0xMj0wLjcwNzEwNjc4LCBNMjE9LTAuNzA3MTA2NzgsIE0yMj0wLjcwNzEwNjc4KTtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtY29udHJvbC16b29tLFxcclxcbi5sZWFmbGV0LW9sZGllIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLFxcclxcbi5sZWFmbGV0LW9sZGllIC5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlcixcXHJcXG4ubGVhZmxldC1vbGRpZSAubGVhZmxldC1wb3B1cC10aXAge1xcclxcblxcdGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XFxyXFxuXFx0fVxcclxcblxcclxcblxcclxcbi8qIGRpdiBpY29uICovXFxyXFxuXFxyXFxuLmxlYWZsZXQtZGl2LWljb24ge1xcclxcblxcdGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuXFx0Ym9yZGVyOiAxcHggc29saWQgIzY2NjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFxyXFxuLyogVG9vbHRpcCAqL1xcclxcbi8qIEJhc2Ugc3R5bGVzIGZvciB0aGUgZWxlbWVudCB0aGF0IGhhcyBhIHRvb2x0aXAgKi9cXHJcXG4ubGVhZmxldC10b29sdGlwIHtcXHJcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0cGFkZGluZzogNnB4O1xcclxcblxcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuXFx0Ym9yZGVyOiAxcHggc29saWQgI2ZmZjtcXHJcXG5cXHRib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuXFx0Y29sb3I6ICMyMjI7XFxyXFxuXFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG5cXHQtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFx0LW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdHVzZXItc2VsZWN0OiBub25lO1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcblxcdGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsMCwwLDAuNCk7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAubGVhZmxldC1pbnRlcmFjdGl2ZSB7XFxyXFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcclxcblxcdHBvaW50ZXItZXZlbnRzOiBhdXRvO1xcclxcblxcdH1cXHJcXG4ubGVhZmxldC10b29sdGlwLXRvcDpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC1ib3R0b206YmVmb3JlLFxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC1yaWdodDpiZWZvcmUge1xcclxcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG5cXHRib3JkZXI6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG5cXHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG5cXHRjb250ZW50OiBcXFwiXFxcIjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuLyogRGlyZWN0aW9ucyAqL1xcclxcblxcclxcbi5sZWFmbGV0LXRvb2x0aXAtYm90dG9tIHtcXHJcXG5cXHRtYXJnaW4tdG9wOiA2cHg7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtdG9wIHtcXHJcXG5cXHRtYXJnaW4tdG9wOiAtNnB4O1xcclxcbn1cXHJcXG4ubGVhZmxldC10b29sdGlwLWJvdHRvbTpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC10b3A6YmVmb3JlIHtcXHJcXG5cXHRsZWZ0OiA1MCU7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IC02cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtdG9wOmJlZm9yZSB7XFxyXFxuXFx0Ym90dG9tOiAwO1xcclxcblxcdG1hcmdpbi1ib3R0b206IC0xMnB4O1xcclxcblxcdGJvcmRlci10b3AtY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtYm90dG9tOmJlZm9yZSB7XFxyXFxuXFx0dG9wOiAwO1xcclxcblxcdG1hcmdpbi10b3A6IC0xMnB4O1xcclxcblxcdG1hcmdpbi1sZWZ0OiAtNnB4O1xcclxcblxcdGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdCB7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IC02cHg7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtcmlnaHQge1xcclxcblxcdG1hcmdpbi1sZWZ0OiA2cHg7XFxyXFxufVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUsXFxyXFxuLmxlYWZsZXQtdG9vbHRpcC1yaWdodDpiZWZvcmUge1xcclxcblxcdHRvcDogNTAlO1xcclxcblxcdG1hcmdpbi10b3A6IC02cHg7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUge1xcclxcblxcdHJpZ2h0OiAwO1xcclxcblxcdG1hcmdpbi1yaWdodDogLTEycHg7XFxyXFxuXFx0Ym9yZGVyLWxlZnQtY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcbi5sZWFmbGV0LXRvb2x0aXAtcmlnaHQ6YmVmb3JlIHtcXHJcXG5cXHRsZWZ0OiAwO1xcclxcblxcdG1hcmdpbi1sZWZ0OiAtMTJweDtcXHJcXG5cXHRib3JkZXItcmlnaHQtY29sb3I6ICNmZmY7XFxyXFxuXFx0fVxcclxcblxcclxcbi8qIFByaW50aW5nICovXFxyXFxuXFxyXFxuQG1lZGlhIHByaW50IHtcXHJcXG5cXHQvKiBQcmV2ZW50IHByaW50ZXJzIGZyb20gcmVtb3ZpbmcgYmFja2dyb3VuZC1pbWFnZXMgb2YgY29udHJvbHMuICovXFxyXFxuXFx0LmxlYWZsZXQtY29udHJvbCB7XFxyXFxuXFx0XFx0LXdlYmtpdC1wcmludC1jb2xvci1hZGp1c3Q6IGV4YWN0O1xcclxcblxcdFxcdHByaW50LWNvbG9yLWFkanVzdDogZXhhY3Q7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO1xuZnVuY3Rpb24gTGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBNZyhhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiBOZyhhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gT2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9UGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1RZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZOZyhmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPUxnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1SZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1MZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVNnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1RZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz1SZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPUxnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj1TZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9VGcoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7TWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtNZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtNZyhiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZOZyhrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9TGcoYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPVRnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1SZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1MZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1TZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTtNZyhhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPVFnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIFVnPU9nKCEwKSxWZz1PZyghMSksV2c9VWYobnVsbCksWGc9bnVsbCxZZz1udWxsLFpnPW51bGw7ZnVuY3Rpb24gJGcoKXtaZz1ZZz1YZz1udWxsfWZ1bmN0aW9uIGFoKGEpe3ZhciBiPVdnLmN1cnJlbnQ7RShXZyk7YS5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gYmgoYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1cbmZ1bmN0aW9uIGNoKGEsYil7WGc9YTtaZz1ZZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKGRoPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1mdW5jdGlvbiBlaChhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoWmchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09WWcpe2lmKG51bGw9PT1YZyl0aHJvdyBFcnJvcihwKDMwOCkpO1lnPWE7WGcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIFlnPVlnLm5leHQ9YTtyZXR1cm4gYn12YXIgZmg9bnVsbDtmdW5jdGlvbiBnaChhKXtudWxsPT09Zmg/Zmg9W2FdOmZoLnB1c2goYSl9XG5mdW5jdGlvbiBoaChhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxnaChiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gaWgoYSxkKX1mdW5jdGlvbiBpaChhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyIGpoPSExO2Z1bmN0aW9uIGtoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBsaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBtaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIG5oKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBpaChhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsZ2goZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIGloKGEsYyl9ZnVuY3Rpb24gb2goYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIHBoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO2poPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOmpoPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtyaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgdGg9e30sdWg9VWYodGgpLHZoPVVmKHRoKSx3aD1VZih0aCk7ZnVuY3Rpb24geGgoYSl7aWYoYT09PXRoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB5aChhLGIpe0cod2gsYik7Ryh2aCxhKTtHKHVoLHRoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUodWgpO0codWgsYil9ZnVuY3Rpb24gemgoKXtFKHVoKTtFKHZoKTtFKHdoKX1mdW5jdGlvbiBBaChhKXt4aCh3aC5jdXJyZW50KTt2YXIgYj14aCh1aC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKHZoLGEpLEcodWgsYykpfWZ1bmN0aW9uIEJoKGEpe3ZoLmN1cnJlbnQ9PT1hJiYoRSh1aCksRSh2aCkpfXZhciBMPVVmKDApO1xuZnVuY3Rpb24gQ2goYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIERoPVtdO1xuZnVuY3Rpb24gRWgoKXtmb3IodmFyIGE9MDthPERoLmxlbmd0aDthKyspRGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtEaC5sZW5ndGg9MH12YXIgRmg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixHaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxIaD0wLE09bnVsbCxOPW51bGwsTz1udWxsLEloPSExLEpoPSExLEtoPTAsTGg9MDtmdW5jdGlvbiBQKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gTWgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIE5oKGEsYixjLGQsZSxmKXtIaD1mO009YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO0ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/T2g6UGg7YT1jKGQsZSk7aWYoSmgpe2Y9MDtkb3tKaD0hMTtLaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtPPU49bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7RmguY3VycmVudD1RaDthPWMoZCxlKX13aGlsZShKaCl9RmguY3VycmVudD1SaDtiPW51bGwhPT1OJiZudWxsIT09Ti5uZXh0O0hoPTA7Tz1OPU09bnVsbDtJaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goKXt2YXIgYT0wIT09S2g7S2g9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlPU89YTpPPU8ubmV4dD1hO3JldHVybiBPfWZ1bmN0aW9uIFVoKCl7aWYobnVsbD09PU4pe3ZhciBhPU0uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU4ubmV4dDt2YXIgYj1udWxsPT09Tz9NLm1lbW9pemVkU3RhdGU6Ty5uZXh0O2lmKG51bGwhPT1iKU89YixOPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO049YTthPXttZW1vaXplZFN0YXRlOk4ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ti5iYXNlU3RhdGUsYmFzZVF1ZXVlOk4uYmFzZVF1ZXVlLHF1ZXVlOk4ucXVldWUsbmV4dDpudWxsfTtudWxsPT09Tz9NLm1lbW9pemVkU3RhdGU9Tz1hOk89Ty5uZXh0PWF9cmV0dXJuIE99XG5mdW5jdGlvbiBWaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIFdoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TixlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoSGgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtNLmxhbmVzfD1tO3JofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KGRoPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE0ubGFuZXN8PWYscmh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBYaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoZGg9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBZaCgpe31cbmZ1bmN0aW9uIFpoKGEsYil7dmFyIGM9TSxkPVVoKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxkaD0hMCk7ZD1kLnF1ZXVlOyRoKGFpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PU8mJk8ubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVEpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIGRpKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9TS51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxNLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7ZWkoYikmJmZpKGEpfWZ1bmN0aW9uIGFpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe2VpKGIpJiZmaShhKX0pfWZ1bmN0aW9uIGVpKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIGZpKGEpe3ZhciBiPWloKGEsMSk7bnVsbCE9PWImJmdpKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIGhpKGEpe3ZhciBiPVRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6VmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1paS5iaW5kKG51bGwsTSxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gYmkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9TS51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxNLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIGppKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBraShhLGIsYyxkKXt2YXIgZT1UaCgpO00uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBsaShhLGIsYyxkKXt2YXIgZT1VaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1OKXt2YXIgZz1OLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJk1oKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWJpKGIsYyxmLGQpO3JldHVybn19TS5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsZixkKX1mdW5jdGlvbiBtaShhLGIpe3JldHVybiBraSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiAkaChhLGIpe3JldHVybiBsaSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiBuaShhLGIpe3JldHVybiBsaSg0LDIsYSxiKX1mdW5jdGlvbiBvaShhLGIpe3JldHVybiBsaSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHBpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gcWkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBsaSg0LDQscGkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gcmkoKXt9ZnVuY3Rpb24gc2koYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiB0aShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiB1aShhLGIsYyl7aWYoMD09PShIaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsZGg9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTS5sYW5lc3w9YyxyaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gdmkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsR2gudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiB3aSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiB4aShhLGIsYyl7dmFyIGQ9eWkoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoemkoYSkpQWkoYixjKTtlbHNlIGlmKGM9aGgoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPVIoKTtnaShjLGEsZCxlKTtCaShjLGIsZCl9fVxuZnVuY3Rpb24gaWkoYSxiLGMpe3ZhciBkPXlpKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHppKGEpKUFpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLGdoKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9aGgoYSxiLGUsZCk7bnVsbCE9PWMmJihlPVIoKSxnaShjLGEsZCxlKSxCaShjLGIsZCkpfX1cbmZ1bmN0aW9uIHppKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09TXx8bnVsbCE9PWImJmI9PT1NfWZ1bmN0aW9uIEFpKGEsYil7Smg9SWg9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBCaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIFJoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpQLHVzZUNvbnRleHQ6UCx1c2VFZmZlY3Q6UCx1c2VJbXBlcmF0aXZlSGFuZGxlOlAsdXNlSW5zZXJ0aW9uRWZmZWN0OlAsdXNlTGF5b3V0RWZmZWN0OlAsdXNlTWVtbzpQLHVzZVJlZHVjZXI6UCx1c2VSZWY6UCx1c2VTdGF0ZTpQLHVzZURlYnVnVmFsdWU6UCx1c2VEZWZlcnJlZFZhbHVlOlAsdXNlVHJhbnNpdGlvbjpQLHVzZU11dGFibGVTb3VyY2U6UCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpQLHVzZUlkOlAsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxPaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtUaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDptaSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4ga2koNDE5NDMwOCxcbjQscGkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBraSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGtpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9VGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9VGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD14aS5iaW5kKG51bGwsTSxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5UaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpoaSx1c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIFRoKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9aGkoITEpLGI9YVswXTthPXZpLmJpbmQobnVsbCxhWzFdKTtUaCgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU0sZT1UaCgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1RKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7bWkoYWkuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9VGgoKSxiPVEuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9S2grKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPUxoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxQaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6c2ksdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpxaSx1c2VJbnNlcnRpb25FZmZlY3Q6bmksdXNlTGF5b3V0RWZmZWN0Om9pLHVzZU1lbW86dGksdXNlUmVkdWNlcjpXaCx1c2VSZWY6amksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gV2goVmgpfSxcbnVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1VaCgpO3JldHVybiB1aShiLE4ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVdoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp3aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFFoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpzaSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDokaCx1c2VJbXBlcmF0aXZlSGFuZGxlOnFpLHVzZUluc2VydGlvbkVmZmVjdDpuaSx1c2VMYXlvdXRFZmZlY3Q6b2ksdXNlTWVtbzp0aSx1c2VSZWR1Y2VyOlhoLHVzZVJlZjpqaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBYaChWaCl9LHVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1VaCgpO3JldHVybiBudWxsPT09XG5OP2IubWVtb2l6ZWRTdGF0ZT1hOnVpKGIsTi5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9WGgoVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOndpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gQ2koYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9ZnVuY3Rpb24gRGkoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEVpPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPVIoKSxlPXlpKGEpLGY9bWgoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1uaChhLGYsZSk7bnVsbCE9PWImJihnaShiLGEsZSxkKSxvaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPVIoKSxlPXlpKGEpLGY9bWgoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPW5oKGEsZixlKTtudWxsIT09YiYmKGdpKGIsYSxlLGQpLG9oKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9UigpLGQ9XG55aShhKSxlPW1oKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1uaChhLGUsZCk7bnVsbCE9PWImJihnaShiLGEsZCxjKSxvaChiLGEsZCkpfX07ZnVuY3Rpb24gRmkoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1laChmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9RWk7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBIaShhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmRWkuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBJaShhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPXt9O2toKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9ZWgoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRGkoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmRWkuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCkscWgoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9ZnVuY3Rpb24gSmkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fVxuZnVuY3Rpb24gS2koYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19ZnVuY3Rpb24gTGkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE1pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE5pKGEsYixjKXtjPW1oKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe09pfHwoT2k9ITAsUGk9ZCk7TGkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBRaShhLGIsYyl7Yz1taCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtMaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1SaT9SaT1uZXcgU2V0KFt0aGlzXSk6UmkuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTWk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1UaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBVaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPW1oKC0xLDEpLGIudGFnPTIsbmgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFdpPXVhLlJlYWN0Q3VycmVudE93bmVyLGRoPSExO2Z1bmN0aW9uIFhpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/VmcoYixudWxsLGMsZCk6VWcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBZaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7Y2goYixlKTtkPU5oKGEsYixjLGQsZixlKTtjPVNoKCk7aWYobnVsbCE9PWEmJiFkaClyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGkoYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYWooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsYmooYSxiLGYsZCxlKTthPVJnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiBaaShhLGIsZSl9Yi5mbGFnc3w9MTthPVBnKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gYmooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoZGg9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKGRoPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsWmkoYSxiLGUpfXJldHVybiBjaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGVqLGZqKSxmanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGVqLGZqKSxmanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZWosZmopO2ZqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhlaixmaiksZmp8PWQ7WGkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gZ2ooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO2NoKGIsZSk7Yz1OaChhLGIsYyxkLGYsZSk7ZD1TaCgpO2lmKG51bGwhPT1hJiYhZGgpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtjaChiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlpaihhLGIpLEdpKGIsYyxkKSxJaShiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1laChsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmSGkoYixnLGQsbCk7amg9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtxaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fGpoPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKERpKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD1qaHx8RmkoYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7bGgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpDaShiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1laChrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmSGkoYixnLGQsayk7amg9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO3FoKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fGpoPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKERpKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD1qaHx8RmkoYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGpqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGpqKGEsYixjLGQsZSxmKXtnaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSxaaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtXaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVVnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9VWcoYixudWxsLGgsZikpOlhpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7eWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbGooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtYaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbWo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBuaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBvaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1MLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTCxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cGooZyxkLDAsbnVsbCksYT1UZyhhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1uaihjKSxiLm1lbW9pemVkU3RhdGU9bWosYSk6cWooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gcmooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPVBnKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9UGcoaCxmKTooZj1UZyhmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP25qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1tajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD1QZyhmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiBxaihhLGIpe2I9cGooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHNqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtVZyhiLGEuY2hpbGQsbnVsbCxjKTthPXFqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiByaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUtpKEVycm9yKHAoNDIyKSkpLHNqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1waih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1UZyhmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJlVnKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1uaihnKTtiLm1lbW9pemVkU3RhdGU9bWo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHNqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9S2koZixkLHZvaWQgMCk7cmV0dXJuIHNqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoZGh8fGgpe2Q9UTtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLGloKGEsZSksZ2koZCxhLGUsLTEpKX10aigpO2Q9S2koRXJyb3IocCg0MjEpKSk7cmV0dXJuIHNqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXVqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1xaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gdmooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtiaChhLnJldHVybixiLGMpfVxuZnVuY3Rpb24gd2ooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHhqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WGkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1MLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmdmooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl2aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTCxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09Q2goYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt3aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUNoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX13aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp3aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiBaaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7cmh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVBnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1QZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24geWooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmtqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OkFoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6eWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKFdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhMLEwuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gb2ooYSxiLGMpO0coTCxMLmN1cnJlbnQmMSk7YT1aaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTCxMLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHhqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKEwsTC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZGooYSxiLGMpfXJldHVybiBaaShhLGIsYyl9dmFyIHpqLEFqLEJqLENqO1xuemo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0FqPWZ1bmN0aW9uKCl7fTtcbkJqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTt4aCh1aC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07Q2o9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBEaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO3poKCk7RShXZik7RShIKTtFaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoRmooemcpLHpnPW51bGwpKTtBaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkJoKGIpO3ZhciBlPXhoKHdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUJqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9eGgodWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO3pqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz14aCh3aC5jdXJyZW50KTt4aCh1aC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKEwpO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihGaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTC5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp0aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxcbkFqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBhaChiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTCk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClEaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9Q2goYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtEaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTCxMLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5HaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLERqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPUNoKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRGooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkdqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLERqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1MLmN1cnJlbnQsRyhMLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBIaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGZqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBJaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gemgoKSxFKFdmKSxFKEgpLEVoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gQmgoYiksbnVsbDtjYXNlIDEzOkUoTCk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTCksbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBhaChiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBIaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBKaj0hMSxVPSExLEtqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBMaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTWooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBOaj0hMTtcbmZ1bmN0aW9uIE9qKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6Q2koYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1OajtOaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk1qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFFqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBSaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFNqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVGooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBVaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxUaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gVmooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFZqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspVmooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFhqPSExO2Z1bmN0aW9uIFlqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylaaihhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBaaihhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fExqKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1YajtYPW51bGw7WWooYSxiLGMpO1g9ZDtYaj1lO251bGwhPT1YJiYoWGo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFhqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WGo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO1xuWWooYSxiLGMpO1g9ZDtYaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TWooYyxiLGcpOjAhPT0oZiY0KSYmTWooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WWooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKExqKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1ZaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpZaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFlqKGEsYixjKSxVPWQpOllqKGEsYixjKTticmVhaztkZWZhdWx0OllqKGEsYixjKX19ZnVuY3Rpb24gYWsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgS2opO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1iay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1hqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7WmooZixnLGUpO1g9bnVsbDtYaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWRrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjayhiLGEpO2VrKGEpO2lmKGQmNCl7dHJ5e1BqKDMsYSxhLnJldHVybiksUWooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1BqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6Y2soYixhKTtlayhhKTtkJjUxMiYmbnVsbCE9PWMmJkxqKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpjayhiLGEpO2VrKGEpO2QmNTEyJiZudWxsIT09YyYmTGooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6Y2soYixhKTtlayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6Y2soYixhKTtlayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6Y2soYixhKTtlayhhKTticmVhaztjYXNlIDEzOmNrKGIsYSk7ZWsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChmaz1CKCkpKTtkJjQmJmFrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxjayhiLGEpLFU9bCk6Y2soYixhKTtlayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UGooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TGoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpMaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2drKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmdrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6Y2soYixhKTtlayhhKTtkJjQmJmFrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpjayhiLFxuYSksZWsoYSl9fWZ1bmN0aW9uIGVrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVGooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VWooYSk7V2ooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVVqKGEpO1ZqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGhrKGEsYixjKXtWPWE7aWsoYSxiLGMpfVxuZnVuY3Rpb24gaWsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEpqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9Smo7dmFyIGw9VTtKaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/amsoZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTpqayhlKTtmb3IoO251bGwhPT1mOylWPWYsaWsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtKaj1oO1U9bH1rayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmtrKGEsYixjKX19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFFqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6Q2koYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmc2goYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfXNoKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZSaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBnayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24gamsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UWooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtSaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1JqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbGs9TWF0aC5jZWlsLG1rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsbms9dWEuUmVhY3RDdXJyZW50T3duZXIsb2s9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFE9bnVsbCxZPW51bGwsWj0wLGZqPTAsZWo9VWYoMCksVD0wLHBrPW51bGwscmg9MCxxaz0wLHJrPTAsc2s9bnVsbCx0az1udWxsLGZrPTAsR2o9SW5maW5pdHksdWs9bnVsbCxPaT0hMSxQaT1udWxsLFJpPW51bGwsdms9ITEsd2s9bnVsbCx4az0wLHlrPTAsems9bnVsbCxBaz0tMSxCaz0wO2Z1bmN0aW9uIFIoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUFrP0FrOkFrPUIoKX1cbmZ1bmN0aW9uIHlpKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1CayYmKEJrPXljKCkpLEJrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBnaShhLGIsYyxkKXtpZig1MDx5ayl0aHJvdyB5az0wLHprPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09USlhPT09USYmKDA9PT0oSyYyKSYmKHFrfD1jKSw0PT09VCYmQ2soYSxaKSksRGsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoR2o9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBEayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09UT9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhFay5iaW5kKG51bGwsYSkpOmhnKEVrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUZrKGMsR2suYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEdrKGEsYil7QWs9LTE7Qms9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihIaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09UT9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1JayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1KaygpO2lmKFEhPT1hfHxaIT09Yil1az1udWxsLEdqPUIoKSs1MDAsS2soYSxiKTtkbyB0cnl7TGsoKTticmVha31jYXRjaChoKXtNayhhLGgpfXdoaWxlKDEpOyRnKCk7bWsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFE9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9TmsoYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cGssS2soYSwwKSxDayhhLGQpLERrKGEsQigpKSxjO2lmKDY9PT1iKUNrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhT2soZSkmJihiPUlrKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9TmsoYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxkKSxEayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlBrKGEsdGssdWspO2JyZWFrO2Nhc2UgMzpDayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1mays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtSKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihQay5iaW5kKG51bGwsYSx0ayx1ayksYik7YnJlYWt9UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSA0OkNrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbGsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUGsuYmluZChudWxsLGEsdGssdWspLGQpO2JyZWFrfVBrKGEsdGssdWspO2JyZWFrO2Nhc2UgNTpQayhhLHRrLHVrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RGsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/R2suYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBOayhhLGIpe3ZhciBjPXNrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKEtrKGEsYikuZmxhZ3N8PTI1Nik7YT1JayhhLGIpOzIhPT1hJiYoYj10ayx0az1jLG51bGwhPT1iJiZGaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gRmooYSl7bnVsbD09PXRrP3RrPWE6dGsucHVzaC5hcHBseSh0ayxhKX1cbmZ1bmN0aW9uIE9rKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBDayhhLGIpe2ImPX5yaztiJj1+cWs7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRWsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SGsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRGsoYSxCKCkpLG51bGw7dmFyIGM9SWsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU5rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cGssS2soYSwwKSxDayhhLGIpLERrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtQayhhLHRrLHVrKTtEayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBRayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihHaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gUmsoYSl7bnVsbCE9PXdrJiYwPT09d2sudGFnJiYwPT09KEsmNikmJkhrKCk7dmFyIGI9SztLfD0xO3ZhciBjPW9rLnRyYW5zaXRpb24sZD1DO3RyeXtpZihvay50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxvay50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSGooKXtmaj1lai5jdXJyZW50O0UoZWopfVxuZnVuY3Rpb24gS2soYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6emgoKTtFKFdmKTtFKEgpO0VoKCk7YnJlYWs7Y2FzZSA1OkJoKGQpO2JyZWFrO2Nhc2UgNDp6aCgpO2JyZWFrO2Nhc2UgMTM6RShMKTticmVhaztjYXNlIDE5OkUoTCk7YnJlYWs7Y2FzZSAxMDphaChkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpIaigpfWM9Yy5yZXR1cm59UT1hO1k9YT1QZyhhLmN1cnJlbnQsbnVsbCk7Wj1maj1iO1Q9MDtwaz1udWxsO3JrPXFrPXJoPTA7dGs9c2s9bnVsbDtpZihudWxsIT09Zmgpe2ZvcihiPVxuMDtiPGZoLmxlbmd0aDtiKyspaWYoYz1maFtiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1maD1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTWsoYSxiKXtkb3t2YXIgYz1ZO3RyeXskZygpO0ZoLmN1cnJlbnQ9Umg7aWYoSWgpe2Zvcih2YXIgZD1NLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fUloPSExfUhoPTA7Tz1OPU09bnVsbDtKaD0hMTtLaD0wO25rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cGs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VWkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7VmkoeSxnLGgsZixiKTt5Lm1vZGUmMSYmU2koZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtTaShmLGwsYik7dGooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VWkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1ZpKEosZyxoLGYsYik7SmcoSmkoayxoKSk7YnJlYWsgYX19Zj1rPUppKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT1zaz9zaz1bZl06c2sucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU5pKGYsayxiKTtwaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVJpfHwhUmkuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UWkoZixoLGIpO3BoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9U2soYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBKaygpe3ZhciBhPW1rLmN1cnJlbnQ7bWsuY3VycmVudD1SaDtyZXR1cm4gbnVsbD09PWE/Umg6YX1cbmZ1bmN0aW9uIHRqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVF8fDA9PT0ocmgmMjY4NDM1NDU1KSYmMD09PShxayYyNjg0MzU0NTUpfHxDayhRLFopfWZ1bmN0aW9uIElrKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUprKCk7aWYoUSE9PWF8fFohPT1iKXVrPW51bGwsS2soYSxiKTtkbyB0cnl7VGsoKTticmVha31jYXRjaChlKXtNayhhLGUpfXdoaWxlKDEpOyRnKCk7Sz1jO21rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1E9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVGsoKXtmb3IoO251bGwhPT1ZOylVayhZKX1mdW5jdGlvbiBMaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylVayhZKX1mdW5jdGlvbiBVayhhKXt2YXIgYj1WayhhLmFsdGVybmF0ZSxhLGZqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/U2soYSk6WT1iO25rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFNrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUVqKGMsYixmaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1JaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFBrKGEsYixjKXt2YXIgZD1DLGU9b2sudHJhbnNpdGlvbjt0cnl7b2sudHJhbnNpdGlvbj1udWxsLEM9MSxXayhhLGIsYyxkKX1maW5hbGx5e29rLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXayhhLGIsYyxkKXtkbyBIaygpO3doaWxlKG51bGwhPT13ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1RJiYoWT1RPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHZrfHwodms9ITAsRmsoaGMsZnVuY3Rpb24oKXtIaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1vay50cmFuc2l0aW9uO29rLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtuay5jdXJyZW50PW51bGw7T2ooYSxjKTtkayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aGsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztvay50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt2ayYmKHZrPSExLHdrPWEseGs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFJpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0RrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihPaSl0aHJvdyBPaT0hMSxhPVBpLFBpPW51bGwsYTswIT09KHhrJjEpJiYwIT09YS50YWcmJkhrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PXprP3lrKys6KHlrPTAsems9YSk6eWs9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSGsoKXtpZihudWxsIT09d2spe3ZhciBhPURjKHhrKSxiPW9rLnRyYW5zaXRpb24sYz1DO3RyeXtvay50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXdrKXZhciBkPSExO2Vsc2V7YT13azt3az1udWxsO3hrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UGooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1NqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlBqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMsb2sudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBYayhhLGIsYyl7Yj1KaShjLGIpO2I9TmkoYSxiLDEpO2E9bmgoYSxiLDEpO2I9UigpO251bGwhPT1hJiYoQWMoYSwxLGIpLERrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVhrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1hrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVJpfHwhUmkuaGFzKGQpKSl7YT1KaShjLGEpO2E9UWkoYixhLDEpO2I9bmgoYixhLDEpO2E9UigpO251bGwhPT1iJiYoQWMoYiwxLGEpLERrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1SKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1E9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWZrP0trKGEsMCk6cmt8PWMpO0RrKGEsYil9ZnVuY3Rpb24gWWsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1SKCk7YT1paChhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLERrKGEsYykpfWZ1bmN0aW9uIHVqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtZayhhLGMpfVxuZnVuY3Rpb24gYmsoYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WWsoYSxjKX12YXIgVms7XG5Waz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpZGg9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBkaD0hMSx5aihhLGIsYyk7ZGg9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBkaD0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtpaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO2NoKGIsYyk7ZT1OaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9U2goKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGtoKGIpLGUudXBkYXRlcj1FaSxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIsSWkoYixkLGEsYyksYj1qaihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxYaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2lqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9WmsoZCk7YT1DaShkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1jaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1ZaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPSRpKG51bGwsYixkLENpKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxjaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxoaihhLGIsZCxlLGMpO2Nhc2UgMzphOntraihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7bGgoYSxiKTtxaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1KaShFcnJvcihwKDQyMykpLGIpO2I9bGooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9SmkoRXJyb3IocCg0MjQpKSxiKTtiPWxqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9VmcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj1aaShhLGIsYyk7YnJlYWsgYX1YaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBBaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmdqKGEsYiksWGkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIG9qKGEsYixjKTtjYXNlIDQ6cmV0dXJuIHloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVVnKGIsbnVsbCxkLGMpOlhpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxZaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhXZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj1aaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1taCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7YmgoZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7YmgoZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVhpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sY2goYixjKSxlPWVoKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFhpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUNpKGQsYi5wZW5kaW5nUHJvcHMpLGU9Q2koZC50eXBlLGUpLCRpKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gYmooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGlqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxjaChiLGMpLEdpKGIsZCxlKSxJaShiLGQsZSxjKSxqaihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHhqKGEsYixjKTtjYXNlIDIyOnJldHVybiBkaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEZrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiAkayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3ICRrKGEsYixjLGQpfWZ1bmN0aW9uIGFqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBaayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYWooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gUGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gUmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWFqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBUZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcGooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBUZyhhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBwaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIFFnKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFNnKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gYmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGFsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTtraChmKTtyZXR1cm4gYX1mdW5jdGlvbiBjbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZGwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBlbChhLGIsYyxkLGUsZixnLGgsayl7YT1ibChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1kbChudWxsKTtjPWEuY3VycmVudDtkPVIoKTtlPXlpKGMpO2Y9bWgoZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtuaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0RrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZmwoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UigpLGc9eWkoZSk7Yz1kbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPW1oKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9bmgoZSxiLGcpO251bGwhPT1hJiYoZ2koYSxlLGcsZiksb2goYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGdsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaGwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGlsKGEsYil7aGwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmhsKGEsYil9ZnVuY3Rpb24gamwoKXtyZXR1cm4gbnVsbH12YXIga2w9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIGxsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubWwucHJvdG90eXBlLnJlbmRlcj1sbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2ZsKGEsYixudWxsLG51bGwpfTttbC5wcm90b3R5cGUudW5tb3VudD1sbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1JrKGZ1bmN0aW9uKCl7ZmwobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5tbC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG5sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcGwoKXt9XG5mdW5jdGlvbiBxbChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1nbChnKTtmLmNhbGwoYSl9fXZhciBnPWVsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHBsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1JrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1nbChrKTtoLmNhbGwoYSl9fXZhciBrPWJsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixwbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtSayhmdW5jdGlvbigpe2ZsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1nbChnKTtoLmNhbGwoYSl9fWZsKGIsZyxhLGUpfWVsc2UgZz1xbChjLGIsYSxlLGQpO3JldHVybiBnbChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxEayhiLEIoKSksMD09PShLJjYpJiYoR2o9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpSayhmdW5jdGlvbigpe3ZhciBiPWloKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPVIoKTtnaShiLGEsMSxjKX19KSxpbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1paChhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPVIoKTtnaShiLGEsMTM0MjE3NzI4LGMpfWlsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPXlpKGEpLGM9aWgoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9UigpO2dpKGMsYSxiLGQpfWlsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVFrO0hiPVJrO1xudmFyIHNsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixRa119LHRsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjMuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdWw9e2J1bmRsZVR5cGU6dGwuYnVuZGxlVHlwZSx2ZXJzaW9uOnRsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp0bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnRsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxuamwsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjMuMS1uZXh0LWYxMzM4ZjgwODAtMjAyNDA0MjZcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB2bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXZsLmlzRGlzYWJsZWQmJnZsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXZsLmluamVjdCh1bCksbGM9dmx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXNsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighbmwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gY2woYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWtsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1ibChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbGwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFJrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBybChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWtsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1lbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBtbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBybChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oUmsoZnVuY3Rpb24oKXtybChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1RaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIW9sKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBybChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMy4xLW5leHQtZjEzMzhmODA4MC0yMDI0MDQyNlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHsgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyB9IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgYmluZEkxOG46ICdsYW5ndWFnZUNoYW5nZWQnLFxuICBiaW5kSTE4blN0b3JlOiAnJyxcbiAgdHJhbnNFbXB0eU5vZGVWYWx1ZTogJycsXG4gIHRyYW5zU3VwcG9ydEJhc2ljSHRtbE5vZGVzOiB0cnVlLFxuICB0cmFuc1dyYXBUZXh0Tm9kZXM6ICcnLFxuICB0cmFuc0tlZXBCYXNpY0h0bWxOb2Rlc0ZvcjogWydicicsICdzdHJvbmcnLCAnaScsICdwJ10sXG4gIHVzZVN1c3BlbnNlOiB0cnVlXG59O1xudmFyIGkxOG5JbnN0YW5jZTtcbmV4cG9ydCB2YXIgSTE4bkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdHMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgZGVmYXVsdE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdHMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cbmV4cG9ydCB2YXIgUmVwb3J0TmFtZXNwYWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVwb3J0TmFtZXNwYWNlcygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVwb3J0TmFtZXNwYWNlcyk7XG5cbiAgICB0aGlzLnVzZWROYW1lc3BhY2VzID0ge307XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVwb3J0TmFtZXNwYWNlcywgW3tcbiAgICBrZXk6IFwiYWRkVXNlZE5hbWVzcGFjZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVXNlZE5hbWVzcGFjZXMobmFtZXNwYWNlcykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICBpZiAoIV90aGlzLnVzZWROYW1lc3BhY2VzW25zXSkgX3RoaXMudXNlZE5hbWVzcGFjZXNbbnNdID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRVc2VkTmFtZXNwYWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc2VkTmFtZXNwYWNlcygpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnVzZWROYW1lc3BhY2VzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVwb3J0TmFtZXNwYWNlcztcbn0oKTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRJMThuKGluc3RhbmNlKSB7XG4gIGkxOG5JbnN0YW5jZSA9IGluc3RhbmNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEkxOG4oKSB7XG4gIHJldHVybiBpMThuSW5zdGFuY2U7XG59XG5leHBvcnQgdmFyIGluaXRSZWFjdEkxOG5leHQgPSB7XG4gIHR5cGU6ICczcmRQYXJ0eScsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoaW5zdGFuY2UpIHtcbiAgICBzZXREZWZhdWx0cyhpbnN0YW5jZS5vcHRpb25zLnJlYWN0KTtcbiAgICBzZXRJMThuKGluc3RhbmNlKTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlSW5pdGlhbFByb3BzKEZvckNvbXBvbmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGN0eCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGkxOG5Jbml0aWFsUHJvcHMgPSBnZXRJbml0aWFsUHJvcHMoKTtcblxuICAgICAgaWYgKEZvckNvbXBvbmVudC5nZXRJbml0aWFsUHJvcHMpIHtcbiAgICAgICAgRm9yQ29tcG9uZW50LmdldEluaXRpYWxQcm9wcyhjdHgpLnRoZW4oZnVuY3Rpb24gKGNvbXBvbmVudHNJbml0aWFsUHJvcHMpIHtcbiAgICAgICAgICByZXNvbHZlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29tcG9uZW50c0luaXRpYWxQcm9wcyksIGkxOG5Jbml0aWFsUHJvcHMpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGkxOG5Jbml0aWFsUHJvcHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxQcm9wcygpIHtcbiAgdmFyIGkxOG4gPSBnZXRJMThuKCk7XG4gIHZhciBuYW1lc3BhY2VzID0gaTE4bi5yZXBvcnROYW1lc3BhY2VzID8gaTE4bi5yZXBvcnROYW1lc3BhY2VzLmdldFVzZWROYW1lc3BhY2VzKCkgOiBbXTtcbiAgdmFyIHJldCA9IHt9O1xuICB2YXIgaW5pdGlhbEkxOG5TdG9yZSA9IHt9O1xuICBpMThuLmxhbmd1YWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgaW5pdGlhbEkxOG5TdG9yZVtsXSA9IHt9O1xuICAgIG5hbWVzcGFjZXMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHtcbiAgICAgIGluaXRpYWxJMThuU3RvcmVbbF1bbnNdID0gaTE4bi5nZXRSZXNvdXJjZUJ1bmRsZShsLCBucykgfHwge307XG4gICAgfSk7XG4gIH0pO1xuICByZXQuaW5pdGlhbEkxOG5TdG9yZSA9IGluaXRpYWxJMThuU3RvcmU7XG4gIHJldC5pbml0aWFsTGFuZ3VhZ2UgPSBpMThuLmxhbmd1YWdlO1xuICByZXR1cm4gcmV0O1xufSIsImV4cG9ydCBmdW5jdGlvbiB3YXJuKCkge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJykgYXJnc1swXSA9IFwicmVhY3QtaTE4bmV4dDo6IFwiLmNvbmNhdChhcmdzWzBdKTtcblxuICAgIChfY29uc29sZSA9IGNvbnNvbGUpLndhcm4uYXBwbHkoX2NvbnNvbGUsIGFyZ3MpO1xuICB9XG59XG52YXIgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5PbmNlKCkge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIGFscmVhZHlXYXJuZWRbYXJnc1swXV0pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJykgYWxyZWFkeVdhcm5lZFthcmdzWzBdXSA9IG5ldyBEYXRlKCk7XG4gIHdhcm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2FkTmFtZXNwYWNlcyhpMThuLCBucywgY2IpIHtcbiAgaTE4bi5sb2FkTmFtZXNwYWNlcyhucywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChpMThuLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGNiKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpbml0aWFsaXplZCA9IGZ1bmN0aW9uIGluaXRpYWxpemVkKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpMThuLm9mZignaW5pdGlhbGl6ZWQnLCBpbml0aWFsaXplZCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgICBjYigpO1xuICAgICAgfTtcblxuICAgICAgaTE4bi5vbignaW5pdGlhbGl6ZWQnLCBpbml0aWFsaXplZCk7XG4gICAgfVxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNMb2FkZWROYW1lc3BhY2UobnMsIGkxOG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gIGlmICghaTE4bi5sYW5ndWFnZXMgfHwgIWkxOG4ubGFuZ3VhZ2VzLmxlbmd0aCkge1xuICAgIHdhcm5PbmNlKCdpMThuLmxhbmd1YWdlcyB3ZXJlIHVuZGVmaW5lZCBvciBlbXB0eScsIGkxOG4ubGFuZ3VhZ2VzKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBsbmcgPSBpMThuLmxhbmd1YWdlc1swXTtcbiAgdmFyIGZhbGxiYWNrTG5nID0gaTE4bi5vcHRpb25zID8gaTE4bi5vcHRpb25zLmZhbGxiYWNrTG5nIDogZmFsc2U7XG4gIHZhciBsYXN0TG5nID0gaTE4bi5sYW5ndWFnZXNbaTE4bi5sYW5ndWFnZXMubGVuZ3RoIC0gMV07XG4gIGlmIChsbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHJldHVybiB0cnVlO1xuXG4gIHZhciBsb2FkTm90UGVuZGluZyA9IGZ1bmN0aW9uIGxvYWROb3RQZW5kaW5nKGwsIG4pIHtcbiAgICB2YXIgbG9hZFN0YXRlID0gaTE4bi5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLnN0YXRlW1wiXCIuY29uY2F0KGwsIFwifFwiKS5jb25jYXQobildO1xuICAgIHJldHVybiBsb2FkU3RhdGUgPT09IC0xIHx8IGxvYWRTdGF0ZSA9PT0gMjtcbiAgfTtcblxuICBpZiAob3B0aW9ucy5iaW5kSTE4biAmJiBvcHRpb25zLmJpbmRJMThuLmluZGV4T2YoJ2xhbmd1YWdlQ2hhbmdpbmcnKSA+IC0xICYmIGkxOG4uc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5iYWNrZW5kICYmIGkxOG4uaXNMYW5ndWFnZUNoYW5naW5nVG8gJiYgIWxvYWROb3RQZW5kaW5nKGkxOG4uaXNMYW5ndWFnZUNoYW5naW5nVG8sIG5zKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoaTE4bi5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkgcmV0dXJuIHRydWU7XG4gIGlmICghaTE4bi5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLmJhY2tlbmQpIHJldHVybiB0cnVlO1xuICBpZiAobG9hZE5vdFBlbmRpbmcobG5nLCBucykgJiYgKCFmYWxsYmFja0xuZyB8fCBsb2FkTm90UGVuZGluZyhsYXN0TG5nLCBucykpKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJyAmJiBDb21wb25lbnQubGVuZ3RoID4gMCA/IENvbXBvbmVudCA6ICdVbmtub3duJyk7XG59IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRJMThuLCBnZXREZWZhdWx0cywgUmVwb3J0TmFtZXNwYWNlcywgSTE4bkNvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnO1xuaW1wb3J0IHsgd2Fybk9uY2UsIGxvYWROYW1lc3BhY2VzLCBoYXNMb2FkZWROYW1lc3BhY2UgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiB1c2VUcmFuc2xhdGlvbihucykge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgaTE4bkZyb21Qcm9wcyA9IHByb3BzLmkxOG47XG5cbiAgdmFyIF9yZWYgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KSB8fCB7fSxcbiAgICAgIGkxOG5Gcm9tQ29udGV4dCA9IF9yZWYuaTE4bixcbiAgICAgIGRlZmF1bHROU0Zyb21Db250ZXh0ID0gX3JlZi5kZWZhdWx0TlM7XG5cbiAgdmFyIGkxOG4gPSBpMThuRnJvbVByb3BzIHx8IGkxOG5Gcm9tQ29udGV4dCB8fCBnZXRJMThuKCk7XG4gIGlmIChpMThuICYmICFpMThuLnJlcG9ydE5hbWVzcGFjZXMpIGkxOG4ucmVwb3J0TmFtZXNwYWNlcyA9IG5ldyBSZXBvcnROYW1lc3BhY2VzKCk7XG5cbiAgaWYgKCFpMThuKSB7XG4gICAgd2Fybk9uY2UoJ1lvdSB3aWxsIG5lZWQgdG8gcGFzcyBpbiBhbiBpMThuZXh0IGluc3RhbmNlIGJ5IHVzaW5nIGluaXRSZWFjdEkxOG5leHQnKTtcblxuICAgIHZhciBub3RSZWFkeVQgPSBmdW5jdGlvbiBub3RSZWFkeVQoaykge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaykgPyBrW2subGVuZ3RoIC0gMV0gOiBrO1xuICAgIH07XG5cbiAgICB2YXIgcmV0Tm90UmVhZHkgPSBbbm90UmVhZHlULCB7fSwgZmFsc2VdO1xuICAgIHJldE5vdFJlYWR5LnQgPSBub3RSZWFkeVQ7XG4gICAgcmV0Tm90UmVhZHkuaTE4biA9IHt9O1xuICAgIHJldE5vdFJlYWR5LnJlYWR5ID0gZmFsc2U7XG4gICAgcmV0dXJuIHJldE5vdFJlYWR5O1xuICB9XG5cbiAgaWYgKGkxOG4ub3B0aW9ucy5yZWFjdCAmJiBpMThuLm9wdGlvbnMucmVhY3Qud2FpdCAhPT0gdW5kZWZpbmVkKSB3YXJuT25jZSgnSXQgc2VlbXMgeW91IGFyZSBzdGlsbCB1c2luZyB0aGUgb2xkIHdhaXQgb3B0aW9uLCB5b3UgbWF5IG1pZ3JhdGUgdG8gdGhlIG5ldyB1c2VTdXNwZW5zZSBiZWhhdmlvdXIuJyk7XG5cbiAgdmFyIGkxOG5PcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGdldERlZmF1bHRzKCkpLCBpMThuLm9wdGlvbnMucmVhY3QpLCBwcm9wcyk7XG5cbiAgdmFyIHVzZVN1c3BlbnNlID0gaTE4bk9wdGlvbnMudXNlU3VzcGVuc2UsXG4gICAgICBrZXlQcmVmaXggPSBpMThuT3B0aW9ucy5rZXlQcmVmaXg7XG4gIHZhciBuYW1lc3BhY2VzID0gbnMgfHwgZGVmYXVsdE5TRnJvbUNvbnRleHQgfHwgaTE4bi5vcHRpb25zICYmIGkxOG4ub3B0aW9ucy5kZWZhdWx0TlM7XG4gIG5hbWVzcGFjZXMgPSB0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBbbmFtZXNwYWNlc10gOiBuYW1lc3BhY2VzIHx8IFsndHJhbnNsYXRpb24nXTtcbiAgaWYgKGkxOG4ucmVwb3J0TmFtZXNwYWNlcy5hZGRVc2VkTmFtZXNwYWNlcykgaTE4bi5yZXBvcnROYW1lc3BhY2VzLmFkZFVzZWROYW1lc3BhY2VzKG5hbWVzcGFjZXMpO1xuICB2YXIgcmVhZHkgPSAoaTE4bi5pc0luaXRpYWxpemVkIHx8IGkxOG4uaW5pdGlhbGl6ZWRTdG9yZU9uY2UpICYmIG5hbWVzcGFjZXMuZXZlcnkoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaGFzTG9hZGVkTmFtZXNwYWNlKG4sIGkxOG4sIGkxOG5PcHRpb25zKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0VCgpIHtcbiAgICByZXR1cm4gaTE4bi5nZXRGaXhlZFQobnVsbCwgaTE4bk9wdGlvbnMubnNNb2RlID09PSAnZmFsbGJhY2snID8gbmFtZXNwYWNlcyA6IG5hbWVzcGFjZXNbMF0sIGtleVByZWZpeCk7XG4gIH1cblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZ2V0VCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIHQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0VCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGlzTW91bnRlZCA9IHVzZVJlZih0cnVlKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmluZEkxOG4gPSBpMThuT3B0aW9ucy5iaW5kSTE4bixcbiAgICAgICAgYmluZEkxOG5TdG9yZSA9IGkxOG5PcHRpb25zLmJpbmRJMThuU3RvcmU7XG4gICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgaWYgKCFyZWFkeSAmJiAhdXNlU3VzcGVuc2UpIHtcbiAgICAgIGxvYWROYW1lc3BhY2VzKGkxOG4sIG5hbWVzcGFjZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSBzZXRUKGdldFQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYm91bmRSZXNldCgpIHtcbiAgICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkgc2V0VChnZXRUKTtcbiAgICB9XG5cbiAgICBpZiAoYmluZEkxOG4gJiYgaTE4bikgaTE4bi5vbihiaW5kSTE4biwgYm91bmRSZXNldCk7XG4gICAgaWYgKGJpbmRJMThuU3RvcmUgJiYgaTE4bikgaTE4bi5zdG9yZS5vbihiaW5kSTE4blN0b3JlLCBib3VuZFJlc2V0KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGlmIChiaW5kSTE4biAmJiBpMThuKSBiaW5kSTE4bi5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGkxOG4ub2ZmKGUsIGJvdW5kUmVzZXQpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYmluZEkxOG5TdG9yZSAmJiBpMThuKSBiaW5kSTE4blN0b3JlLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gaTE4bi5zdG9yZS5vZmYoZSwgYm91bmRSZXNldCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9LCBbaTE4biwgbmFtZXNwYWNlcy5qb2luKCldKTtcbiAgdmFyIGlzSW5pdGlhbCA9IHVzZVJlZih0cnVlKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQgJiYgIWlzSW5pdGlhbC5jdXJyZW50KSB7XG4gICAgICBzZXRUKGdldFQpO1xuICAgIH1cblxuICAgIGlzSW5pdGlhbC5jdXJyZW50ID0gZmFsc2U7XG4gIH0sIFtpMThuXSk7XG4gIHZhciByZXQgPSBbdCwgaTE4biwgcmVhZHldO1xuICByZXQudCA9IHQ7XG4gIHJldC5pMThuID0gaTE4bjtcbiAgcmV0LnJlYWR5ID0gcmVhZHk7XG4gIGlmIChyZWFkeSkgcmV0dXJuIHJldDtcbiAgaWYgKCFyZWFkeSAmJiAhdXNlU3VzcGVuc2UpIHJldHVybiByZXQ7XG4gIHRocm93IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgbG9hZE5hbWVzcGFjZXMoaTE4biwgbmFtZXNwYWNlcywgZnVuY3Rpb24gKCkge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMocikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5leHBvcnQgeyBfc2xpY2VkVG9BcnJheSBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHtcbiAgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChvKSB0aHJvdyBuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxufVxuZXhwb3J0IHsgX2l0ZXJhYmxlVG9BcnJheUxpbWl0IGFzIGRlZmF1bHQgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMud2l0aEJhc2VJY29uID0gZXhwb3J0cy5JY29uID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1N2Z0ljb25cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBJY29uID0gZnVuY3Rpb24gSWNvbihwcm9wcykge1xuICB2YXIgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICB0YWcgPSBwcm9wcy50YWcsXG4gICAgICBvdGhlcnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcInN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiaWNvblwiLCBcInNpemVcIiwgXCJ0YWdcIl0pOyAvL2VzbGludC1kaXNhYmxlLWxpbmVcblxuXG4gIHZhciBUYWcgPSB0YWc7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe30sIG90aGVycywge1xuICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSwgc3R5bGUpLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsIHtcbiAgICBzaXplOiBwcm9wcy5zaXplLFxuICAgIGljb246IHByb3BzLmljb24sXG4gICAgdGl0bGU6IHByb3BzLnRpdGxlXG4gIH0pKTtcbn07XG5cbmV4cG9ydHMuSWNvbiA9IEljb247XG5cbnZhciB3aXRoQmFzZUljb24gPSBmdW5jdGlvbiB3aXRoQmFzZUljb24oZGVmYXVsdFByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgcHJvcHNUb1VzZSA9IF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRQcm9wcyk7XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJY29uLCBfZXh0ZW5kcyh7fSwgcHJvcHNUb1VzZSwgcHJvcHMpKTtcbiAgfTtcbn07XG5cbmV4cG9ydHMud2l0aEJhc2VJY29uID0gd2l0aEJhc2VJY29uO1xuSWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHNpemU6IDE2LFxuICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgdGFnOiAnaSdcbn07XG5JY29uLnByb3BUeXBlcyA9IHtcbiAgaWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICB0YWc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2knLCAnc3BhbicsICdkaXYnXSksXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufTtcbnZhciBfZGVmYXVsdCA9IEljb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuU3ZnSWNvbiA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2FtZWxDYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2FtZWwtY2FzZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gbm90TnVsbE9yVW5kZWYodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdmFsICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZFN0eWxlKCkge1xuICB2YXIgc3R5bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICByZXR1cm4gc3R5bGUuc3BsaXQoJzsnKS5yZWR1Y2UoZnVuY3Rpb24gKHBhcnRpYWwsIG5leHQpIHtcbiAgICAvLyBuZXh0IGggZXJlIGlzIGtleTp2YWxcbiAgICB2YXIgX25leHQkc3BsaXQgPSBuZXh0LnNwbGl0KCc6JyksXG4gICAgICAgIF9uZXh0JHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9uZXh0JHNwbGl0LCAyKSxcbiAgICAgICAga2V5ID0gX25leHQkc3BsaXQyWzBdLFxuICAgICAgICB2YWwgPSBfbmV4dCRzcGxpdDJbMV07XG5cbiAgICBpZiAobm90TnVsbE9yVW5kZWYoa2V5KSAmJiBub3ROdWxsT3JVbmRlZih2YWwpKSB7XG4gICAgICBwYXJ0aWFsWygwLCBfY2FtZWxDYXNlLmRlZmF1bHQpKGtleSldID0gdmFsO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJ0aWFsO1xuICB9LCB7fSk7XG59XG5cbnZhciB3YWxrQ2hpbGRyZW4gPSBmdW5jdGlvbiB3YWxrQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQsIGlkeCkge1xuICAgIHZhciBuYW1lID0gY2hpbGQubmFtZSxcbiAgICAgICAgYXR0cmlic01hcCA9IGNoaWxkLmF0dHJpYnMsXG4gICAgICAgIF9jaGlsZCRjaGlsZHJlbiA9IGNoaWxkLmNoaWxkcmVuLFxuICAgICAgICBnY2hpbGRyZW4gPSBfY2hpbGQkY2hpbGRyZW4gPT09IHZvaWQgMCA/IG51bGwgOiBfY2hpbGQkY2hpbGRyZW47IC8vZmlsbCwgc3Ryb2tlXG5cbiAgICB2YXIgYXR0cmlicyA9IE9iamVjdC5rZXlzKGF0dHJpYnNNYXApLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5ICE9PSAnZmlsbCcgJiYga2V5ICE9PSAnc3Ryb2tlJyAmJiBhdHRyaWJzTWFwW2tleV0gIT09ICdub25lJztcbiAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKHBhcnRpYWwsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICBwYXJ0aWFsLnN0eWxlID0gZXhwYW5kU3R5bGUoYXR0cmlic01hcFtrZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRpYWxbKDAsIF9jYW1lbENhc2UuZGVmYXVsdCkoa2V5KV0gPSBhdHRyaWJzTWFwW2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJ0aWFsO1xuICAgIH0sIHt9KTsgLy9zcGVjaWFsIGNhc2UsIGl0IGhhcyBmaWxsIGFuZCBzdHJva2UgYXQgdGhlIHNhbWUgdGltZVxuXG4gICAgdmFyIG1lcmdlID0ge307XG5cbiAgICBpZiAoYXR0cmlic01hcC5maWxsID09PSAnbm9uZScgJiYgYXR0cmlic01hcC5zdHJva2UpIHtcbiAgICAgIG1lcmdlID0ge1xuICAgICAgICBmaWxsOiAnbm9uZScsXG4gICAgICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcidcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChhdHRyaWJzTWFwLmZpbGwgPT09ICdub25lJykge1xuICAgICAgbWVyZ2UgPSB7XG4gICAgICAgIGZpbGw6ICdub25lJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9yZWFjdC5jcmVhdGVFbGVtZW50KShuYW1lLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGtleTogaWR4XG4gICAgfSwgYXR0cmlicywgbWVyZ2UpLCBnY2hpbGRyZW4gPT09IG51bGwgPyBnY2hpbGRyZW4gOiB3YWxrQ2hpbGRyZW4oZ2NoaWxkcmVuKSk7XG4gIH0pO1xufTtcblxudmFyIFN2Z0ljb24gPSBmdW5jdGlvbiBTdmdJY29uKHByb3BzKSB7XG4gIHZhciBzaXplID0gcHJvcHMuc2l6ZTtcbiAgdmFyIF9wcm9wcyRpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGNoaWxkcmVuID0gX3Byb3BzJGljb24uY2hpbGRyZW4sXG4gICAgICB2aWV3Qm94ID0gX3Byb3BzJGljb24udmlld0JveCxcbiAgICAgIF9wcm9wcyRpY29uJGF0dHJpYnMgPSBfcHJvcHMkaWNvbi5hdHRyaWJzLFxuICAgICAgc3ZnQXR0cmlicyA9IF9wcm9wcyRpY29uJGF0dHJpYnMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJGljb24kYXR0cmlicztcbiAgdmFyIGNhbWVsQ2FzZWRBdHRyaWJzID0gT2JqZWN0LmtleXMoc3ZnQXR0cmlicykucmVkdWNlKGZ1bmN0aW9uIChwYXJ0aWFsLCBrZXkpIHtcbiAgICBwYXJ0aWFsWygwLCBfY2FtZWxDYXNlLmRlZmF1bHQpKGtleSldID0gc3ZnQXR0cmlic1trZXldO1xuICAgIHJldHVybiBwYXJ0aWFsO1xuICB9LCB7fSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIHN0eWxlOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gICAgfSxcbiAgICBoZWlnaHQ6IHNpemUsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgdmlld0JveDogdmlld0JveFxuICB9LCBjYW1lbENhc2VkQXR0cmlicyksIHByb3BzLnRpdGxlID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHByb3BzLnRpdGxlKSA6IG51bGwsIHdhbGtDaGlsZHJlbihjaGlsZHJlbikpO1xufTtcblxuZXhwb3J0cy5TdmdJY29uID0gU3ZnSWNvbjtcblN2Z0ljb24uZGVmYXVsdFByb3BzID0ge1xuICBzaXplOiAxNlxufTtcblN2Z0ljb24ucHJvcFR5cGVzID0ge1xuICBpY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHNpemU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcbiAgdGl0bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn07XG52YXIgX2RlZmF1bHQgPSBTdmdJY29uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmhvcml6b250YWxDZW50ZXIgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBob3Jpem9udGFsQ2VudGVyID0gZnVuY3Rpb24gaG9yaXpvbnRhbENlbnRlcihDb21wb25lbnQpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRyQWxpZ24gPSBfcmVmLnJBbGlnbixcbiAgICAgIHJBbGlnbiA9IF9yZWYkckFsaWduID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkckFsaWduLFxuICAgICAgX3JlZiRzcGFjZSA9IF9yZWYuc3BhY2UsXG4gICAgICBzcGFjZSA9IF9yZWYkc3BhY2UgPT09IHZvaWQgMCA/IDQgOiBfcmVmJHNwYWNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgJ2FsaWduSXRlbXMnOiAnY2VudGVyJ1xuICAgICAgfVxuICAgIH0sIF9yZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpZHgpIHtcbiAgICAgIHZhciBzcGFjZXJGaWVsZCA9IHJBbGlnbiA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0JztcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAga2V5OiBpZHgsXG4gICAgICAgIHN0eWxlOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgIH0sIHNwYWNlckZpZWxkLCBzcGFjZSlcbiAgICAgIH0sIGNoaWxkKTtcbiAgICB9KSkpO1xuICB9O1xufTtcblxuZXhwb3J0cy5ob3Jpem9udGFsQ2VudGVyID0gaG9yaXpvbnRhbENlbnRlcjtcbnZhciBfZGVmYXVsdCA9IGhvcml6b250YWxDZW50ZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYnViYmxlczIgPSB2b2lkIDA7XG52YXIgYnViYmxlczIgPSB7XG4gIFwidmlld0JveFwiOiBcIjAgMCAxOCAxNlwiLFxuICBcImNoaWxkcmVuXCI6IFt7XG4gICAgXCJuYW1lXCI6IFwicGF0aFwiLFxuICAgIFwiYXR0cmlic1wiOiB7XG4gICAgICBcImZpbGxcIjogXCIjMDAwMDAwXCIsXG4gICAgICBcImRcIjogXCJNNy41IDB2MGM0LjE0MiAwIDcuNSAyLjcxNyA3LjUgNi4wNjlzLTMuMzU4IDYuMDY5LTcuNSA2LjA2OWMtMC4zOTggMC0wLjc4OC0wLjAyNS0xLjE2OS0wLjA3NC0xLjYxMSAxLjYwNS0zLjQ3MSAxLjg5Mi01LjMzMSAxLjkzNXYtMC4zOTNjMS4wMDQtMC40OSAxLjgxMy0xLjM4MiAxLjgxMy0yLjQwMiAwLTAuMTQyLTAuMDExLTAuMjgyLTAuMDMyLTAuNDE5LTEuNjk2LTEuMTEzLTIuNzgxLTIuODEyLTIuNzgxLTQuNzE3IDAtMy4zNTIgMy4zNTgtNi4wNjkgNy41LTYuMDY5ek0xNS41NjMgMTMuNjA0YzAgMC44NzQgMC41NjcgMS42MzkgMS40MzggMi4wNTl2MC4zMzdjLTEuNjExLTAuMDM2LTMuMDkwLTAuMjgzLTQuNDg3LTEuNjU4LTAuMzMgMC4wNDEtMC42NjkgMC4wNjMtMS4wMTMgMC4wNjMtMS40OTIgMC0yLjg2Ni0wLjQwMi0zLjk2My0xLjA3OSAyLjI2MS0wLjAwOCA0LjM5NS0wLjczMiA2LjAxMy0yLjA0MiAwLjgxNi0wLjY2IDEuNDU5LTEuNDM1IDEuOTEzLTIuMzAyIDAuNDgxLTAuOTIgMC43MjQtMS45IDAuNzI0LTIuOTEzIDAtMC4xNjMtMC4wMDctMC4zMjYtMC4wMjAtMC40ODcgMS4xMzQgMC45MzYgMS44MzIgMi4yMTMgMS44MzIgMy42MiAwIDEuNjMzLTAuOTQgMy4wODktMi40MSA0LjA0My0wLjAxOCAwLjExNy0wLjAyNyAwLjIzNy0wLjAyNyAwLjM1OXpcIlxuICAgIH1cbiAgfV1cbn07XG5leHBvcnRzLmJ1YmJsZXMyID0gYnViYmxlczI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNpcmNsZUxlZnQgPSB2b2lkIDA7XG52YXIgY2lyY2xlTGVmdCA9IHtcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDE2IDE2XCIsXG4gIFwiY2hpbGRyZW5cIjogW3tcbiAgICBcIm5hbWVcIjogXCJwYXRoXCIsXG4gICAgXCJhdHRyaWJzXCI6IHtcbiAgICAgIFwiZmlsbFwiOiBcIiMwMDAwMDBcIixcbiAgICAgIFwiZFwiOiBcIk04IDE2YzQuNDE4IDAgOC0zLjU4MiA4LThzLTMuNTgyLTgtOC04LTggMy41ODItOCA4IDMuNTgyIDggOCA4ek04IDEuNWMzLjU5IDAgNi41IDIuOTEgNi41IDYuNXMtMi45MSA2LjUtNi41IDYuNS02LjUtMi45MS02LjUtNi41IDIuOTEtNi41IDYuNS02LjV6XCJcbiAgICB9XG4gIH0sIHtcbiAgICBcIm5hbWVcIjogXCJwYXRoXCIsXG4gICAgXCJhdHRyaWJzXCI6IHtcbiAgICAgIFwiZmlsbFwiOiBcIiMwMDAwMDBcIixcbiAgICAgIFwiZFwiOiBcIk0xMC40NTcgNC45NTdsLTEuNDE0LTEuNDE0LTQuNDU3IDQuNDU3IDQuNDU3IDQuNDU3IDEuNDE0LTEuNDE0LTMuMDQzLTMuMDQzelwiXG4gICAgfVxuICB9XVxufTtcbmV4cG9ydHMuY2lyY2xlTGVmdCA9IGNpcmNsZUxlZnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNpcmNsZVJpZ2h0ID0gdm9pZCAwO1xudmFyIGNpcmNsZVJpZ2h0ID0ge1xuICBcInZpZXdCb3hcIjogXCIwIDAgMTYgMTZcIixcbiAgXCJjaGlsZHJlblwiOiBbe1xuICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICBcImF0dHJpYnNcIjoge1xuICAgICAgXCJmaWxsXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgXCJkXCI6IFwiTTggMGMtNC40MTggMC04IDMuNTgyLTggOHMzLjU4MiA4IDggOCA4LTMuNTgyIDgtOC0zLjU4Mi04LTgtOHpNOCAxNC41Yy0zLjU5IDAtNi41LTIuOTEtNi41LTYuNXMyLjkxLTYuNSA2LjUtNi41IDYuNSAyLjkxIDYuNSA2LjUtMi45MSA2LjUtNi41IDYuNXpcIlxuICAgIH1cbiAgfSwge1xuICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICBcImF0dHJpYnNcIjoge1xuICAgICAgXCJmaWxsXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgXCJkXCI6IFwiTTUuNTQzIDExLjA0M2wxLjQxNCAxLjQxNCA0LjQ1Ny00LjQ1Ny00LjQ1Ny00LjQ1Ny0xLjQxNCAxLjQxNCAzLjA0MyAzLjA0M3pcIlxuICAgIH1cbiAgfV1cbn07XG5leHBvcnRzLmNpcmNsZVJpZ2h0ID0gY2lyY2xlUmlnaHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhvbWUgPSB2b2lkIDA7XG52YXIgaG9tZSA9IHtcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDE2IDE2XCIsXG4gIFwiY2hpbGRyZW5cIjogW3tcbiAgICBcIm5hbWVcIjogXCJwYXRoXCIsXG4gICAgXCJhdHRyaWJzXCI6IHtcbiAgICAgIFwiZmlsbFwiOiBcIiMwMDAwMDBcIixcbiAgICAgIFwiZFwiOiBcIk0xNiA5LjIyNmwtOC02LjIxLTggNi4yMXYtMi41MzJsOC02LjIxIDggNi4yMXpNMTQgOXY2aC00di00aC00djRoLTR2LTZsNi00LjV6XCJcbiAgICB9XG4gIH1dXG59O1xuZXhwb3J0cy5ob21lID0gaG9tZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaW5mbyA9IHZvaWQgMDtcbnZhciBpbmZvID0ge1xuICBcInZpZXdCb3hcIjogXCIwIDAgMTYgMTZcIixcbiAgXCJjaGlsZHJlblwiOiBbe1xuICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICBcImF0dHJpYnNcIjoge1xuICAgICAgXCJmaWxsXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgXCJkXCI6IFwiTTcgNC43NWMwLTAuNDEyIDAuMzM4LTAuNzUgMC43NS0wLjc1aDAuNWMwLjQxMiAwIDAuNzUgMC4zMzggMC43NSAwLjc1djAuNWMwIDAuNDEyLTAuMzM4IDAuNzUtMC43NSAwLjc1aC0wLjVjLTAuNDEyIDAtMC43NS0wLjMzOC0wLjc1LTAuNzV2LTAuNXpcIlxuICAgIH1cbiAgfSwge1xuICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICBcImF0dHJpYnNcIjoge1xuICAgICAgXCJmaWxsXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgXCJkXCI6IFwiTTEwIDEyaC00di0xaDF2LTNoLTF2LTFoM3Y0aDF6XCJcbiAgICB9XG4gIH0sIHtcbiAgICBcIm5hbWVcIjogXCJwYXRoXCIsXG4gICAgXCJhdHRyaWJzXCI6IHtcbiAgICAgIFwiZmlsbFwiOiBcIiMwMDAwMDBcIixcbiAgICAgIFwiZFwiOiBcIk04IDBjLTQuNDE4IDAtOCAzLjU4Mi04IDhzMy41ODIgOCA4IDggOC0zLjU4MiA4LTgtMy41ODItOC04LTh6TTggMTQuNWMtMy41OSAwLTYuNS0yLjkxLTYuNS02LjVzMi45MS02LjUgNi41LTYuNSA2LjUgMi45MSA2LjUgNi41LTIuOTEgNi41LTYuNSA2LjV6XCJcbiAgICB9XG4gIH1dXG59O1xuZXhwb3J0cy5pbmZvID0gaW5mbzsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlciA9IHZvaWQgMDtcbnZhciB1c2VyID0ge1xuICBcInZpZXdCb3hcIjogXCIwIDAgMTYgMTZcIixcbiAgXCJjaGlsZHJlblwiOiBbe1xuICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICBcImF0dHJpYnNcIjoge1xuICAgICAgXCJmaWxsXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgXCJkXCI6IFwiTTkgMTEuMDQxdi0wLjgyNWMxLjEwMi0wLjYyMSAyLTIuMTY4IDItMy43MTYgMC0yLjQ4NSAwLTQuNS0zLTQuNXMtMyAyLjAxNS0zIDQuNWMwIDEuNTQ4IDAuODk4IDMuMDk1IDIgMy43MTZ2MC44MjVjLTMuMzkyIDAuMjc3LTYgMS45NDQtNiAzLjk1OWgxNGMwLTIuMDE1LTIuNjA4LTMuNjgyLTYtMy45NTl6XCJcbiAgICB9XG4gIH1dXG59O1xuZXhwb3J0cy51c2VyID0gdXNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMud2FybmluZyA9IHZvaWQgMDtcbnZhciB3YXJuaW5nID0ge1xuICBcInZpZXdCb3hcIjogXCIwIDAgMTYgMTZcIixcbiAgXCJjaGlsZHJlblwiOiBbe1xuICAgIFwibmFtZVwiOiBcInBhdGhcIixcbiAgICBcImF0dHJpYnNcIjoge1xuICAgICAgXCJmaWxsXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgXCJkXCI6IFwiTTggMS40NWw2LjcwNSAxMy4zNjNoLTEzLjQwOWw2LjcwNS0xMy4zNjN6TTggMGMtMC4zNDUgMC0wLjY5IDAuMjMzLTAuOTUxIDAuNjk4bC02LjgyOSAxMy42MTFjLTAuNTIzIDAuOTMtMC4wNzggMS42OTEgMC45ODkgMS42OTFoMTMuNTgzYzEuMDY3IDAgMS41MTItMC43NjEgMC45ODktMS42OTFoMGwtNi44MjktMTMuNjExYy0wLjI2Mi0wLjQ2NS0wLjYwNi0wLjY5OC0wLjk1MS0wLjY5OHYwelwiXG4gICAgfVxuICB9LCB7XG4gICAgXCJuYW1lXCI6IFwicGF0aFwiLFxuICAgIFwiYXR0cmlic1wiOiB7XG4gICAgICBcImZpbGxcIjogXCIjMDAwMDAwXCIsXG4gICAgICBcImRcIjogXCJNOSAxM2MwIDAuNTUyLTAuNDQ4IDEtMSAxcy0xLTAuNDQ4LTEtMWMwLTAuNTUyIDAuNDQ4LTEgMS0xczEgMC40NDggMSAxelwiXG4gICAgfVxuICB9LCB7XG4gICAgXCJuYW1lXCI6IFwicGF0aFwiLFxuICAgIFwiYXR0cmlic1wiOiB7XG4gICAgICBcImZpbGxcIjogXCIjMDAwMDAwXCIsXG4gICAgICBcImRcIjogXCJNOCAxMWMtMC41NTIgMC0xLTAuNDQ4LTEtMXYtM2MwLTAuNTUyIDAuNDQ4LTEgMS0xczEgMC40NDggMSAxdjNjMCAwLjU1Mi0wLjQ0OCAxLTEgMXpcIlxuICAgIH1cbiAgfV1cbn07XG5leHBvcnRzLndhcm5pbmcgPSB3YXJuaW5nOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSWNvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSWNvbi5JY29uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhCYXNlSWNvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSWNvbi53aXRoQmFzZUljb247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaG9yaXpvbnRhbENlbnRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaG9yaXpvbnRhbENlbnRlci5ob3Jpem9udGFsQ2VudGVyO1xuICB9XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9JY29uID0gcmVxdWlyZShcIi4vSWNvblwiKTtcblxudmFyIF9ob3Jpem9udGFsQ2VudGVyID0gcmVxdWlyZShcIi4vaG9yaXpvbnRhbENlbnRlclwiKTtcblxudmFyIF9kZWZhdWx0ID0gX0ljb24uSWNvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2Z1bmN0aW9uIFgoKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO31cbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7ZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztcbmV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztleHBvcnRzLmFjdD1YO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PVg7ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07XG5leHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtleHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07XG5leHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07ZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvKipcbiAqIFNwZWNpYWwgbGFuZ3VhZ2Utc3BlY2lmaWMgb3ZlcnJpZGVzLlxuICpcbiAqIFNvdXJjZTogZnRwOi8vZnRwLnVuaWNvZGUub3JnL1B1YmxpYy9VQ0QvbGF0ZXN0L3VjZC9TcGVjaWFsQ2FzaW5nLnR4dFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBMQU5HVUFHRVMgPSB7XG4gIHRyOiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNjldL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA2OSc6ICdcXHUwMTMwJ1xuICAgIH1cbiAgfSxcbiAgYXo6IHtcbiAgICByZWdleHA6IC9bXFx1MDA2OV0vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDY5JzogJ1xcdTAxMzAnXG4gICAgfVxuICB9LFxuICBsdDoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDY5XFx1MDA2QVxcdTAxMkZdXFx1MDMwN3xcXHUwMDY5XFx1MDMwN1tcXHUwMzAwXFx1MDMwMVxcdTAzMDNdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA2OVxcdTAzMDcnOiAnXFx1MDA0OScsXG4gICAgICAnXFx1MDA2QVxcdTAzMDcnOiAnXFx1MDA0QScsXG4gICAgICAnXFx1MDEyRlxcdTAzMDcnOiAnXFx1MDEyRScsXG4gICAgICAnXFx1MDA2OVxcdTAzMDdcXHUwMzAwJzogJ1xcdTAwQ0MnLFxuICAgICAgJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMSc6ICdcXHUwMENEJyxcbiAgICAgICdcXHUwMDY5XFx1MDMwN1xcdTAzMDMnOiAnXFx1MDEyOCdcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBVcHBlciBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIHZhciBsYW5nID0gTEFOR1VBR0VTW2xvY2FsZV1cblxuICBzdHIgPSBzdHIgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHN0cilcblxuICBpZiAobGFuZykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGxhbmcucmVnZXhwLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbGFuZy5tYXBbbV0gfSlcbiAgfVxuXG4gIHJldHVybiBzdHIudG9VcHBlckNhc2UoKVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGc9cmVxdWlyZShcInJlYWN0XCIpO2Z1bmN0aW9uIG4oYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOm4scT1nLnVzZVN5bmNFeHRlcm5hbFN0b3JlLHI9Zy51c2VSZWYsdD1nLnVzZUVmZmVjdCx1PWcudXNlTWVtbyx2PWcudXNlRGVidWdWYWx1ZTtcbmV4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3I9ZnVuY3Rpb24oYSxiLGUsbCxoKXt2YXIgYz1yKG51bGwpO2lmKG51bGw9PT1jLmN1cnJlbnQpe3ZhciBmPXtoYXNWYWx1ZTohMSx2YWx1ZTpudWxsfTtjLmN1cnJlbnQ9Zn1lbHNlIGY9Yy5jdXJyZW50O2M9dShmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7aWYoIWMpe2M9ITA7ZD1hO2E9bChhKTtpZih2b2lkIDAhPT1oJiZmLmhhc1ZhbHVlKXt2YXIgYj1mLnZhbHVlO2lmKGgoYixhKSlyZXR1cm4gaz1ifXJldHVybiBrPWF9Yj1rO2lmKHAoZCxhKSlyZXR1cm4gYjt2YXIgZT1sKGEpO2lmKHZvaWQgMCE9PWgmJmgoYixlKSlyZXR1cm4gYjtkPWE7cmV0dXJuIGs9ZX12YXIgYz0hMSxkLGssbT12b2lkIDA9PT1lP251bGw6ZTtyZXR1cm5bZnVuY3Rpb24oKXtyZXR1cm4gYShiKCkpfSxudWxsPT09bT92b2lkIDA6ZnVuY3Rpb24oKXtyZXR1cm4gYShtKCkpfV19LFtiLGUsbCxoXSk7dmFyIGQ9cShhLGNbMF0sY1sxXSk7XG50KGZ1bmN0aW9uKCl7Zi5oYXNWYWx1ZT0hMDtmLnZhbHVlPWR9LFtkXSk7dihkKTtyZXR1cm4gZH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS13aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgZmV0Y2hBcGlcbmlmICh0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5mZXRjaCkge1xuICAgIGZldGNoQXBpID0gZ2xvYmFsLmZldGNoXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmZldGNoKSB7XG4gICAgZmV0Y2hBcGkgPSB3aW5kb3cuZmV0Y2hcbiAgfVxufVxuXG5pZiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LmRvY3VtZW50ID09PSAndW5kZWZpbmVkJykpIHtcbiAgdmFyIGYgPSBmZXRjaEFwaSB8fCByZXF1aXJlKCdjcm9zcy1mZXRjaCcpXG4gIGlmIChmLmRlZmF1bHQpIGYgPSBmLmRlZmF1bHRcbiAgZXhwb3J0cy5kZWZhdWx0ID0gZlxuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdFxufVxuIiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByO1xufVxuZXhwb3J0IHsgX2FycmF5V2l0aEhvbGVzIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikge1xuICBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG59XG5leHBvcnQgeyBfY2xhc3NDYWxsQ2hlY2sgYXMgZGVmYXVsdCB9OyIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGU7XG59XG5leHBvcnQgeyBfY3JlYXRlQ2xhc3MgYXMgZGVmYXVsdCB9OyIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7XG4gIHJldHVybiAociA9IHRvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwge1xuICAgIHZhbHVlOiB0LFxuICAgIGVudW1lcmFibGU6ICEwLFxuICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgd3JpdGFibGU6ICEwXG4gIH0pIDogZVtyXSA9IHQsIGU7XG59XG5leHBvcnQgeyBfZGVmaW5lUHJvcGVydHkgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5leHBvcnQgeyBfbm9uSXRlcmFibGVSZXN0IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCB0b1ByaW1pdGl2ZSBmcm9tIFwiLi90b1ByaW1pdGl2ZS5qc1wiO1xuZnVuY3Rpb24gdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5leHBvcnQgeyB0b1Byb3BlcnR5S2V5IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmZ1bmN0aW9uIHRvUHJpbWl0aXZlKHQsIHIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7XG59XG5leHBvcnQgeyB0b1ByaW1pdGl2ZSBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmV4cG9ydCB7IF90eXBlb2YgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHtcbiAgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpO1xuICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTtcbiAgcmV0dXJuIG47XG59XG5leHBvcnQgeyBfYXJyYXlMaWtlVG9BcnJheSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHtcbiAgaWYgKHIpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkociwgYSk7XG4gICAgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTtcbiAgICByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBhcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5leHBvcnQgeyBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgYXMgZGVmYXVsdCB9OyIsIi8vIHNyYy91dGlscy9lbnYudHNcbnZhciBOT1RISU5HID0gU3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik7XG52YXIgRFJBRlRBQkxFID0gU3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTtcbnZhciBEUkFGVF9TVEFURSA9IFN5bWJvbC5mb3IoXCJpbW1lci1zdGF0ZVwiKTtcblxuLy8gc3JjL3V0aWxzL2Vycm9ycy50c1xudmFyIGVycm9ycyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFtcbiAgLy8gQWxsIGVycm9yIGNvZGVzLCBzdGFydGluZyBieSAwOlxuICBmdW5jdGlvbihwbHVnaW4pIHtcbiAgICByZXR1cm4gYFRoZSBwbHVnaW4gZm9yICcke3BsdWdpbn0nIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBcXGBlbmFibGUke3BsdWdpbn0oKVxcYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLmA7XG4gIH0sXG4gIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIGBwcm9kdWNlIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGluZ3MgdGhhdCBhcmUgZHJhZnRhYmxlOiBwbGFpbiBvYmplY3RzLCBhcnJheXMsIE1hcCwgU2V0IG9yIGNsYXNzZXMgdGhhdCBhcmUgbWFya2VkIHdpdGggJ1tpbW1lcmFibGVdOiB0cnVlJy4gR290ICcke3RoaW5nfSdgO1xuICB9LFxuICBcIlRoaXMgb2JqZWN0IGhhcyBiZWVuIGZyb3plbiBhbmQgc2hvdWxkIG5vdCBiZSBtdXRhdGVkXCIsXG4gIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiICsgZGF0YTtcbiAgfSxcbiAgXCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLFxuICBcIkltbWVyIGZvcmJpZHMgY2lyY3VsYXIgcmVmZXJlbmNlc1wiLFxuICBcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLFxuICBcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLFxuICBcIkZpcnN0IGFyZ3VtZW50IHRvIGBjcmVhdGVEcmFmdGAgbXVzdCBiZSBhIHBsYWluIG9iamVjdCwgYW4gYXJyYXksIG9yIGFuIGltbWVyYWJsZSBvYmplY3RcIixcbiAgXCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsXG4gIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIGAnY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6ICR7dGhpbmd9YDtcbiAgfSxcbiAgXCJPYmplY3QuZGVmaW5lUHJvcGVydHkoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLFxuICBcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsXG4gIFwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsXG4gIFwiSW1tZXIgb25seSBzdXBwb3J0cyBzZXR0aW5nIGFycmF5IGluZGljZXMgYW5kIHRoZSAnbGVuZ3RoJyBwcm9wZXJ0eVwiLFxuICBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBgJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogJHt0aGluZ31gO1xuICB9XG4gIC8vIE5vdGU6IGlmIG1vcmUgZXJyb3JzIGFyZSBhZGRlZCwgdGhlIGVycm9yT2Zmc2V0IGluIFBhdGNoZXMudHMgc2hvdWxkIGJlIGluY3JlYXNlZFxuICAvLyBTZWUgUGF0Y2hlcy50cyBmb3IgYWRkaXRpb25hbCBlcnJvcnNcbl0gOiBbXTtcbmZ1bmN0aW9uIGRpZShlcnJvciwgLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc3QgZSA9IGVycm9yc1tlcnJvcl07XG4gICAgY29uc3QgbXNnID0gdHlwZW9mIGUgPT09IFwiZnVuY3Rpb25cIiA/IGUuYXBwbHkobnVsbCwgYXJncykgOiBlO1xuICAgIHRocm93IG5ldyBFcnJvcihgW0ltbWVyXSAke21zZ31gKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYFtJbW1lcl0gbWluaWZpZWQgZXJyb3IgbnI6ICR7ZXJyb3J9LiBGdWxsIGVycm9yIGF0OiBodHRwczovL2JpdC5seS8zY1hFS1dmYFxuICApO1xufVxuXG4vLyBzcmMvdXRpbHMvY29tbW9uLnRzXG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5mdW5jdGlvbiBpc0RyYWZ0KHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmICEhdmFsdWVbRFJBRlRfU1RBVEVdO1xufVxuZnVuY3Rpb24gaXNEcmFmdGFibGUodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCAhIXZhbHVlW0RSQUZUQUJMRV0gfHwgISF2YWx1ZS5jb25zdHJ1Y3Rvcj8uW0RSQUZUQUJMRV0gfHwgaXNNYXAodmFsdWUpIHx8IGlzU2V0KHZhbHVlKTtcbn1cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci50b1N0cmluZygpO1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIilcbiAgICByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHByb3RvID0gZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBDdG9yID0gT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIGlmIChDdG9yID09PSBPYmplY3QpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSBcImZ1bmN0aW9uXCIgJiYgRnVuY3Rpb24udG9TdHJpbmcuY2FsbChDdG9yKSA9PT0gb2JqZWN0Q3RvclN0cmluZztcbn1cbmZ1bmN0aW9uIG9yaWdpbmFsKHZhbHVlKSB7XG4gIGlmICghaXNEcmFmdCh2YWx1ZSkpXG4gICAgZGllKDE1LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZVtEUkFGVF9TVEFURV0uYmFzZV87XG59XG5mdW5jdGlvbiBlYWNoKG9iaiwgaXRlcikge1xuICBpZiAoZ2V0QXJjaHR5cGUob2JqKSA9PT0gMCAvKiBPYmplY3QgKi8pIHtcbiAgICBSZWZsZWN0Lm93bktleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGl0ZXIoa2V5LCBvYmpba2V5XSwgb2JqKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmouZm9yRWFjaCgoZW50cnksIGluZGV4KSA9PiBpdGVyKGluZGV4LCBlbnRyeSwgb2JqKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFyY2h0eXBlKHRoaW5nKSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpbmdbRFJBRlRfU1RBVEVdO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS50eXBlXyA6IEFycmF5LmlzQXJyYXkodGhpbmcpID8gMSAvKiBBcnJheSAqLyA6IGlzTWFwKHRoaW5nKSA/IDIgLyogTWFwICovIDogaXNTZXQodGhpbmcpID8gMyAvKiBTZXQgKi8gOiAwIC8qIE9iamVjdCAqLztcbn1cbmZ1bmN0aW9uIGhhcyh0aGluZywgcHJvcCkge1xuICByZXR1cm4gZ2V0QXJjaHR5cGUodGhpbmcpID09PSAyIC8qIE1hcCAqLyA/IHRoaW5nLmhhcyhwcm9wKSA6IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGluZywgcHJvcCk7XG59XG5mdW5jdGlvbiBnZXQodGhpbmcsIHByb3ApIHtcbiAgcmV0dXJuIGdldEFyY2h0eXBlKHRoaW5nKSA9PT0gMiAvKiBNYXAgKi8gPyB0aGluZy5nZXQocHJvcCkgOiB0aGluZ1twcm9wXTtcbn1cbmZ1bmN0aW9uIHNldCh0aGluZywgcHJvcE9yT2xkVmFsdWUsIHZhbHVlKSB7XG4gIGNvbnN0IHQgPSBnZXRBcmNodHlwZSh0aGluZyk7XG4gIGlmICh0ID09PSAyIC8qIE1hcCAqLylcbiAgICB0aGluZy5zZXQocHJvcE9yT2xkVmFsdWUsIHZhbHVlKTtcbiAgZWxzZSBpZiAodCA9PT0gMyAvKiBTZXQgKi8pIHtcbiAgICB0aGluZy5hZGQodmFsdWUpO1xuICB9IGVsc2VcbiAgICB0aGluZ1twcm9wT3JPbGRWYWx1ZV0gPSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuZnVuY3Rpb24gaXNNYXAodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgaW5zdGFuY2VvZiBNYXA7XG59XG5mdW5jdGlvbiBpc1NldCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIFNldDtcbn1cbmZ1bmN0aW9uIGxhdGVzdChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuY29weV8gfHwgc3RhdGUuYmFzZV87XG59XG5mdW5jdGlvbiBzaGFsbG93Q29weShiYXNlLCBzdHJpY3QpIHtcbiAgaWYgKGlzTWFwKGJhc2UpKSB7XG4gICAgcmV0dXJuIG5ldyBNYXAoYmFzZSk7XG4gIH1cbiAgaWYgKGlzU2V0KGJhc2UpKSB7XG4gICAgcmV0dXJuIG5ldyBTZXQoYmFzZSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoYmFzZSkpXG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJhc2UpO1xuICBjb25zdCBpc1BsYWluID0gaXNQbGFpbk9iamVjdChiYXNlKTtcbiAgaWYgKHN0cmljdCA9PT0gdHJ1ZSB8fCBzdHJpY3QgPT09IFwiY2xhc3Nfb25seVwiICYmICFpc1BsYWluKSB7XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhiYXNlKTtcbiAgICBkZWxldGUgZGVzY3JpcHRvcnNbRFJBRlRfU1RBVEVdO1xuICAgIGxldCBrZXlzID0gUmVmbGVjdC5vd25LZXlzKGRlc2NyaXB0b3JzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBjb25zdCBkZXNjID0gZGVzY3JpcHRvcnNba2V5XTtcbiAgICAgIGlmIChkZXNjLndyaXRhYmxlID09PSBmYWxzZSkge1xuICAgICAgICBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgZGVzYy5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KVxuICAgICAgICBkZXNjcmlwdG9yc1trZXldID0ge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAvLyBjb3VsZCBsaXZlIHdpdGggISFkZXNjLnNldCBhcyB3ZWxsIGhlcmUuLi5cbiAgICAgICAgICBlbnVtZXJhYmxlOiBkZXNjLmVudW1lcmFibGUsXG4gICAgICAgICAgdmFsdWU6IGJhc2Vba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihiYXNlKSwgZGVzY3JpcHRvcnMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG90eXBlT2YoYmFzZSk7XG4gICAgaWYgKHByb3RvICE9PSBudWxsICYmIGlzUGxhaW4pIHtcbiAgICAgIHJldHVybiB7IC4uLmJhc2UgfTtcbiAgICB9XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqLCBiYXNlKTtcbiAgfVxufVxuZnVuY3Rpb24gZnJlZXplKG9iaiwgZGVlcCA9IGZhbHNlKSB7XG4gIGlmIChpc0Zyb3plbihvYmopIHx8IGlzRHJhZnQob2JqKSB8fCAhaXNEcmFmdGFibGUob2JqKSlcbiAgICByZXR1cm4gb2JqO1xuICBpZiAoZ2V0QXJjaHR5cGUob2JqKSA+IDEpIHtcbiAgICBvYmouc2V0ID0gb2JqLmFkZCA9IG9iai5jbGVhciA9IG9iai5kZWxldGUgPSBkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnM7XG4gIH1cbiAgT2JqZWN0LmZyZWV6ZShvYmopO1xuICBpZiAoZGVlcClcbiAgICBPYmplY3QuZW50cmllcyhvYmopLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gZnJlZXplKHZhbHVlLCB0cnVlKSk7XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnMoKSB7XG4gIGRpZSgyKTtcbn1cbmZ1bmN0aW9uIGlzRnJvemVuKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmlzRnJvemVuKG9iaik7XG59XG5cbi8vIHNyYy91dGlscy9wbHVnaW5zLnRzXG52YXIgcGx1Z2lucyA9IHt9O1xuZnVuY3Rpb24gZ2V0UGx1Z2luKHBsdWdpbktleSkge1xuICBjb25zdCBwbHVnaW4gPSBwbHVnaW5zW3BsdWdpbktleV07XG4gIGlmICghcGx1Z2luKSB7XG4gICAgZGllKDAsIHBsdWdpbktleSk7XG4gIH1cbiAgcmV0dXJuIHBsdWdpbjtcbn1cbmZ1bmN0aW9uIGxvYWRQbHVnaW4ocGx1Z2luS2V5LCBpbXBsZW1lbnRhdGlvbikge1xuICBpZiAoIXBsdWdpbnNbcGx1Z2luS2V5XSlcbiAgICBwbHVnaW5zW3BsdWdpbktleV0gPSBpbXBsZW1lbnRhdGlvbjtcbn1cblxuLy8gc3JjL2NvcmUvc2NvcGUudHNcbnZhciBjdXJyZW50U2NvcGU7XG5mdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG4gIHJldHVybiBjdXJyZW50U2NvcGU7XG59XG5mdW5jdGlvbiBjcmVhdGVTY29wZShwYXJlbnRfLCBpbW1lcl8pIHtcbiAgcmV0dXJuIHtcbiAgICBkcmFmdHNfOiBbXSxcbiAgICBwYXJlbnRfLFxuICAgIGltbWVyXyxcbiAgICAvLyBXaGVuZXZlciB0aGUgbW9kaWZpZWQgZHJhZnQgY29udGFpbnMgYSBkcmFmdCBmcm9tIGFub3RoZXIgc2NvcGUsIHdlXG4gICAgLy8gbmVlZCB0byBwcmV2ZW50IGF1dG8tZnJlZXppbmcgc28gdGhlIHVub3duZWQgZHJhZnQgY2FuIGJlIGZpbmFsaXplZC5cbiAgICBjYW5BdXRvRnJlZXplXzogdHJ1ZSxcbiAgICB1bmZpbmFsaXplZERyYWZ0c186IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZVBhdGNoZXNJblNjb3BlKHNjb3BlLCBwYXRjaExpc3RlbmVyKSB7XG4gIGlmIChwYXRjaExpc3RlbmVyKSB7XG4gICAgZ2V0UGx1Z2luKFwiUGF0Y2hlc1wiKTtcbiAgICBzY29wZS5wYXRjaGVzXyA9IFtdO1xuICAgIHNjb3BlLmludmVyc2VQYXRjaGVzXyA9IFtdO1xuICAgIHNjb3BlLnBhdGNoTGlzdGVuZXJfID0gcGF0Y2hMaXN0ZW5lcjtcbiAgfVxufVxuZnVuY3Rpb24gcmV2b2tlU2NvcGUoc2NvcGUpIHtcbiAgbGVhdmVTY29wZShzY29wZSk7XG4gIHNjb3BlLmRyYWZ0c18uZm9yRWFjaChyZXZva2VEcmFmdCk7XG4gIHNjb3BlLmRyYWZ0c18gPSBudWxsO1xufVxuZnVuY3Rpb24gbGVhdmVTY29wZShzY29wZSkge1xuICBpZiAoc2NvcGUgPT09IGN1cnJlbnRTY29wZSkge1xuICAgIGN1cnJlbnRTY29wZSA9IHNjb3BlLnBhcmVudF87XG4gIH1cbn1cbmZ1bmN0aW9uIGVudGVyU2NvcGUoaW1tZXIyKSB7XG4gIHJldHVybiBjdXJyZW50U2NvcGUgPSBjcmVhdGVTY29wZShjdXJyZW50U2NvcGUsIGltbWVyMik7XG59XG5mdW5jdGlvbiByZXZva2VEcmFmdChkcmFmdCkge1xuICBjb25zdCBzdGF0ZSA9IGRyYWZ0W0RSQUZUX1NUQVRFXTtcbiAgaWYgKHN0YXRlLnR5cGVfID09PSAwIC8qIE9iamVjdCAqLyB8fCBzdGF0ZS50eXBlXyA9PT0gMSAvKiBBcnJheSAqLylcbiAgICBzdGF0ZS5yZXZva2VfKCk7XG4gIGVsc2VcbiAgICBzdGF0ZS5yZXZva2VkXyA9IHRydWU7XG59XG5cbi8vIHNyYy9jb3JlL2ZpbmFsaXplLnRzXG5mdW5jdGlvbiBwcm9jZXNzUmVzdWx0KHJlc3VsdCwgc2NvcGUpIHtcbiAgc2NvcGUudW5maW5hbGl6ZWREcmFmdHNfID0gc2NvcGUuZHJhZnRzXy5sZW5ndGg7XG4gIGNvbnN0IGJhc2VEcmFmdCA9IHNjb3BlLmRyYWZ0c19bMF07XG4gIGNvbnN0IGlzUmVwbGFjZWQgPSByZXN1bHQgIT09IHZvaWQgMCAmJiByZXN1bHQgIT09IGJhc2VEcmFmdDtcbiAgaWYgKGlzUmVwbGFjZWQpIHtcbiAgICBpZiAoYmFzZURyYWZ0W0RSQUZUX1NUQVRFXS5tb2RpZmllZF8pIHtcbiAgICAgIHJldm9rZVNjb3BlKHNjb3BlKTtcbiAgICAgIGRpZSg0KTtcbiAgICB9XG4gICAgaWYgKGlzRHJhZnRhYmxlKHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IGZpbmFsaXplKHNjb3BlLCByZXN1bHQpO1xuICAgICAgaWYgKCFzY29wZS5wYXJlbnRfKVxuICAgICAgICBtYXliZUZyZWV6ZShzY29wZSwgcmVzdWx0KTtcbiAgICB9XG4gICAgaWYgKHNjb3BlLnBhdGNoZXNfKSB7XG4gICAgICBnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyhcbiAgICAgICAgYmFzZURyYWZ0W0RSQUZUX1NUQVRFXS5iYXNlXyxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBzY29wZS5wYXRjaGVzXyxcbiAgICAgICAgc2NvcGUuaW52ZXJzZVBhdGNoZXNfXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmaW5hbGl6ZShzY29wZSwgYmFzZURyYWZ0LCBbXSk7XG4gIH1cbiAgcmV2b2tlU2NvcGUoc2NvcGUpO1xuICBpZiAoc2NvcGUucGF0Y2hlc18pIHtcbiAgICBzY29wZS5wYXRjaExpc3RlbmVyXyhzY29wZS5wYXRjaGVzXywgc2NvcGUuaW52ZXJzZVBhdGNoZXNfKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0ICE9PSBOT1RISU5HID8gcmVzdWx0IDogdm9pZCAwO1xufVxuZnVuY3Rpb24gZmluYWxpemUocm9vdFNjb3BlLCB2YWx1ZSwgcGF0aCkge1xuICBpZiAoaXNGcm96ZW4odmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgY29uc3Qgc3RhdGUgPSB2YWx1ZVtEUkFGVF9TVEFURV07XG4gIGlmICghc3RhdGUpIHtcbiAgICBlYWNoKFxuICAgICAgdmFsdWUsXG4gICAgICAoa2V5LCBjaGlsZFZhbHVlKSA9PiBmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgc3RhdGUsIHZhbHVlLCBrZXksIGNoaWxkVmFsdWUsIHBhdGgpXG4gICAgKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHN0YXRlLnNjb3BlXyAhPT0gcm9vdFNjb3BlKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgaWYgKCFzdGF0ZS5tb2RpZmllZF8pIHtcbiAgICBtYXliZUZyZWV6ZShyb290U2NvcGUsIHN0YXRlLmJhc2VfLCB0cnVlKTtcbiAgICByZXR1cm4gc3RhdGUuYmFzZV87XG4gIH1cbiAgaWYgKCFzdGF0ZS5maW5hbGl6ZWRfKSB7XG4gICAgc3RhdGUuZmluYWxpemVkXyA9IHRydWU7XG4gICAgc3RhdGUuc2NvcGVfLnVuZmluYWxpemVkRHJhZnRzXy0tO1xuICAgIGNvbnN0IHJlc3VsdCA9IHN0YXRlLmNvcHlfO1xuICAgIGxldCByZXN1bHRFYWNoID0gcmVzdWx0O1xuICAgIGxldCBpc1NldDIgPSBmYWxzZTtcbiAgICBpZiAoc3RhdGUudHlwZV8gPT09IDMgLyogU2V0ICovKSB7XG4gICAgICByZXN1bHRFYWNoID0gbmV3IFNldChyZXN1bHQpO1xuICAgICAgcmVzdWx0LmNsZWFyKCk7XG4gICAgICBpc1NldDIgPSB0cnVlO1xuICAgIH1cbiAgICBlYWNoKFxuICAgICAgcmVzdWx0RWFjaCxcbiAgICAgIChrZXksIGNoaWxkVmFsdWUpID0+IGZpbmFsaXplUHJvcGVydHkocm9vdFNjb3BlLCBzdGF0ZSwgcmVzdWx0LCBrZXksIGNoaWxkVmFsdWUsIHBhdGgsIGlzU2V0MilcbiAgICApO1xuICAgIG1heWJlRnJlZXplKHJvb3RTY29wZSwgcmVzdWx0LCBmYWxzZSk7XG4gICAgaWYgKHBhdGggJiYgcm9vdFNjb3BlLnBhdGNoZXNfKSB7XG4gICAgICBnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmdlbmVyYXRlUGF0Y2hlc18oXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwYXRoLFxuICAgICAgICByb290U2NvcGUucGF0Y2hlc18sXG4gICAgICAgIHJvb3RTY29wZS5pbnZlcnNlUGF0Y2hlc19cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGF0ZS5jb3B5Xztcbn1cbmZ1bmN0aW9uIGZpbmFsaXplUHJvcGVydHkocm9vdFNjb3BlLCBwYXJlbnRTdGF0ZSwgdGFyZ2V0T2JqZWN0LCBwcm9wLCBjaGlsZFZhbHVlLCByb290UGF0aCwgdGFyZ2V0SXNTZXQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBjaGlsZFZhbHVlID09PSB0YXJnZXRPYmplY3QpXG4gICAgZGllKDUpO1xuICBpZiAoaXNEcmFmdChjaGlsZFZhbHVlKSkge1xuICAgIGNvbnN0IHBhdGggPSByb290UGF0aCAmJiBwYXJlbnRTdGF0ZSAmJiBwYXJlbnRTdGF0ZS50eXBlXyAhPT0gMyAvKiBTZXQgKi8gJiYgLy8gU2V0IG9iamVjdHMgYXJlIGF0b21pYyBzaW5jZSB0aGV5IGhhdmUgbm8ga2V5cy5cbiAgICAhaGFzKHBhcmVudFN0YXRlLmFzc2lnbmVkXywgcHJvcCkgPyByb290UGF0aC5jb25jYXQocHJvcCkgOiB2b2lkIDA7XG4gICAgY29uc3QgcmVzID0gZmluYWxpemUocm9vdFNjb3BlLCBjaGlsZFZhbHVlLCBwYXRoKTtcbiAgICBzZXQodGFyZ2V0T2JqZWN0LCBwcm9wLCByZXMpO1xuICAgIGlmIChpc0RyYWZ0KHJlcykpIHtcbiAgICAgIHJvb3RTY29wZS5jYW5BdXRvRnJlZXplXyA9IGZhbHNlO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKHRhcmdldElzU2V0KSB7XG4gICAgdGFyZ2V0T2JqZWN0LmFkZChjaGlsZFZhbHVlKTtcbiAgfVxuICBpZiAoaXNEcmFmdGFibGUoY2hpbGRWYWx1ZSkgJiYgIWlzRnJvemVuKGNoaWxkVmFsdWUpKSB7XG4gICAgaWYgKCFyb290U2NvcGUuaW1tZXJfLmF1dG9GcmVlemVfICYmIHJvb3RTY29wZS51bmZpbmFsaXplZERyYWZ0c18gPCAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpbmFsaXplKHJvb3RTY29wZSwgY2hpbGRWYWx1ZSk7XG4gICAgaWYgKCghcGFyZW50U3RhdGUgfHwgIXBhcmVudFN0YXRlLnNjb3BlXy5wYXJlbnRfKSAmJiB0eXBlb2YgcHJvcCAhPT0gXCJzeW1ib2xcIiAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0T2JqZWN0LCBwcm9wKSlcbiAgICAgIG1heWJlRnJlZXplKHJvb3RTY29wZSwgY2hpbGRWYWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1heWJlRnJlZXplKHNjb3BlLCB2YWx1ZSwgZGVlcCA9IGZhbHNlKSB7XG4gIGlmICghc2NvcGUucGFyZW50XyAmJiBzY29wZS5pbW1lcl8uYXV0b0ZyZWV6ZV8gJiYgc2NvcGUuY2FuQXV0b0ZyZWV6ZV8pIHtcbiAgICBmcmVlemUodmFsdWUsIGRlZXApO1xuICB9XG59XG5cbi8vIHNyYy9jb3JlL3Byb3h5LnRzXG5mdW5jdGlvbiBjcmVhdGVQcm94eVByb3h5KGJhc2UsIHBhcmVudCkge1xuICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShiYXNlKTtcbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgdHlwZV86IGlzQXJyYXkgPyAxIC8qIEFycmF5ICovIDogMCAvKiBPYmplY3QgKi8sXG4gICAgLy8gVHJhY2sgd2hpY2ggcHJvZHVjZSBjYWxsIHRoaXMgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgIHNjb3BlXzogcGFyZW50ID8gcGFyZW50LnNjb3BlXyA6IGdldEN1cnJlbnRTY29wZSgpLFxuICAgIC8vIFRydWUgZm9yIGJvdGggc2hhbGxvdyBhbmQgZGVlcCBjaGFuZ2VzLlxuICAgIG1vZGlmaWVkXzogZmFsc2UsXG4gICAgLy8gVXNlZCBkdXJpbmcgZmluYWxpemF0aW9uLlxuICAgIGZpbmFsaXplZF86IGZhbHNlLFxuICAgIC8vIFRyYWNrIHdoaWNoIHByb3BlcnRpZXMgaGF2ZSBiZWVuIGFzc2lnbmVkICh0cnVlKSBvciBkZWxldGVkIChmYWxzZSkuXG4gICAgYXNzaWduZWRfOiB7fSxcbiAgICAvLyBUaGUgcGFyZW50IGRyYWZ0IHN0YXRlLlxuICAgIHBhcmVudF86IHBhcmVudCxcbiAgICAvLyBUaGUgYmFzZSBzdGF0ZS5cbiAgICBiYXNlXzogYmFzZSxcbiAgICAvLyBUaGUgYmFzZSBwcm94eS5cbiAgICBkcmFmdF86IG51bGwsXG4gICAgLy8gc2V0IGJlbG93XG4gICAgLy8gVGhlIGJhc2UgY29weSB3aXRoIGFueSB1cGRhdGVkIHZhbHVlcy5cbiAgICBjb3B5XzogbnVsbCxcbiAgICAvLyBDYWxsZWQgYnkgdGhlIGBwcm9kdWNlYCBmdW5jdGlvbi5cbiAgICByZXZva2VfOiBudWxsLFxuICAgIGlzTWFudWFsXzogZmFsc2VcbiAgfTtcbiAgbGV0IHRhcmdldCA9IHN0YXRlO1xuICBsZXQgdHJhcHMgPSBvYmplY3RUcmFwcztcbiAgaWYgKGlzQXJyYXkpIHtcbiAgICB0YXJnZXQgPSBbc3RhdGVdO1xuICAgIHRyYXBzID0gYXJyYXlUcmFwcztcbiAgfVxuICBjb25zdCB7IHJldm9rZSwgcHJveHkgfSA9IFByb3h5LnJldm9jYWJsZSh0YXJnZXQsIHRyYXBzKTtcbiAgc3RhdGUuZHJhZnRfID0gcHJveHk7XG4gIHN0YXRlLnJldm9rZV8gPSByZXZva2U7XG4gIHJldHVybiBwcm94eTtcbn1cbnZhciBvYmplY3RUcmFwcyA9IHtcbiAgZ2V0KHN0YXRlLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgPT09IERSQUZUX1NUQVRFKVxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIGNvbnN0IHNvdXJjZSA9IGxhdGVzdChzdGF0ZSk7XG4gICAgaWYgKCFoYXMoc291cmNlLCBwcm9wKSkge1xuICAgICAgcmV0dXJuIHJlYWRQcm9wRnJvbVByb3RvKHN0YXRlLCBzb3VyY2UsIHByb3ApO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNvdXJjZVtwcm9wXTtcbiAgICBpZiAoc3RhdGUuZmluYWxpemVkXyB8fCAhaXNEcmFmdGFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gcGVlayhzdGF0ZS5iYXNlXywgcHJvcCkpIHtcbiAgICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZS5jb3B5X1twcm9wXSA9IGNyZWF0ZVByb3h5KHZhbHVlLCBzdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgaGFzKHN0YXRlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHByb3AgaW4gbGF0ZXN0KHN0YXRlKTtcbiAgfSxcbiAgb3duS2V5cyhzdGF0ZSkge1xuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMobGF0ZXN0KHN0YXRlKSk7XG4gIH0sXG4gIHNldChzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBkZXNjID0gZ2V0RGVzY3JpcHRvckZyb21Qcm90byhsYXRlc3Qoc3RhdGUpLCBwcm9wKTtcbiAgICBpZiAoZGVzYz8uc2V0KSB7XG4gICAgICBkZXNjLnNldC5jYWxsKHN0YXRlLmRyYWZ0XywgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG4gICAgICBjb25zdCBjdXJyZW50MiA9IHBlZWsobGF0ZXN0KHN0YXRlKSwgcHJvcCk7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBjdXJyZW50Mj8uW0RSQUZUX1NUQVRFXTtcbiAgICAgIGlmIChjdXJyZW50U3RhdGUgJiYgY3VycmVudFN0YXRlLmJhc2VfID09PSB2YWx1ZSkge1xuICAgICAgICBzdGF0ZS5jb3B5X1twcm9wXSA9IHZhbHVlO1xuICAgICAgICBzdGF0ZS5hc3NpZ25lZF9bcHJvcF0gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXModmFsdWUsIGN1cnJlbnQyKSAmJiAodmFsdWUgIT09IHZvaWQgMCB8fCBoYXMoc3RhdGUuYmFzZV8sIHByb3ApKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5jb3B5X1twcm9wXSA9PT0gdmFsdWUgJiYgLy8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgbmV3IHByb3BzIHdpdGggdmFsdWUgJ3VuZGVmaW5lZCdcbiAgICAodmFsdWUgIT09IHZvaWQgMCB8fCBwcm9wIGluIHN0YXRlLmNvcHlfKSB8fCAvLyBzcGVjaWFsIGNhc2U6IE5hTlxuICAgIE51bWJlci5pc05hTih2YWx1ZSkgJiYgTnVtYmVyLmlzTmFOKHN0YXRlLmNvcHlfW3Byb3BdKSlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIHN0YXRlLmNvcHlfW3Byb3BdID0gdmFsdWU7XG4gICAgc3RhdGUuYXNzaWduZWRfW3Byb3BdID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoc3RhdGUsIHByb3ApIHtcbiAgICBpZiAocGVlayhzdGF0ZS5iYXNlXywgcHJvcCkgIT09IHZvaWQgMCB8fCBwcm9wIGluIHN0YXRlLmJhc2VfKSB7XG4gICAgICBzdGF0ZS5hc3NpZ25lZF9bcHJvcF0gPSBmYWxzZTtcbiAgICAgIHByZXBhcmVDb3B5KHN0YXRlKTtcbiAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHN0YXRlLmFzc2lnbmVkX1twcm9wXTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmNvcHlfKSB7XG4gICAgICBkZWxldGUgc3RhdGUuY29weV9bcHJvcF07XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICAvLyBOb3RlOiBXZSBuZXZlciBjb2VyY2UgYGRlc2MudmFsdWVgIGludG8gYW4gSW1tZXIgZHJhZnQsIGJlY2F1c2Ugd2UgY2FuJ3QgbWFrZVxuICAvLyB0aGUgc2FtZSBndWFyYW50ZWUgaW4gRVM1IG1vZGUuXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzdGF0ZSwgcHJvcCkge1xuICAgIGNvbnN0IG93bmVyID0gbGF0ZXN0KHN0YXRlKTtcbiAgICBjb25zdCBkZXNjID0gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob3duZXIsIHByb3ApO1xuICAgIGlmICghZGVzYylcbiAgICAgIHJldHVybiBkZXNjO1xuICAgIHJldHVybiB7XG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogc3RhdGUudHlwZV8gIT09IDEgLyogQXJyYXkgKi8gfHwgcHJvcCAhPT0gXCJsZW5ndGhcIixcbiAgICAgIGVudW1lcmFibGU6IGRlc2MuZW51bWVyYWJsZSxcbiAgICAgIHZhbHVlOiBvd25lcltwcm9wXVxuICAgIH07XG4gIH0sXG4gIGRlZmluZVByb3BlcnR5KCkge1xuICAgIGRpZSgxMSk7XG4gIH0sXG4gIGdldFByb3RvdHlwZU9mKHN0YXRlKSB7XG4gICAgcmV0dXJuIGdldFByb3RvdHlwZU9mKHN0YXRlLmJhc2VfKTtcbiAgfSxcbiAgc2V0UHJvdG90eXBlT2YoKSB7XG4gICAgZGllKDEyKTtcbiAgfVxufTtcbnZhciBhcnJheVRyYXBzID0ge307XG5lYWNoKG9iamVjdFRyYXBzLCAoa2V5LCBmbikgPT4ge1xuICBhcnJheVRyYXBzW2tleV0gPSBmdW5jdGlvbigpIHtcbiAgICBhcmd1bWVudHNbMF0gPSBhcmd1bWVudHNbMF1bMF07XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59KTtcbmFycmF5VHJhcHMuZGVsZXRlUHJvcGVydHkgPSBmdW5jdGlvbihzdGF0ZSwgcHJvcCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGlzTmFOKHBhcnNlSW50KHByb3ApKSlcbiAgICBkaWUoMTMpO1xuICByZXR1cm4gYXJyYXlUcmFwcy5zZXQuY2FsbCh0aGlzLCBzdGF0ZSwgcHJvcCwgdm9pZCAwKTtcbn07XG5hcnJheVRyYXBzLnNldCA9IGZ1bmN0aW9uKHN0YXRlLCBwcm9wLCB2YWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHByb3AgIT09IFwibGVuZ3RoXCIgJiYgaXNOYU4ocGFyc2VJbnQocHJvcCkpKVxuICAgIGRpZSgxNCk7XG4gIHJldHVybiBvYmplY3RUcmFwcy5zZXQuY2FsbCh0aGlzLCBzdGF0ZVswXSwgcHJvcCwgdmFsdWUsIHN0YXRlWzBdKTtcbn07XG5mdW5jdGlvbiBwZWVrKGRyYWZ0LCBwcm9wKSB7XG4gIGNvbnN0IHN0YXRlID0gZHJhZnRbRFJBRlRfU1RBVEVdO1xuICBjb25zdCBzb3VyY2UgPSBzdGF0ZSA/IGxhdGVzdChzdGF0ZSkgOiBkcmFmdDtcbiAgcmV0dXJuIHNvdXJjZVtwcm9wXTtcbn1cbmZ1bmN0aW9uIHJlYWRQcm9wRnJvbVByb3RvKHN0YXRlLCBzb3VyY2UsIHByb3ApIHtcbiAgY29uc3QgZGVzYyA9IGdldERlc2NyaXB0b3JGcm9tUHJvdG8oc291cmNlLCBwcm9wKTtcbiAgcmV0dXJuIGRlc2MgPyBgdmFsdWVgIGluIGRlc2MgPyBkZXNjLnZhbHVlIDogKFxuICAgIC8vIFRoaXMgaXMgYSB2ZXJ5IHNwZWNpYWwgY2FzZSwgaWYgdGhlIHByb3AgaXMgYSBnZXR0ZXIgZGVmaW5lZCBieSB0aGVcbiAgICAvLyBwcm90b3R5cGUsIHdlIHNob3VsZCBpbnZva2UgaXQgd2l0aCB0aGUgZHJhZnQgYXMgY29udGV4dCFcbiAgICBkZXNjLmdldD8uY2FsbChzdGF0ZS5kcmFmdF8pXG4gICkgOiB2b2lkIDA7XG59XG5mdW5jdGlvbiBnZXREZXNjcmlwdG9yRnJvbVByb3RvKHNvdXJjZSwgcHJvcCkge1xuICBpZiAoIShwcm9wIGluIHNvdXJjZSkpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgbGV0IHByb3RvID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlKTtcbiAgd2hpbGUgKHByb3RvKSB7XG4gICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIHByb3ApO1xuICAgIGlmIChkZXNjKVxuICAgICAgcmV0dXJuIGRlc2M7XG4gICAgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIG1hcmtDaGFuZ2VkKHN0YXRlKSB7XG4gIGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG4gICAgc3RhdGUubW9kaWZpZWRfID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUucGFyZW50Xykge1xuICAgICAgbWFya0NoYW5nZWQoc3RhdGUucGFyZW50Xyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVwYXJlQ29weShzdGF0ZSkge1xuICBpZiAoIXN0YXRlLmNvcHlfKSB7XG4gICAgc3RhdGUuY29weV8gPSBzaGFsbG93Q29weShcbiAgICAgIHN0YXRlLmJhc2VfLFxuICAgICAgc3RhdGUuc2NvcGVfLmltbWVyXy51c2VTdHJpY3RTaGFsbG93Q29weV9cbiAgICApO1xuICB9XG59XG5cbi8vIHNyYy9jb3JlL2ltbWVyQ2xhc3MudHNcbnZhciBJbW1lcjIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuYXV0b0ZyZWV6ZV8gPSB0cnVlO1xuICAgIHRoaXMudXNlU3RyaWN0U2hhbGxvd0NvcHlfID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogVGhlIGBwcm9kdWNlYCBmdW5jdGlvbiB0YWtlcyBhIHZhbHVlIGFuZCBhIFwicmVjaXBlIGZ1bmN0aW9uXCIgKHdob3NlXG4gICAgICogcmV0dXJuIHZhbHVlIG9mdGVuIGRlcGVuZHMgb24gdGhlIGJhc2Ugc3RhdGUpLiBUaGUgcmVjaXBlIGZ1bmN0aW9uIGlzXG4gICAgICogZnJlZSB0byBtdXRhdGUgaXRzIGZpcnN0IGFyZ3VtZW50IGhvd2V2ZXIgaXQgd2FudHMuIEFsbCBtdXRhdGlvbnMgYXJlXG4gICAgICogb25seSBldmVyIGFwcGxpZWQgdG8gYSBfX2NvcHlfXyBvZiB0aGUgYmFzZSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIFBhc3Mgb25seSBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFwiY3VycmllZCBwcm9kdWNlclwiIHdoaWNoIHJlbGlldmVzIHlvdVxuICAgICAqIGZyb20gcGFzc2luZyB0aGUgcmVjaXBlIGZ1bmN0aW9uIGV2ZXJ5IHRpbWUuXG4gICAgICpcbiAgICAgKiBPbmx5IHBsYWluIG9iamVjdHMgYW5kIGFycmF5cyBhcmUgbWFkZSBtdXRhYmxlLiBBbGwgb3RoZXIgb2JqZWN0cyBhcmVcbiAgICAgKiBjb25zaWRlcmVkIHVuY29weWFibGUuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIF9fYm91bmRfXyB0byBpdHMgYEltbWVyYCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YW55fSBiYXNlIC0gdGhlIGluaXRpYWwgc3RhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWNpcGUgLSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgcHJveHkgb2YgdGhlIGJhc2Ugc3RhdGUgYXMgZmlyc3QgYXJndW1lbnQgYW5kIHdoaWNoIGNhbiBiZSBmcmVlbHkgbW9kaWZpZWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXRjaExpc3RlbmVyIC0gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB0aGUgcGF0Y2hlcyBwcm9kdWNlZCBoZXJlXG4gICAgICogQHJldHVybnMge2FueX0gYSBuZXcgc3RhdGUsIG9yIHRoZSBpbml0aWFsIHN0YXRlIGlmIG5vdGhpbmcgd2FzIG1vZGlmaWVkXG4gICAgICovXG4gICAgdGhpcy5wcm9kdWNlID0gKGJhc2UsIHJlY2lwZSwgcGF0Y2hMaXN0ZW5lcikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBiYXNlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRCYXNlID0gcmVjaXBlO1xuICAgICAgICByZWNpcGUgPSBiYXNlO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGN1cnJpZWRQcm9kdWNlKGJhc2UyID0gZGVmYXVsdEJhc2UsIC4uLmFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5wcm9kdWNlKGJhc2UyLCAoZHJhZnQpID0+IHJlY2lwZS5jYWxsKHRoaXMsIGRyYWZ0LCAuLi5hcmdzKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBkaWUoNik7XG4gICAgICBpZiAocGF0Y2hMaXN0ZW5lciAhPT0gdm9pZCAwICYmIHR5cGVvZiBwYXRjaExpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGRpZSg3KTtcbiAgICAgIGxldCByZXN1bHQ7XG4gICAgICBpZiAoaXNEcmFmdGFibGUoYmFzZSkpIHtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBlbnRlclNjb3BlKHRoaXMpO1xuICAgICAgICBjb25zdCBwcm94eSA9IGNyZWF0ZVByb3h5KGJhc2UsIHZvaWQgMCk7XG4gICAgICAgIGxldCBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVjaXBlKHByb3h5KTtcbiAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChoYXNFcnJvcilcbiAgICAgICAgICAgIHJldm9rZVNjb3BlKHNjb3BlKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBsZWF2ZVNjb3BlKHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICB1c2VQYXRjaGVzSW5TY29wZShzY29wZSwgcGF0Y2hMaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBwcm9jZXNzUmVzdWx0KHJlc3VsdCwgc2NvcGUpO1xuICAgICAgfSBlbHNlIGlmICghYmFzZSB8fCB0eXBlb2YgYmFzZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXN1bHQgPSByZWNpcGUoYmFzZSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMClcbiAgICAgICAgICByZXN1bHQgPSBiYXNlO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBOT1RISU5HKVxuICAgICAgICAgIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHRoaXMuYXV0b0ZyZWV6ZV8pXG4gICAgICAgICAgZnJlZXplKHJlc3VsdCwgdHJ1ZSk7XG4gICAgICAgIGlmIChwYXRjaExpc3RlbmVyKSB7XG4gICAgICAgICAgY29uc3QgcCA9IFtdO1xuICAgICAgICAgIGNvbnN0IGlwID0gW107XG4gICAgICAgICAgZ2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18oYmFzZSwgcmVzdWx0LCBwLCBpcCk7XG4gICAgICAgICAgcGF0Y2hMaXN0ZW5lcihwLCBpcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZVxuICAgICAgICBkaWUoMSwgYmFzZSk7XG4gICAgfTtcbiAgICB0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcyA9IChiYXNlLCByZWNpcGUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYmFzZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUsIC4uLmFyZ3MpID0+IHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzKHN0YXRlLCAoZHJhZnQpID0+IGJhc2UoZHJhZnQsIC4uLmFyZ3MpKTtcbiAgICAgIH1cbiAgICAgIGxldCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcztcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucHJvZHVjZShiYXNlLCByZWNpcGUsIChwLCBpcCkgPT4ge1xuICAgICAgICBwYXRjaGVzID0gcDtcbiAgICAgICAgaW52ZXJzZVBhdGNoZXMgPSBpcDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtyZXN1bHQsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzXTtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgY29uZmlnPy5hdXRvRnJlZXplID09PSBcImJvb2xlYW5cIilcbiAgICAgIHRoaXMuc2V0QXV0b0ZyZWV6ZShjb25maWcuYXV0b0ZyZWV6ZSk7XG4gICAgaWYgKHR5cGVvZiBjb25maWc/LnVzZVN0cmljdFNoYWxsb3dDb3B5ID09PSBcImJvb2xlYW5cIilcbiAgICAgIHRoaXMuc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkoY29uZmlnLnVzZVN0cmljdFNoYWxsb3dDb3B5KTtcbiAgfVxuICBjcmVhdGVEcmFmdChiYXNlKSB7XG4gICAgaWYgKCFpc0RyYWZ0YWJsZShiYXNlKSlcbiAgICAgIGRpZSg4KTtcbiAgICBpZiAoaXNEcmFmdChiYXNlKSlcbiAgICAgIGJhc2UgPSBjdXJyZW50KGJhc2UpO1xuICAgIGNvbnN0IHNjb3BlID0gZW50ZXJTY29wZSh0aGlzKTtcbiAgICBjb25zdCBwcm94eSA9IGNyZWF0ZVByb3h5KGJhc2UsIHZvaWQgMCk7XG4gICAgcHJveHlbRFJBRlRfU1RBVEVdLmlzTWFudWFsXyA9IHRydWU7XG4gICAgbGVhdmVTY29wZShzY29wZSk7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9XG4gIGZpbmlzaERyYWZ0KGRyYWZ0LCBwYXRjaExpc3RlbmVyKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBkcmFmdCAmJiBkcmFmdFtEUkFGVF9TVEFURV07XG4gICAgaWYgKCFzdGF0ZSB8fCAhc3RhdGUuaXNNYW51YWxfKVxuICAgICAgZGllKDkpO1xuICAgIGNvbnN0IHsgc2NvcGVfOiBzY29wZSB9ID0gc3RhdGU7XG4gICAgdXNlUGF0Y2hlc0luU2NvcGUoc2NvcGUsIHBhdGNoTGlzdGVuZXIpO1xuICAgIHJldHVybiBwcm9jZXNzUmVzdWx0KHZvaWQgMCwgc2NvcGUpO1xuICB9XG4gIC8qKlxuICAgKiBQYXNzIHRydWUgdG8gYXV0b21hdGljYWxseSBmcmVlemUgYWxsIGNvcGllcyBjcmVhdGVkIGJ5IEltbWVyLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBhdXRvLWZyZWV6aW5nIGlzIGVuYWJsZWQuXG4gICAqL1xuICBzZXRBdXRvRnJlZXplKHZhbHVlKSB7XG4gICAgdGhpcy5hdXRvRnJlZXplXyA9IHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBQYXNzIHRydWUgdG8gZW5hYmxlIHN0cmljdCBzaGFsbG93IGNvcHkuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGltbWVyIGRvZXMgbm90IGNvcHkgdGhlIG9iamVjdCBkZXNjcmlwdG9ycyBzdWNoIGFzIGdldHRlciwgc2V0dGVyIGFuZCBub24tZW51bXJhYmxlIHByb3BlcnRpZXMuXG4gICAqL1xuICBzZXRVc2VTdHJpY3RTaGFsbG93Q29weSh2YWx1ZSkge1xuICAgIHRoaXMudXNlU3RyaWN0U2hhbGxvd0NvcHlfID0gdmFsdWU7XG4gIH1cbiAgYXBwbHlQYXRjaGVzKGJhc2UsIHBhdGNoZXMpIHtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSBwYXRjaGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBwYXRjaCA9IHBhdGNoZXNbaV07XG4gICAgICBpZiAocGF0Y2gucGF0aC5sZW5ndGggPT09IDAgJiYgcGF0Y2gub3AgPT09IFwicmVwbGFjZVwiKSB7XG4gICAgICAgIGJhc2UgPSBwYXRjaC52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpID4gLTEpIHtcbiAgICAgIHBhdGNoZXMgPSBwYXRjaGVzLnNsaWNlKGkgKyAxKTtcbiAgICB9XG4gICAgY29uc3QgYXBwbHlQYXRjaGVzSW1wbCA9IGdldFBsdWdpbihcIlBhdGNoZXNcIikuYXBwbHlQYXRjaGVzXztcbiAgICBpZiAoaXNEcmFmdChiYXNlKSkge1xuICAgICAgcmV0dXJuIGFwcGx5UGF0Y2hlc0ltcGwoYmFzZSwgcGF0Y2hlcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb2R1Y2UoXG4gICAgICBiYXNlLFxuICAgICAgKGRyYWZ0KSA9PiBhcHBseVBhdGNoZXNJbXBsKGRyYWZ0LCBwYXRjaGVzKVxuICAgICk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVQcm94eSh2YWx1ZSwgcGFyZW50KSB7XG4gIGNvbnN0IGRyYWZ0ID0gaXNNYXAodmFsdWUpID8gZ2V0UGx1Z2luKFwiTWFwU2V0XCIpLnByb3h5TWFwXyh2YWx1ZSwgcGFyZW50KSA6IGlzU2V0KHZhbHVlKSA/IGdldFBsdWdpbihcIk1hcFNldFwiKS5wcm94eVNldF8odmFsdWUsIHBhcmVudCkgOiBjcmVhdGVQcm94eVByb3h5KHZhbHVlLCBwYXJlbnQpO1xuICBjb25zdCBzY29wZSA9IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKTtcbiAgc2NvcGUuZHJhZnRzXy5wdXNoKGRyYWZ0KTtcbiAgcmV0dXJuIGRyYWZ0O1xufVxuXG4vLyBzcmMvY29yZS9jdXJyZW50LnRzXG5mdW5jdGlvbiBjdXJyZW50KHZhbHVlKSB7XG4gIGlmICghaXNEcmFmdCh2YWx1ZSkpXG4gICAgZGllKDEwLCB2YWx1ZSk7XG4gIHJldHVybiBjdXJyZW50SW1wbCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBjdXJyZW50SW1wbCh2YWx1ZSkge1xuICBpZiAoIWlzRHJhZnRhYmxlKHZhbHVlKSB8fCBpc0Zyb3plbih2YWx1ZSkpXG4gICAgcmV0dXJuIHZhbHVlO1xuICBjb25zdCBzdGF0ZSA9IHZhbHVlW0RSQUZUX1NUQVRFXTtcbiAgbGV0IGNvcHk7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICghc3RhdGUubW9kaWZpZWRfKVxuICAgICAgcmV0dXJuIHN0YXRlLmJhc2VfO1xuICAgIHN0YXRlLmZpbmFsaXplZF8gPSB0cnVlO1xuICAgIGNvcHkgPSBzaGFsbG93Q29weSh2YWx1ZSwgc3RhdGUuc2NvcGVfLmltbWVyXy51c2VTdHJpY3RTaGFsbG93Q29weV8pO1xuICB9IGVsc2Uge1xuICAgIGNvcHkgPSBzaGFsbG93Q29weSh2YWx1ZSwgdHJ1ZSk7XG4gIH1cbiAgZWFjaChjb3B5LCAoa2V5LCBjaGlsZFZhbHVlKSA9PiB7XG4gICAgc2V0KGNvcHksIGtleSwgY3VycmVudEltcGwoY2hpbGRWYWx1ZSkpO1xuICB9KTtcbiAgaWYgKHN0YXRlKSB7XG4gICAgc3RhdGUuZmluYWxpemVkXyA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBjb3B5O1xufVxuXG4vLyBzcmMvcGx1Z2lucy9wYXRjaGVzLnRzXG5mdW5jdGlvbiBlbmFibGVQYXRjaGVzKCkge1xuICBjb25zdCBlcnJvck9mZnNldCA9IDE2O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgZXJyb3JzLnB1c2goXG4gICAgICAnU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsXG4gICAgICBmdW5jdGlvbihvcCkge1xuICAgICAgICByZXR1cm4gXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiICsgb3A7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIiArIHBhdGg7XG4gICAgICB9LFxuICAgICAgXCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJcbiAgICApO1xuICB9XG4gIGNvbnN0IFJFUExBQ0UgPSBcInJlcGxhY2VcIjtcbiAgY29uc3QgQUREID0gXCJhZGRcIjtcbiAgY29uc3QgUkVNT1ZFID0gXCJyZW1vdmVcIjtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVQYXRjaGVzXyhzdGF0ZSwgYmFzZVBhdGgsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKSB7XG4gICAgc3dpdGNoIChzdGF0ZS50eXBlXykge1xuICAgICAgY2FzZSAwIC8qIE9iamVjdCAqLzpcbiAgICAgIGNhc2UgMiAvKiBNYXAgKi86XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVBhdGNoZXNGcm9tQXNzaWduZWQoXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgYmFzZVBhdGgsXG4gICAgICAgICAgcGF0Y2hlcyxcbiAgICAgICAgICBpbnZlcnNlUGF0Y2hlc1xuICAgICAgICApO1xuICAgICAgY2FzZSAxIC8qIEFycmF5ICovOlxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVBcnJheVBhdGNoZXMoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcyk7XG4gICAgICBjYXNlIDMgLyogU2V0ICovOlxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVTZXRQYXRjaGVzKFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIGJhc2VQYXRoLFxuICAgICAgICAgIHBhdGNoZXMsXG4gICAgICAgICAgaW52ZXJzZVBhdGNoZXNcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2VuZXJhdGVBcnJheVBhdGNoZXMoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIGxldCB7IGJhc2VfLCBhc3NpZ25lZF8gfSA9IHN0YXRlO1xuICAgIGxldCBjb3B5XyA9IHN0YXRlLmNvcHlfO1xuICAgIGlmIChjb3B5Xy5sZW5ndGggPCBiYXNlXy5sZW5ndGgpIHtcbiAgICAgIDtcbiAgICAgIFtiYXNlXywgY29weV9dID0gW2NvcHlfLCBiYXNlX107XG4gICAgICBbcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXNdID0gW2ludmVyc2VQYXRjaGVzLCBwYXRjaGVzXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXNlXy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFzc2lnbmVkX1tpXSAmJiBjb3B5X1tpXSAhPT0gYmFzZV9baV0pIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGJhc2VQYXRoLmNvbmNhdChbaV0pO1xuICAgICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICAgIG9wOiBSRVBMQUNFLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgLy8gTmVlZCB0byBtYXliZSBjbG9uZSBpdCwgYXMgaXQgY2FuIGluIGZhY3QgYmUgdGhlIG9yaWdpbmFsIHZhbHVlXG4gICAgICAgICAgLy8gZHVlIHRvIHRoZSBiYXNlL2NvcHkgaW52ZXJzaW9uIGF0IHRoZSBzdGFydCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKGNvcHlfW2ldKVxuICAgICAgICB9KTtcbiAgICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICAgICAgb3A6IFJFUExBQ0UsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZTogY2xvbmVQYXRjaFZhbHVlSWZOZWVkZWQoYmFzZV9baV0pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gYmFzZV8ubGVuZ3RoOyBpIDwgY29weV8ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBBREQsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIC8vIE5lZWQgdG8gbWF5YmUgY2xvbmUgaXQsIGFzIGl0IGNhbiBpbiBmYWN0IGJlIHRoZSBvcmlnaW5hbCB2YWx1ZVxuICAgICAgICAvLyBkdWUgdG8gdGhlIGJhc2UvY29weSBpbnZlcnNpb24gYXQgdGhlIHN0YXJ0IG9mIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKGNvcHlfW2ldKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSBjb3B5Xy5sZW5ndGggLSAxOyBiYXNlXy5sZW5ndGggPD0gaTsgLS1pKSB7XG4gICAgICBjb25zdCBwYXRoID0gYmFzZVBhdGguY29uY2F0KFtpXSk7XG4gICAgICBpbnZlcnNlUGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgb3A6IFJFTU9WRSxcbiAgICAgICAgcGF0aFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdlbmVyYXRlUGF0Y2hlc0Zyb21Bc3NpZ25lZChzdGF0ZSwgYmFzZVBhdGgsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKSB7XG4gICAgY29uc3QgeyBiYXNlXywgY29weV8gfSA9IHN0YXRlO1xuICAgIGVhY2goc3RhdGUuYXNzaWduZWRfLCAoa2V5LCBhc3NpZ25lZFZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBvcmlnVmFsdWUgPSBnZXQoYmFzZV8sIGtleSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldChjb3B5Xywga2V5KTtcbiAgICAgIGNvbnN0IG9wID0gIWFzc2lnbmVkVmFsdWUgPyBSRU1PVkUgOiBoYXMoYmFzZV8sIGtleSkgPyBSRVBMQUNFIDogQUREO1xuICAgICAgaWYgKG9yaWdWYWx1ZSA9PT0gdmFsdWUgJiYgb3AgPT09IFJFUExBQ0UpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoa2V5KTtcbiAgICAgIHBhdGNoZXMucHVzaChvcCA9PT0gUkVNT1ZFID8geyBvcCwgcGF0aCB9IDogeyBvcCwgcGF0aCwgdmFsdWUgfSk7XG4gICAgICBpbnZlcnNlUGF0Y2hlcy5wdXNoKFxuICAgICAgICBvcCA9PT0gQUREID8geyBvcDogUkVNT1ZFLCBwYXRoIH0gOiBvcCA9PT0gUkVNT1ZFID8geyBvcDogQURELCBwYXRoLCB2YWx1ZTogY2xvbmVQYXRjaFZhbHVlSWZOZWVkZWQob3JpZ1ZhbHVlKSB9IDogeyBvcDogUkVQTEFDRSwgcGF0aCwgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKG9yaWdWYWx1ZSkgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZW5lcmF0ZVNldFBhdGNoZXMoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIGxldCB7IGJhc2VfLCBjb3B5XyB9ID0gc3RhdGU7XG4gICAgbGV0IGkgPSAwO1xuICAgIGJhc2VfLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoIWNvcHlfLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGJhc2VQYXRoLmNvbmNhdChbaV0pO1xuICAgICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICAgIG9wOiBSRU1PVkUsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaW52ZXJzZVBhdGNoZXMudW5zaGlmdCh7XG4gICAgICAgICAgb3A6IEFERCxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH0pO1xuICAgIGkgPSAwO1xuICAgIGNvcHlfLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoIWJhc2VfLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGJhc2VQYXRoLmNvbmNhdChbaV0pO1xuICAgICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICAgIG9wOiBBREQsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaW52ZXJzZVBhdGNoZXMudW5zaGlmdCh7XG4gICAgICAgICAgb3A6IFJFTU9WRSxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyhiYXNlVmFsdWUsIHJlcGxhY2VtZW50LCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICBvcDogUkVQTEFDRSxcbiAgICAgIHBhdGg6IFtdLFxuICAgICAgdmFsdWU6IHJlcGxhY2VtZW50ID09PSBOT1RISU5HID8gdm9pZCAwIDogcmVwbGFjZW1lbnRcbiAgICB9KTtcbiAgICBpbnZlcnNlUGF0Y2hlcy5wdXNoKHtcbiAgICAgIG9wOiBSRVBMQUNFLFxuICAgICAgcGF0aDogW10sXG4gICAgICB2YWx1ZTogYmFzZVZhbHVlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwbHlQYXRjaGVzXyhkcmFmdCwgcGF0Y2hlcykge1xuICAgIHBhdGNoZXMuZm9yRWFjaCgocGF0Y2gpID0+IHtcbiAgICAgIGNvbnN0IHsgcGF0aCwgb3AgfSA9IHBhdGNoO1xuICAgICAgbGV0IGJhc2UgPSBkcmFmdDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFyZW50VHlwZSA9IGdldEFyY2h0eXBlKGJhc2UpO1xuICAgICAgICBsZXQgcCA9IHBhdGhbaV07XG4gICAgICAgIGlmICh0eXBlb2YgcCAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgcCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHAgPSBcIlwiICsgcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHBhcmVudFR5cGUgPT09IDAgLyogT2JqZWN0ICovIHx8IHBhcmVudFR5cGUgPT09IDEgLyogQXJyYXkgKi8pICYmIChwID09PSBcIl9fcHJvdG9fX1wiIHx8IHAgPT09IFwiY29uc3RydWN0b3JcIikpXG4gICAgICAgICAgZGllKGVycm9yT2Zmc2V0ICsgMyk7XG4gICAgICAgIGlmICh0eXBlb2YgYmFzZSA9PT0gXCJmdW5jdGlvblwiICYmIHAgPT09IFwicHJvdG90eXBlXCIpXG4gICAgICAgICAgZGllKGVycm9yT2Zmc2V0ICsgMyk7XG4gICAgICAgIGJhc2UgPSBnZXQoYmFzZSwgcCk7XG4gICAgICAgIGlmICh0eXBlb2YgYmFzZSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICBkaWUoZXJyb3JPZmZzZXQgKyAyLCBwYXRoLmpvaW4oXCIvXCIpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHR5cGUgPSBnZXRBcmNodHlwZShiYXNlKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGVlcENsb25lUGF0Y2hWYWx1ZShwYXRjaC52YWx1ZSk7XG4gICAgICBjb25zdCBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgICBzd2l0Y2ggKG9wKSB7XG4gICAgICAgIGNhc2UgUkVQTEFDRTpcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMiAvKiBNYXAgKi86XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgMyAvKiBTZXQgKi86XG4gICAgICAgICAgICAgIGRpZShlcnJvck9mZnNldCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIEFERDpcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMSAvKiBBcnJheSAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGtleSA9PT0gXCItXCIgPyBiYXNlLnB1c2godmFsdWUpIDogYmFzZS5zcGxpY2Uoa2V5LCAwLCB2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIDIgLyogTWFwICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIDMgLyogU2V0ICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5hZGQodmFsdWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBSRU1PVkU6XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDEgLyogQXJyYXkgKi86XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlLnNwbGljZShrZXksIDEpO1xuICAgICAgICAgICAgY2FzZSAyIC8qIE1hcCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2UuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICBjYXNlIDMgLyogU2V0ICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5kZWxldGUocGF0Y2gudmFsdWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZSBiYXNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRpZShlcnJvck9mZnNldCArIDEsIG9wKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZHJhZnQ7XG4gIH1cbiAgZnVuY3Rpb24gZGVlcENsb25lUGF0Y2hWYWx1ZShvYmopIHtcbiAgICBpZiAoIWlzRHJhZnRhYmxlKG9iaikpXG4gICAgICByZXR1cm4gb2JqO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpXG4gICAgICByZXR1cm4gb2JqLm1hcChkZWVwQ2xvbmVQYXRjaFZhbHVlKTtcbiAgICBpZiAoaXNNYXAob2JqKSlcbiAgICAgIHJldHVybiBuZXcgTWFwKFxuICAgICAgICBBcnJheS5mcm9tKG9iai5lbnRyaWVzKCkpLm1hcCgoW2ssIHZdKSA9PiBbaywgZGVlcENsb25lUGF0Y2hWYWx1ZSh2KV0pXG4gICAgICApO1xuICAgIGlmIChpc1NldChvYmopKVxuICAgICAgcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShvYmopLm1hcChkZWVwQ2xvbmVQYXRjaFZhbHVlKSk7XG4gICAgY29uc3QgY2xvbmVkID0gT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihvYmopKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopXG4gICAgICBjbG9uZWRba2V5XSA9IGRlZXBDbG9uZVBhdGNoVmFsdWUob2JqW2tleV0pO1xuICAgIGlmIChoYXMob2JqLCBEUkFGVEFCTEUpKVxuICAgICAgY2xvbmVkW0RSQUZUQUJMRV0gPSBvYmpbRFJBRlRBQkxFXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIGZ1bmN0aW9uIGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKG9iaikge1xuICAgIGlmIChpc0RyYWZ0KG9iaikpIHtcbiAgICAgIHJldHVybiBkZWVwQ2xvbmVQYXRjaFZhbHVlKG9iaik7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gb2JqO1xuICB9XG4gIGxvYWRQbHVnaW4oXCJQYXRjaGVzXCIsIHtcbiAgICBhcHBseVBhdGNoZXNfLFxuICAgIGdlbmVyYXRlUGF0Y2hlc18sXG4gICAgZ2VuZXJhdGVSZXBsYWNlbWVudFBhdGNoZXNfXG4gIH0pO1xufVxuXG4vLyBzcmMvcGx1Z2lucy9tYXBzZXQudHNcbmZ1bmN0aW9uIGVuYWJsZU1hcFNldCgpIHtcbiAgY2xhc3MgRHJhZnRNYXAgZXh0ZW5kcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpc1tEUkFGVF9TVEFURV0gPSB7XG4gICAgICAgIHR5cGVfOiAyIC8qIE1hcCAqLyxcbiAgICAgICAgcGFyZW50XzogcGFyZW50LFxuICAgICAgICBzY29wZV86IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKSxcbiAgICAgICAgbW9kaWZpZWRfOiBmYWxzZSxcbiAgICAgICAgZmluYWxpemVkXzogZmFsc2UsXG4gICAgICAgIGNvcHlfOiB2b2lkIDAsXG4gICAgICAgIGFzc2lnbmVkXzogdm9pZCAwLFxuICAgICAgICBiYXNlXzogdGFyZ2V0LFxuICAgICAgICBkcmFmdF86IHRoaXMsXG4gICAgICAgIGlzTWFudWFsXzogZmFsc2UsXG4gICAgICAgIHJldm9rZWRfOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gbGF0ZXN0KHRoaXNbRFJBRlRfU1RBVEVdKS5zaXplO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICByZXR1cm4gbGF0ZXN0KHRoaXNbRFJBRlRfU1RBVEVdKS5oYXMoa2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgaWYgKCFsYXRlc3Qoc3RhdGUpLmhhcyhrZXkpIHx8IGxhdGVzdChzdGF0ZSkuZ2V0KGtleSkgIT09IHZhbHVlKSB7XG4gICAgICAgIHByZXBhcmVNYXBDb3B5KHN0YXRlKTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5hc3NpZ25lZF8uc2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgIHN0YXRlLmNvcHlfLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIHByZXBhcmVNYXBDb3B5KHN0YXRlKTtcbiAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgIGlmIChzdGF0ZS5iYXNlXy5oYXMoa2V5KSkge1xuICAgICAgICBzdGF0ZS5hc3NpZ25lZF8uc2V0KGtleSwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgc3RhdGUuY29weV8uZGVsZXRlKGtleSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGlmIChsYXRlc3Qoc3RhdGUpLnNpemUpIHtcbiAgICAgICAgcHJlcGFyZU1hcENvcHkoc3RhdGUpO1xuICAgICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICAgIHN0YXRlLmFzc2lnbmVkXyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICAgIGVhY2goc3RhdGUuYmFzZV8sIChrZXkpID0+IHtcbiAgICAgICAgICBzdGF0ZS5hc3NpZ25lZF8uc2V0KGtleSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGUuY29weV8uY2xlYXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yRWFjaChjYiwgdGhpc0FyZykge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGxhdGVzdChzdGF0ZSkuZm9yRWFjaCgoX3ZhbHVlLCBrZXksIF9tYXApID0+IHtcbiAgICAgICAgY2IuY2FsbCh0aGlzQXJnLCB0aGlzLmdldChrZXkpLCBrZXksIHRoaXMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgY29uc3QgdmFsdWUgPSBsYXRlc3Qoc3RhdGUpLmdldChrZXkpO1xuICAgICAgaWYgKHN0YXRlLmZpbmFsaXplZF8gfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgIT09IHN0YXRlLmJhc2VfLmdldChrZXkpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRyYWZ0ID0gY3JlYXRlUHJveHkodmFsdWUsIHN0YXRlKTtcbiAgICAgIHByZXBhcmVNYXBDb3B5KHN0YXRlKTtcbiAgICAgIHN0YXRlLmNvcHlfLnNldChrZXksIGRyYWZ0KTtcbiAgICAgIHJldHVybiBkcmFmdDtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgIHJldHVybiBsYXRlc3QodGhpc1tEUkFGVF9TVEFURV0pLmtleXMoKTtcbiAgICB9XG4gICAgdmFsdWVzKCkge1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLmtleXMoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB0aGlzLnZhbHVlcygpLFxuICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgciA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoci5kb25lKVxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldChyLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGVudHJpZXMoKSB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMua2V5cygpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHRoaXMuZW50cmllcygpLFxuICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgciA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoci5kb25lKVxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldChyLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogW3IudmFsdWUsIHZhbHVlXVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIFsoRFJBRlRfU1RBVEUsIFN5bWJvbC5pdGVyYXRvcildKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW50cmllcygpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwcm94eU1hcF8odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICByZXR1cm4gbmV3IERyYWZ0TWFwKHRhcmdldCwgcGFyZW50KTtcbiAgfVxuICBmdW5jdGlvbiBwcmVwYXJlTWFwQ29weShzdGF0ZSkge1xuICAgIGlmICghc3RhdGUuY29weV8pIHtcbiAgICAgIHN0YXRlLmFzc2lnbmVkXyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICBzdGF0ZS5jb3B5XyA9IG5ldyBNYXAoc3RhdGUuYmFzZV8pO1xuICAgIH1cbiAgfVxuICBjbGFzcyBEcmFmdFNldCBleHRlbmRzIFNldCB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzW0RSQUZUX1NUQVRFXSA9IHtcbiAgICAgICAgdHlwZV86IDMgLyogU2V0ICovLFxuICAgICAgICBwYXJlbnRfOiBwYXJlbnQsXG4gICAgICAgIHNjb3BlXzogcGFyZW50ID8gcGFyZW50LnNjb3BlXyA6IGdldEN1cnJlbnRTY29wZSgpLFxuICAgICAgICBtb2RpZmllZF86IGZhbHNlLFxuICAgICAgICBmaW5hbGl6ZWRfOiBmYWxzZSxcbiAgICAgICAgY29weV86IHZvaWQgMCxcbiAgICAgICAgYmFzZV86IHRhcmdldCxcbiAgICAgICAgZHJhZnRfOiB0aGlzLFxuICAgICAgICBkcmFmdHNfOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICAgICAgICByZXZva2VkXzogZmFsc2UsXG4gICAgICAgIGlzTWFudWFsXzogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIGxhdGVzdCh0aGlzW0RSQUZUX1NUQVRFXSkuc2l6ZTtcbiAgICB9XG4gICAgaGFzKHZhbHVlKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGlmICghc3RhdGUuY29weV8pIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmJhc2VfLmhhcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuY29weV8uaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoc3RhdGUuZHJhZnRzXy5oYXModmFsdWUpICYmIHN0YXRlLmNvcHlfLmhhcyhzdGF0ZS5kcmFmdHNfLmdldCh2YWx1ZSkpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgIHByZXBhcmVTZXRDb3B5KHN0YXRlKTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5jb3B5Xy5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBwcmVwYXJlU2V0Q29weShzdGF0ZSk7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICByZXR1cm4gc3RhdGUuY29weV8uZGVsZXRlKHZhbHVlKSB8fCAoc3RhdGUuZHJhZnRzXy5oYXModmFsdWUpID8gc3RhdGUuY29weV8uZGVsZXRlKHN0YXRlLmRyYWZ0c18uZ2V0KHZhbHVlKSkgOiAoXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGZhbHNlXG4gICAgICApKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGlmIChsYXRlc3Qoc3RhdGUpLnNpemUpIHtcbiAgICAgICAgcHJlcGFyZVNldENvcHkoc3RhdGUpO1xuICAgICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICAgIHN0YXRlLmNvcHlfLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgcHJlcGFyZVNldENvcHkoc3RhdGUpO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvcHlfLnZhbHVlcygpO1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBwcmVwYXJlU2V0Q29weShzdGF0ZSk7XG4gICAgICByZXR1cm4gc3RhdGUuY29weV8uZW50cmllcygpO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKCk7XG4gICAgfVxuICAgIFsoRFJBRlRfU1RBVEUsIFN5bWJvbC5pdGVyYXRvcildKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKCk7XG4gICAgfVxuICAgIGZvckVhY2goY2IsIHRoaXNBcmcpIHtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy52YWx1ZXMoKTtcbiAgICAgIGxldCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIGNiLmNhbGwodGhpc0FyZywgcmVzdWx0LnZhbHVlLCByZXN1bHQudmFsdWUsIHRoaXMpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHByb3h5U2V0Xyh0YXJnZXQsIHBhcmVudCkge1xuICAgIHJldHVybiBuZXcgRHJhZnRTZXQodGFyZ2V0LCBwYXJlbnQpO1xuICB9XG4gIGZ1bmN0aW9uIHByZXBhcmVTZXRDb3B5KHN0YXRlKSB7XG4gICAgaWYgKCFzdGF0ZS5jb3B5Xykge1xuICAgICAgc3RhdGUuY29weV8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgc3RhdGUuYmFzZV8uZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgaWYgKGlzRHJhZnRhYmxlKHZhbHVlKSkge1xuICAgICAgICAgIGNvbnN0IGRyYWZ0ID0gY3JlYXRlUHJveHkodmFsdWUsIHN0YXRlKTtcbiAgICAgICAgICBzdGF0ZS5kcmFmdHNfLnNldCh2YWx1ZSwgZHJhZnQpO1xuICAgICAgICAgIHN0YXRlLmNvcHlfLmFkZChkcmFmdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUuY29weV8uYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFzc2VydFVucmV2b2tlZChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5yZXZva2VkXylcbiAgICAgIGRpZSgzLCBKU09OLnN0cmluZ2lmeShsYXRlc3Qoc3RhdGUpKSk7XG4gIH1cbiAgbG9hZFBsdWdpbihcIk1hcFNldFwiLCB7IHByb3h5TWFwXywgcHJveHlTZXRfIH0pO1xufVxuXG4vLyBzcmMvaW1tZXIudHNcbnZhciBpbW1lciA9IG5ldyBJbW1lcjIoKTtcbnZhciBwcm9kdWNlID0gaW1tZXIucHJvZHVjZTtcbnZhciBwcm9kdWNlV2l0aFBhdGNoZXMgPSBpbW1lci5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChcbiAgaW1tZXJcbik7XG52YXIgc2V0QXV0b0ZyZWV6ZSA9IGltbWVyLnNldEF1dG9GcmVlemUuYmluZChpbW1lcik7XG52YXIgc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkgPSBpbW1lci5zZXRVc2VTdHJpY3RTaGFsbG93Q29weS5iaW5kKGltbWVyKTtcbnZhciBhcHBseVBhdGNoZXMgPSBpbW1lci5hcHBseVBhdGNoZXMuYmluZChpbW1lcik7XG52YXIgY3JlYXRlRHJhZnQgPSBpbW1lci5jcmVhdGVEcmFmdC5iaW5kKGltbWVyKTtcbnZhciBmaW5pc2hEcmFmdCA9IGltbWVyLmZpbmlzaERyYWZ0LmJpbmQoaW1tZXIpO1xuZnVuY3Rpb24gY2FzdERyYWZ0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNhc3RJbW11dGFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IHtcbiAgSW1tZXIyIGFzIEltbWVyLFxuICBhcHBseVBhdGNoZXMsXG4gIGNhc3REcmFmdCxcbiAgY2FzdEltbXV0YWJsZSxcbiAgY3JlYXRlRHJhZnQsXG4gIGN1cnJlbnQsXG4gIGVuYWJsZU1hcFNldCxcbiAgZW5hYmxlUGF0Y2hlcyxcbiAgZmluaXNoRHJhZnQsXG4gIGZyZWV6ZSxcbiAgRFJBRlRBQkxFIGFzIGltbWVyYWJsZSxcbiAgaXNEcmFmdCxcbiAgaXNEcmFmdGFibGUsXG4gIE5PVEhJTkcgYXMgbm90aGluZyxcbiAgb3JpZ2luYWwsXG4gIHByb2R1Y2UsXG4gIHByb2R1Y2VXaXRoUGF0Y2hlcyxcbiAgc2V0QXV0b0ZyZWV6ZSxcbiAgc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5tanMubWFwIiwiLy8gc3JjL2Rldk1vZGVDaGVja3MvaWRlbnRpdHlGdW5jdGlvbkNoZWNrLnRzXG52YXIgcnVuSWRlbnRpdHlGdW5jdGlvbkNoZWNrID0gKHJlc3VsdEZ1bmMsIGlucHV0U2VsZWN0b3JzUmVzdWx0cywgb3V0cHV0U2VsZWN0b3JSZXN1bHQpID0+IHtcbiAgaWYgKGlucHV0U2VsZWN0b3JzUmVzdWx0cy5sZW5ndGggPT09IDEgJiYgaW5wdXRTZWxlY3RvcnNSZXN1bHRzWzBdID09PSBvdXRwdXRTZWxlY3RvclJlc3VsdCkge1xuICAgIGxldCBpc0lucHV0U2FtZUFzT3V0cHV0ID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVtcHR5T2JqZWN0ID0ge307XG4gICAgICBpZiAocmVzdWx0RnVuYyhlbXB0eU9iamVjdCkgPT09IGVtcHR5T2JqZWN0KVxuICAgICAgICBpc0lucHV0U2FtZUFzT3V0cHV0ID0gdHJ1ZTtcbiAgICB9IGNhdGNoIHtcbiAgICB9XG4gICAgaWYgKGlzSW5wdXRTYW1lQXNPdXRwdXQpIHtcbiAgICAgIGxldCBzdGFjayA9IHZvaWQgMDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICA7XG4gICAgICAgICh7IHN0YWNrIH0gPSBlKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJUaGUgcmVzdWx0IGZ1bmN0aW9uIHJldHVybmVkIGl0cyBvd24gaW5wdXRzIHdpdGhvdXQgbW9kaWZpY2F0aW9uLiBlLmdcXG5gY3JlYXRlU2VsZWN0b3IoW3N0YXRlID0+IHN0YXRlLnRvZG9zXSwgdG9kb3MgPT4gdG9kb3MpYFxcblRoaXMgY291bGQgbGVhZCB0byBpbmVmZmljaWVudCBtZW1vaXphdGlvbiBhbmQgdW5uZWNlc3NhcnkgcmUtcmVuZGVycy5cXG5FbnN1cmUgdHJhbnNmb3JtYXRpb24gbG9naWMgaXMgaW4gdGhlIHJlc3VsdCBmdW5jdGlvbiwgYW5kIGV4dHJhY3Rpb24gbG9naWMgaXMgaW4gdGhlIGlucHV0IHNlbGVjdG9ycy5cIixcbiAgICAgICAgeyBzdGFjayB9XG4gICAgICApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL2Rldk1vZGVDaGVja3MvaW5wdXRTdGFiaWxpdHlDaGVjay50c1xudmFyIHJ1bklucHV0U3RhYmlsaXR5Q2hlY2sgPSAoaW5wdXRTZWxlY3RvclJlc3VsdHNPYmplY3QsIG9wdGlvbnMsIGlucHV0U2VsZWN0b3JBcmdzKSA9PiB7XG4gIGNvbnN0IHsgbWVtb2l6ZSwgbWVtb2l6ZU9wdGlvbnMgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHsgaW5wdXRTZWxlY3RvclJlc3VsdHMsIGlucHV0U2VsZWN0b3JSZXN1bHRzQ29weSB9ID0gaW5wdXRTZWxlY3RvclJlc3VsdHNPYmplY3Q7XG4gIGNvbnN0IGNyZWF0ZUFuRW1wdHlPYmplY3QgPSBtZW1vaXplKCgpID0+ICh7fSksIC4uLm1lbW9pemVPcHRpb25zKTtcbiAgY29uc3QgYXJlSW5wdXRTZWxlY3RvclJlc3VsdHNFcXVhbCA9IGNyZWF0ZUFuRW1wdHlPYmplY3QuYXBwbHkobnVsbCwgaW5wdXRTZWxlY3RvclJlc3VsdHMpID09PSBjcmVhdGVBbkVtcHR5T2JqZWN0LmFwcGx5KG51bGwsIGlucHV0U2VsZWN0b3JSZXN1bHRzQ29weSk7XG4gIGlmICghYXJlSW5wdXRTZWxlY3RvclJlc3VsdHNFcXVhbCkge1xuICAgIGxldCBzdGFjayA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgO1xuICAgICAgKHsgc3RhY2sgfSA9IGUpO1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIkFuIGlucHV0IHNlbGVjdG9yIHJldHVybmVkIGEgZGlmZmVyZW50IHJlc3VsdCB3aGVuIHBhc3NlZCBzYW1lIGFyZ3VtZW50cy5cXG5UaGlzIG1lYW5zIHlvdXIgb3V0cHV0IHNlbGVjdG9yIHdpbGwgbGlrZWx5IHJ1biBtb3JlIGZyZXF1ZW50bHkgdGhhbiBpbnRlbmRlZC5cXG5Bdm9pZCByZXR1cm5pbmcgYSBuZXcgcmVmZXJlbmNlIGluc2lkZSB5b3VyIGlucHV0IHNlbGVjdG9yLCBlLmcuXFxuYGNyZWF0ZVNlbGVjdG9yKFtzdGF0ZSA9PiBzdGF0ZS50b2Rvcy5tYXAodG9kbyA9PiB0b2RvLmlkKV0sIHRvZG9JZHMgPT4gdG9kb0lkcy5sZW5ndGgpYFwiLFxuICAgICAge1xuICAgICAgICBhcmd1bWVudHM6IGlucHV0U2VsZWN0b3JBcmdzLFxuICAgICAgICBmaXJzdElucHV0czogaW5wdXRTZWxlY3RvclJlc3VsdHMsXG4gICAgICAgIHNlY29uZElucHV0czogaW5wdXRTZWxlY3RvclJlc3VsdHNDb3B5LFxuICAgICAgICBzdGFja1xuICAgICAgfVxuICAgICk7XG4gIH1cbn07XG5cbi8vIHNyYy9kZXZNb2RlQ2hlY2tzL3NldEdsb2JhbERldk1vZGVDaGVja3MudHNcbnZhciBnbG9iYWxEZXZNb2RlQ2hlY2tzID0ge1xuICBpbnB1dFN0YWJpbGl0eUNoZWNrOiBcIm9uY2VcIixcbiAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrOiBcIm9uY2VcIlxufTtcbnZhciBzZXRHbG9iYWxEZXZNb2RlQ2hlY2tzID0gKGRldk1vZGVDaGVja3MpID0+IHtcbiAgT2JqZWN0LmFzc2lnbihnbG9iYWxEZXZNb2RlQ2hlY2tzLCBkZXZNb2RlQ2hlY2tzKTtcbn07XG5cbi8vIHNyYy91dGlscy50c1xudmFyIE5PVF9GT1VORCA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2woXCJOT1RfRk9VTkRcIik7XG5mdW5jdGlvbiBhc3NlcnRJc0Z1bmN0aW9uKGZ1bmMsIGVycm9yTWVzc2FnZSA9IGBleHBlY3RlZCBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICR7dHlwZW9mIGZ1bmN9YCkge1xuICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0SXNPYmplY3Qob2JqZWN0LCBlcnJvck1lc3NhZ2UgPSBgZXhwZWN0ZWQgYW4gb2JqZWN0LCBpbnN0ZWFkIHJlY2VpdmVkICR7dHlwZW9mIG9iamVjdH1gKSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRJc0FycmF5T2ZGdW5jdGlvbnMoYXJyYXksIGVycm9yTWVzc2FnZSA9IGBleHBlY3RlZCBhbGwgaXRlbXMgdG8gYmUgZnVuY3Rpb25zLCBpbnN0ZWFkIHJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgdHlwZXM6IGApIHtcbiAgaWYgKCFhcnJheS5ldmVyeSgoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICBjb25zdCBpdGVtVHlwZXMgPSBhcnJheS5tYXAoXG4gICAgICAoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gPT09IFwiZnVuY3Rpb25cIiA/IGBmdW5jdGlvbiAke2l0ZW0ubmFtZSB8fCBcInVubmFtZWRcIn0oKWAgOiB0eXBlb2YgaXRlbVxuICAgICkuam9pbihcIiwgXCIpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7ZXJyb3JNZXNzYWdlfVske2l0ZW1UeXBlc31dYCk7XG4gIH1cbn1cbnZhciBlbnN1cmVJc0FycmF5ID0gKGl0ZW0pID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtIDogW2l0ZW1dO1xufTtcbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhjcmVhdGVTZWxlY3RvckFyZ3MpIHtcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gQXJyYXkuaXNBcnJheShjcmVhdGVTZWxlY3RvckFyZ3NbMF0pID8gY3JlYXRlU2VsZWN0b3JBcmdzWzBdIDogY3JlYXRlU2VsZWN0b3JBcmdzO1xuICBhc3NlcnRJc0FycmF5T2ZGdW5jdGlvbnMoXG4gICAgZGVwZW5kZW5jaWVzLFxuICAgIGBjcmVhdGVTZWxlY3RvciBleHBlY3RzIGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCBidXQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogYFxuICApO1xuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuZnVuY3Rpb24gY29sbGVjdElucHV0U2VsZWN0b3JSZXN1bHRzKGRlcGVuZGVuY2llcywgaW5wdXRTZWxlY3RvckFyZ3MpIHtcbiAgY29uc3QgaW5wdXRTZWxlY3RvclJlc3VsdHMgPSBbXTtcbiAgY29uc3QgeyBsZW5ndGggfSA9IGRlcGVuZGVuY2llcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlucHV0U2VsZWN0b3JSZXN1bHRzLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGlucHV0U2VsZWN0b3JBcmdzKSk7XG4gIH1cbiAgcmV0dXJuIGlucHV0U2VsZWN0b3JSZXN1bHRzO1xufVxudmFyIGdldERldk1vZGVDaGVja3NFeGVjdXRpb25JbmZvID0gKGZpcnN0UnVuLCBkZXZNb2RlQ2hlY2tzKSA9PiB7XG4gIGNvbnN0IHsgaWRlbnRpdHlGdW5jdGlvbkNoZWNrLCBpbnB1dFN0YWJpbGl0eUNoZWNrIH0gPSB7XG4gICAgLi4uZ2xvYmFsRGV2TW9kZUNoZWNrcyxcbiAgICAuLi5kZXZNb2RlQ2hlY2tzXG4gIH07XG4gIHJldHVybiB7XG4gICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrOiB7XG4gICAgICBzaG91bGRSdW46IGlkZW50aXR5RnVuY3Rpb25DaGVjayA9PT0gXCJhbHdheXNcIiB8fCBpZGVudGl0eUZ1bmN0aW9uQ2hlY2sgPT09IFwib25jZVwiICYmIGZpcnN0UnVuLFxuICAgICAgcnVuOiBydW5JZGVudGl0eUZ1bmN0aW9uQ2hlY2tcbiAgICB9LFxuICAgIGlucHV0U3RhYmlsaXR5Q2hlY2s6IHtcbiAgICAgIHNob3VsZFJ1bjogaW5wdXRTdGFiaWxpdHlDaGVjayA9PT0gXCJhbHdheXNcIiB8fCBpbnB1dFN0YWJpbGl0eUNoZWNrID09PSBcIm9uY2VcIiAmJiBmaXJzdFJ1bixcbiAgICAgIHJ1bjogcnVuSW5wdXRTdGFiaWxpdHlDaGVja1xuICAgIH1cbiAgfTtcbn07XG5cbi8vIHNyYy9hdXRvdHJhY2tNZW1vaXplL2F1dG90cmFja2luZy50c1xudmFyICRSRVZJU0lPTiA9IDA7XG52YXIgQ1VSUkVOVF9UUkFDS0VSID0gbnVsbDtcbnZhciBDZWxsID0gY2xhc3Mge1xuICByZXZpc2lvbiA9ICRSRVZJU0lPTjtcbiAgX3ZhbHVlO1xuICBfbGFzdFZhbHVlO1xuICBfaXNFcXVhbCA9IHRyaXBsZUVxO1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsVmFsdWUsIGlzRXF1YWwgPSB0cmlwbGVFcSkge1xuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fbGFzdFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIHRoaXMuX2lzRXF1YWwgPSBpc0VxdWFsO1xuICB9XG4gIC8vIFdoZW5ldmVyIGEgc3RvcmFnZSB2YWx1ZSBpcyByZWFkLCBpdCdsbCBhZGQgaXRzZWxmIHRvIHRoZSBjdXJyZW50IHRyYWNrZXIgaWZcbiAgLy8gb25lIGV4aXN0cywgZW50YW5nbGluZyBpdHMgc3RhdGUgd2l0aCB0aGF0IGNhY2hlLlxuICBnZXQgdmFsdWUoKSB7XG4gICAgQ1VSUkVOVF9UUkFDS0VSPy5hZGQodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIC8vIFdoZW5ldmVyIGEgc3RvcmFnZSB2YWx1ZSBpcyB1cGRhdGVkLCB3ZSBidW1wIHRoZSBnbG9iYWwgcmV2aXNpb24gY2xvY2ssXG4gIC8vIGFzc2lnbiB0aGUgcmV2aXNpb24gZm9yIHRoaXMgc3RvcmFnZSB0byB0aGUgbmV3IHZhbHVlLCBfYW5kXyB3ZSBzY2hlZHVsZSBhXG4gIC8vIHJlcmVuZGVyLiBUaGlzIGlzIGltcG9ydGFudCwgYW5kIGl0J3Mgd2hhdCBtYWtlcyBhdXRvdHJhY2tpbmcgIF9wdWxsX1xuICAvLyBiYXNlZC4gV2UgZG9uJ3QgYWN0aXZlbHkgdGVsbCB0aGUgY2FjaGVzIHdoaWNoIGRlcGVuZCBvbiB0aGUgc3RvcmFnZSB0aGF0XG4gIC8vIGFueXRoaW5nIGhhcyBoYXBwZW5lZC4gSW5zdGVhZCwgd2UgcmVjb21wdXRlIHRoZSBjYWNoZXMgd2hlbiBuZWVkZWQuXG4gIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSBuZXdWYWx1ZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMucmV2aXNpb24gPSArKyRSRVZJU0lPTjtcbiAgfVxufTtcbmZ1bmN0aW9uIHRyaXBsZUVxKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG52YXIgVHJhY2tpbmdDYWNoZSA9IGNsYXNzIHtcbiAgX2NhY2hlZFZhbHVlO1xuICBfY2FjaGVkUmV2aXNpb24gPSAtMTtcbiAgX2RlcHMgPSBbXTtcbiAgaGl0cyA9IDA7XG4gIGZuO1xuICBjb25zdHJ1Y3Rvcihmbikge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgfVxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9jYWNoZWRWYWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLl9jYWNoZWRSZXZpc2lvbiA9IC0xO1xuICAgIHRoaXMuX2RlcHMgPSBbXTtcbiAgICB0aGlzLmhpdHMgPSAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBpZiAodGhpcy5yZXZpc2lvbiA+IHRoaXMuX2NhY2hlZFJldmlzaW9uKSB7XG4gICAgICBjb25zdCB7IGZuIH0gPSB0aGlzO1xuICAgICAgY29uc3QgY3VycmVudFRyYWNrZXIgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgY29uc3QgcHJldlRyYWNrZXIgPSBDVVJSRU5UX1RSQUNLRVI7XG4gICAgICBDVVJSRU5UX1RSQUNLRVIgPSBjdXJyZW50VHJhY2tlcjtcbiAgICAgIHRoaXMuX2NhY2hlZFZhbHVlID0gZm4oKTtcbiAgICAgIENVUlJFTlRfVFJBQ0tFUiA9IHByZXZUcmFja2VyO1xuICAgICAgdGhpcy5oaXRzKys7XG4gICAgICB0aGlzLl9kZXBzID0gQXJyYXkuZnJvbShjdXJyZW50VHJhY2tlcik7XG4gICAgICB0aGlzLl9jYWNoZWRSZXZpc2lvbiA9IHRoaXMucmV2aXNpb247XG4gICAgfVxuICAgIENVUlJFTlRfVFJBQ0tFUj8uYWRkKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWRWYWx1ZTtcbiAgfVxuICBnZXQgcmV2aXNpb24oKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KC4uLnRoaXMuX2RlcHMubWFwKChkKSA9PiBkLnJldmlzaW9uKSwgMCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRWYWx1ZShjZWxsKSB7XG4gIGlmICghKGNlbGwgaW5zdGFuY2VvZiBDZWxsKSkge1xuICAgIGNvbnNvbGUud2FybihcIk5vdCBhIHZhbGlkIGNlbGwhIFwiLCBjZWxsKTtcbiAgfVxuICByZXR1cm4gY2VsbC52YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlKHN0b3JhZ2UsIHZhbHVlKSB7XG4gIGlmICghKHN0b3JhZ2UgaW5zdGFuY2VvZiBDZWxsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcInNldFZhbHVlIG11c3QgYmUgcGFzc2VkIGEgdHJhY2tlZCBzdG9yZSBjcmVhdGVkIHdpdGggYGNyZWF0ZVN0b3JhZ2VgLlwiXG4gICAgKTtcbiAgfVxuICBzdG9yYWdlLnZhbHVlID0gc3RvcmFnZS5fbGFzdFZhbHVlID0gdmFsdWU7XG59XG5mdW5jdGlvbiBjcmVhdGVDZWxsKGluaXRpYWxWYWx1ZSwgaXNFcXVhbCA9IHRyaXBsZUVxKSB7XG4gIHJldHVybiBuZXcgQ2VsbChpbml0aWFsVmFsdWUsIGlzRXF1YWwpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoZm4pIHtcbiAgYXNzZXJ0SXNGdW5jdGlvbihcbiAgICBmbixcbiAgICBcInRoZSBmaXJzdCBwYXJhbWV0ZXIgdG8gYGNyZWF0ZUNhY2hlYCBtdXN0IGJlIGEgZnVuY3Rpb25cIlxuICApO1xuICByZXR1cm4gbmV3IFRyYWNraW5nQ2FjaGUoZm4pO1xufVxuXG4vLyBzcmMvYXV0b3RyYWNrTWVtb2l6ZS90cmFja2luZy50c1xudmFyIG5ldmVyRXEgPSAoYSwgYikgPT4gZmFsc2U7XG5mdW5jdGlvbiBjcmVhdGVUYWcoKSB7XG4gIHJldHVybiBjcmVhdGVDZWxsKG51bGwsIG5ldmVyRXEpO1xufVxuZnVuY3Rpb24gZGlydHlUYWcodGFnLCB2YWx1ZSkge1xuICBzZXRWYWx1ZSh0YWcsIHZhbHVlKTtcbn1cbnZhciBjb25zdW1lQ29sbGVjdGlvbiA9IChub2RlKSA9PiB7XG4gIGxldCB0YWcgPSBub2RlLmNvbGxlY3Rpb25UYWc7XG4gIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICB0YWcgPSBub2RlLmNvbGxlY3Rpb25UYWcgPSBjcmVhdGVUYWcoKTtcbiAgfVxuICBnZXRWYWx1ZSh0YWcpO1xufTtcbnZhciBkaXJ0eUNvbGxlY3Rpb24gPSAobm9kZSkgPT4ge1xuICBjb25zdCB0YWcgPSBub2RlLmNvbGxlY3Rpb25UYWc7XG4gIGlmICh0YWcgIT09IG51bGwpIHtcbiAgICBkaXJ0eVRhZyh0YWcsIG51bGwpO1xuICB9XG59O1xuXG4vLyBzcmMvYXV0b3RyYWNrTWVtb2l6ZS9wcm94eS50c1xudmFyIFJFRFVYX1BST1hZX0xBQkVMID0gU3ltYm9sKCk7XG52YXIgbmV4dElkID0gMDtcbnZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih7fSk7XG52YXIgT2JqZWN0VHJlZU5vZGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnRhZy52YWx1ZSA9IHZhbHVlO1xuICB9XG4gIHByb3h5ID0gbmV3IFByb3h5KHRoaXMsIG9iamVjdFByb3h5SGFuZGxlcik7XG4gIHRhZyA9IGNyZWF0ZVRhZygpO1xuICB0YWdzID0ge307XG4gIGNoaWxkcmVuID0ge307XG4gIGNvbGxlY3Rpb25UYWcgPSBudWxsO1xuICBpZCA9IG5leHRJZCsrO1xufTtcbnZhciBvYmplY3RQcm94eUhhbmRsZXIgPSB7XG4gIGdldChub2RlLCBrZXkpIHtcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVSZXN1bHQoKSB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBub2RlO1xuICAgICAgY29uc3QgY2hpbGRWYWx1ZSA9IFJlZmxlY3QuZ2V0KHZhbHVlLCBrZXkpO1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkVmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoa2V5IGluIHByb3RvKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjaGlsZFZhbHVlID09PSBcIm9iamVjdFwiICYmIGNoaWxkVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IGNoaWxkTm9kZSA9IG5vZGUuY2hpbGRyZW5ba2V5XTtcbiAgICAgICAgaWYgKGNoaWxkTm9kZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY2hpbGROb2RlID0gbm9kZS5jaGlsZHJlbltrZXldID0gY3JlYXRlTm9kZShjaGlsZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGROb2RlLnRhZykge1xuICAgICAgICAgIGdldFZhbHVlKGNoaWxkTm9kZS50YWcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZE5vZGUucHJveHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdGFnID0gbm9kZS50YWdzW2tleV07XG4gICAgICAgIGlmICh0YWcgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRhZyA9IG5vZGUudGFnc1trZXldID0gY3JlYXRlVGFnKCk7XG4gICAgICAgICAgdGFnLnZhbHVlID0gY2hpbGRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXRWYWx1ZSh0YWcpO1xuICAgICAgICByZXR1cm4gY2hpbGRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzID0gY2FsY3VsYXRlUmVzdWx0KCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfSxcbiAgb3duS2V5cyhub2RlKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24obm9kZSk7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyhub2RlLnZhbHVlKTtcbiAgfSxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5vZGUsIHByb3ApIHtcbiAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobm9kZS52YWx1ZSwgcHJvcCk7XG4gIH0sXG4gIGhhcyhub2RlLCBwcm9wKSB7XG4gICAgcmV0dXJuIFJlZmxlY3QuaGFzKG5vZGUudmFsdWUsIHByb3ApO1xuICB9XG59O1xudmFyIEFycmF5VHJlZU5vZGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnRhZy52YWx1ZSA9IHZhbHVlO1xuICB9XG4gIHByb3h5ID0gbmV3IFByb3h5KFt0aGlzXSwgYXJyYXlQcm94eUhhbmRsZXIpO1xuICB0YWcgPSBjcmVhdGVUYWcoKTtcbiAgdGFncyA9IHt9O1xuICBjaGlsZHJlbiA9IHt9O1xuICBjb2xsZWN0aW9uVGFnID0gbnVsbDtcbiAgaWQgPSBuZXh0SWQrKztcbn07XG52YXIgYXJyYXlQcm94eUhhbmRsZXIgPSB7XG4gIGdldChbbm9kZV0sIGtleSkge1xuICAgIGlmIChrZXkgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgIGNvbnN1bWVDb2xsZWN0aW9uKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0UHJveHlIYW5kbGVyLmdldChub2RlLCBrZXkpO1xuICB9LFxuICBvd25LZXlzKFtub2RlXSkge1xuICAgIHJldHVybiBvYmplY3RQcm94eUhhbmRsZXIub3duS2V5cyhub2RlKTtcbiAgfSxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFtub2RlXSwgcHJvcCkge1xuICAgIHJldHVybiBvYmplY3RQcm94eUhhbmRsZXIuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5vZGUsIHByb3ApO1xuICB9LFxuICBoYXMoW25vZGVdLCBwcm9wKSB7XG4gICAgcmV0dXJuIG9iamVjdFByb3h5SGFuZGxlci5oYXMobm9kZSwgcHJvcCk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVOb2RlKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBuZXcgQXJyYXlUcmVlTm9kZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBPYmplY3RUcmVlTm9kZSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVOb2RlKG5vZGUsIG5ld1ZhbHVlKSB7XG4gIGNvbnN0IHsgdmFsdWUsIHRhZ3MsIGNoaWxkcmVuIH0gPSBub2RlO1xuICBub2RlLnZhbHVlID0gbmV3VmFsdWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggIT09IG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgIGRpcnR5Q29sbGVjdGlvbihub2RlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICBsZXQgb2xkS2V5c1NpemUgPSAwO1xuICAgICAgbGV0IG5ld0tleXNTaXplID0gMDtcbiAgICAgIGxldCBhbnlLZXlzQWRkZWQgPSBmYWxzZTtcbiAgICAgIGZvciAoY29uc3QgX2tleSBpbiB2YWx1ZSkge1xuICAgICAgICBvbGRLZXlzU2l6ZSsrO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgbmV3S2V5c1NpemUrKztcbiAgICAgICAgaWYgKCEoa2V5IGluIHZhbHVlKSkge1xuICAgICAgICAgIGFueUtleXNBZGRlZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzRGlmZmVyZW50ID0gYW55S2V5c0FkZGVkIHx8IG9sZEtleXNTaXplICE9PSBuZXdLZXlzU2l6ZTtcbiAgICAgIGlmIChpc0RpZmZlcmVudCkge1xuICAgICAgICBkaXJ0eUNvbGxlY3Rpb24obm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIHRhZ3MpIHtcbiAgICBjb25zdCBjaGlsZFZhbHVlID0gdmFsdWVba2V5XTtcbiAgICBjb25zdCBuZXdDaGlsZFZhbHVlID0gbmV3VmFsdWVba2V5XTtcbiAgICBpZiAoY2hpbGRWYWx1ZSAhPT0gbmV3Q2hpbGRWYWx1ZSkge1xuICAgICAgZGlydHlDb2xsZWN0aW9uKG5vZGUpO1xuICAgICAgZGlydHlUYWcodGFnc1trZXldLCBuZXdDaGlsZFZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZFZhbHVlID09PSBcIm9iamVjdFwiICYmIG5ld0NoaWxkVmFsdWUgIT09IG51bGwpIHtcbiAgICAgIGRlbGV0ZSB0YWdzW2tleV07XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGNoaWxkcmVuKSB7XG4gICAgY29uc3QgY2hpbGROb2RlID0gY2hpbGRyZW5ba2V5XTtcbiAgICBjb25zdCBuZXdDaGlsZFZhbHVlID0gbmV3VmFsdWVba2V5XTtcbiAgICBjb25zdCBjaGlsZFZhbHVlID0gY2hpbGROb2RlLnZhbHVlO1xuICAgIGlmIChjaGlsZFZhbHVlID09PSBuZXdDaGlsZFZhbHVlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXdDaGlsZFZhbHVlID09PSBcIm9iamVjdFwiICYmIG5ld0NoaWxkVmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHVwZGF0ZU5vZGUoY2hpbGROb2RlLCBuZXdDaGlsZFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlTm9kZShjaGlsZE5vZGUpO1xuICAgICAgZGVsZXRlIGNoaWxkcmVuW2tleV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkZWxldGVOb2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUudGFnKSB7XG4gICAgZGlydHlUYWcobm9kZS50YWcsIG51bGwpO1xuICB9XG4gIGRpcnR5Q29sbGVjdGlvbihub2RlKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gbm9kZS50YWdzKSB7XG4gICAgZGlydHlUYWcobm9kZS50YWdzW2tleV0sIG51bGwpO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIG5vZGUuY2hpbGRyZW4pIHtcbiAgICBkZWxldGVOb2RlKG5vZGUuY2hpbGRyZW5ba2V5XSk7XG4gIH1cbn1cblxuLy8gc3JjL2xydU1lbW9pemUudHNcbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZXRvbkNhY2hlKGVxdWFscykge1xuICBsZXQgZW50cnk7XG4gIHJldHVybiB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgaWYgKGVudHJ5ICYmIGVxdWFscyhlbnRyeS5rZXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5PVF9GT1VORDtcbiAgICB9LFxuICAgIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICBlbnRyeSA9IHsga2V5LCB2YWx1ZSB9O1xuICAgIH0sXG4gICAgZ2V0RW50cmllcygpIHtcbiAgICAgIHJldHVybiBlbnRyeSA/IFtlbnRyeV0gOiBbXTtcbiAgICB9LFxuICAgIGNsZWFyKCkge1xuICAgICAgZW50cnkgPSB2b2lkIDA7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlTHJ1Q2FjaGUobWF4U2l6ZSwgZXF1YWxzKSB7XG4gIGxldCBlbnRyaWVzID0gW107XG4gIGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBjb25zdCBjYWNoZUluZGV4ID0gZW50cmllcy5maW5kSW5kZXgoKGVudHJ5KSA9PiBlcXVhbHMoa2V5LCBlbnRyeS5rZXkpKTtcbiAgICBpZiAoY2FjaGVJbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbY2FjaGVJbmRleF07XG4gICAgICBpZiAoY2FjaGVJbmRleCA+IDApIHtcbiAgICAgICAgZW50cmllcy5zcGxpY2UoY2FjaGVJbmRleCwgMSk7XG4gICAgICAgIGVudHJpZXMudW5zaGlmdChlbnRyeSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBOT1RfRk9VTkQ7XG4gIH1cbiAgZnVuY3Rpb24gcHV0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAoZ2V0KGtleSkgPT09IE5PVF9GT1VORCkge1xuICAgICAgZW50cmllcy51bnNoaWZ0KHsga2V5LCB2YWx1ZSB9KTtcbiAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IG1heFNpemUpIHtcbiAgICAgICAgZW50cmllcy5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RW50cmllcygpIHtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfVxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBlbnRyaWVzID0gW107XG4gIH1cbiAgcmV0dXJuIHsgZ2V0LCBwdXQsIGdldEVudHJpZXMsIGNsZWFyIH07XG59XG52YXIgcmVmZXJlbmNlRXF1YWxpdHlDaGVjayA9IChhLCBiKSA9PiBhID09PSBiO1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGVLZXlDb21wYXJhdG9yKGVxdWFsaXR5Q2hlY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKHByZXYsIG5leHQpIHtcbiAgICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gcHJldjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGxydU1lbW9pemUoZnVuYywgZXF1YWxpdHlDaGVja09yT3B0aW9ucykge1xuICBjb25zdCBwcm92aWRlZE9wdGlvbnMgPSB0eXBlb2YgZXF1YWxpdHlDaGVja09yT3B0aW9ucyA9PT0gXCJvYmplY3RcIiA/IGVxdWFsaXR5Q2hlY2tPck9wdGlvbnMgOiB7IGVxdWFsaXR5Q2hlY2s6IGVxdWFsaXR5Q2hlY2tPck9wdGlvbnMgfTtcbiAgY29uc3Qge1xuICAgIGVxdWFsaXR5Q2hlY2sgPSByZWZlcmVuY2VFcXVhbGl0eUNoZWNrLFxuICAgIG1heFNpemUgPSAxLFxuICAgIHJlc3VsdEVxdWFsaXR5Q2hlY2tcbiAgfSA9IHByb3ZpZGVkT3B0aW9ucztcbiAgY29uc3QgY29tcGFyYXRvciA9IGNyZWF0ZUNhY2hlS2V5Q29tcGFyYXRvcihlcXVhbGl0eUNoZWNrKTtcbiAgbGV0IHJlc3VsdHNDb3VudCA9IDA7XG4gIGNvbnN0IGNhY2hlID0gbWF4U2l6ZSA8PSAxID8gY3JlYXRlU2luZ2xldG9uQ2FjaGUoY29tcGFyYXRvcikgOiBjcmVhdGVMcnVDYWNoZShtYXhTaXplLCBjb21wYXJhdG9yKTtcbiAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgbGV0IHZhbHVlID0gY2FjaGUuZ2V0KGFyZ3VtZW50cyk7XG4gICAgaWYgKHZhbHVlID09PSBOT1RfRk9VTkQpIHtcbiAgICAgIHZhbHVlID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgcmVzdWx0c0NvdW50Kys7XG4gICAgICBpZiAocmVzdWx0RXF1YWxpdHlDaGVjaykge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gY2FjaGUuZ2V0RW50cmllcygpO1xuICAgICAgICBjb25zdCBtYXRjaGluZ0VudHJ5ID0gZW50cmllcy5maW5kKFxuICAgICAgICAgIChlbnRyeSkgPT4gcmVzdWx0RXF1YWxpdHlDaGVjayhlbnRyeS52YWx1ZSwgdmFsdWUpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChtYXRjaGluZ0VudHJ5KSB7XG4gICAgICAgICAgdmFsdWUgPSBtYXRjaGluZ0VudHJ5LnZhbHVlO1xuICAgICAgICAgIHJlc3VsdHNDb3VudCAhPT0gMCAmJiByZXN1bHRzQ291bnQtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FjaGUucHV0KGFyZ3VtZW50cywgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgbWVtb2l6ZWQuY2xlYXJDYWNoZSA9ICgpID0+IHtcbiAgICBjYWNoZS5jbGVhcigpO1xuICAgIG1lbW9pemVkLnJlc2V0UmVzdWx0c0NvdW50KCk7XG4gIH07XG4gIG1lbW9pemVkLnJlc3VsdHNDb3VudCA9ICgpID0+IHJlc3VsdHNDb3VudDtcbiAgbWVtb2l6ZWQucmVzZXRSZXN1bHRzQ291bnQgPSAoKSA9PiB7XG4gICAgcmVzdWx0c0NvdW50ID0gMDtcbiAgfTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBzcmMvYXV0b3RyYWNrTWVtb2l6ZS9hdXRvdHJhY2tNZW1vaXplLnRzXG5mdW5jdGlvbiBhdXRvdHJhY2tNZW1vaXplKGZ1bmMpIHtcbiAgY29uc3Qgbm9kZSA9IGNyZWF0ZU5vZGUoXG4gICAgW11cbiAgKTtcbiAgbGV0IGxhc3RBcmdzID0gbnVsbDtcbiAgY29uc3Qgc2hhbGxvd0VxdWFsID0gY3JlYXRlQ2FjaGVLZXlDb21wYXJhdG9yKHJlZmVyZW5jZUVxdWFsaXR5Q2hlY2spO1xuICBjb25zdCBjYWNoZSA9IGNyZWF0ZUNhY2hlKCgpID0+IHtcbiAgICBjb25zdCByZXMgPSBmdW5jLmFwcGx5KG51bGwsIG5vZGUucHJveHkpO1xuICAgIHJldHVybiByZXM7XG4gIH0pO1xuICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICBpZiAoIXNoYWxsb3dFcXVhbChsYXN0QXJncywgYXJndW1lbnRzKSkge1xuICAgICAgdXBkYXRlTm9kZShub2RlLCBhcmd1bWVudHMpO1xuICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZS52YWx1ZTtcbiAgfVxuICBtZW1vaXplZC5jbGVhckNhY2hlID0gKCkgPT4ge1xuICAgIHJldHVybiBjYWNoZS5jbGVhcigpO1xuICB9O1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIHNyYy93ZWFrTWFwTWVtb2l6ZS50c1xudmFyIFN0cm9uZ1JlZiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgZGVyZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn07XG52YXIgUmVmID0gdHlwZW9mIFdlYWtSZWYgIT09IFwidW5kZWZpbmVkXCIgPyBXZWFrUmVmIDogU3Ryb25nUmVmO1xudmFyIFVOVEVSTUlOQVRFRCA9IDA7XG52YXIgVEVSTUlOQVRFRCA9IDE7XG5mdW5jdGlvbiBjcmVhdGVDYWNoZU5vZGUoKSB7XG4gIHJldHVybiB7XG4gICAgczogVU5URVJNSU5BVEVELFxuICAgIHY6IHZvaWQgMCxcbiAgICBvOiBudWxsLFxuICAgIHA6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIHdlYWtNYXBNZW1vaXplKGZ1bmMsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgZm5Ob2RlID0gY3JlYXRlQ2FjaGVOb2RlKCk7XG4gIGNvbnN0IHsgcmVzdWx0RXF1YWxpdHlDaGVjayB9ID0gb3B0aW9ucztcbiAgbGV0IGxhc3RSZXN1bHQ7XG4gIGxldCByZXN1bHRzQ291bnQgPSAwO1xuICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICBsZXQgY2FjaGVOb2RlID0gZm5Ob2RlO1xuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBhcmd1bWVudHM7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNvbnN0IGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJiBhcmcgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IG9iamVjdENhY2hlID0gY2FjaGVOb2RlLm87XG4gICAgICAgIGlmIChvYmplY3RDYWNoZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGNhY2hlTm9kZS5vID0gb2JqZWN0Q2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmplY3ROb2RlID0gb2JqZWN0Q2FjaGUuZ2V0KGFyZyk7XG4gICAgICAgIGlmIChvYmplY3ROb2RlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjYWNoZU5vZGUgPSBjcmVhdGVDYWNoZU5vZGUoKTtcbiAgICAgICAgICBvYmplY3RDYWNoZS5zZXQoYXJnLCBjYWNoZU5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhY2hlTm9kZSA9IG9iamVjdE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmltaXRpdmVDYWNoZSA9IGNhY2hlTm9kZS5wO1xuICAgICAgICBpZiAocHJpbWl0aXZlQ2FjaGUgPT09IG51bGwpIHtcbiAgICAgICAgICBjYWNoZU5vZGUucCA9IHByaW1pdGl2ZUNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmltaXRpdmVOb2RlID0gcHJpbWl0aXZlQ2FjaGUuZ2V0KGFyZyk7XG4gICAgICAgIGlmIChwcmltaXRpdmVOb2RlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjYWNoZU5vZGUgPSBjcmVhdGVDYWNoZU5vZGUoKTtcbiAgICAgICAgICBwcmltaXRpdmVDYWNoZS5zZXQoYXJnLCBjYWNoZU5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhY2hlTm9kZSA9IHByaW1pdGl2ZU5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGVybWluYXRlZE5vZGUgPSBjYWNoZU5vZGU7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoY2FjaGVOb2RlLnMgPT09IFRFUk1JTkFURUQpIHtcbiAgICAgIHJlc3VsdCA9IGNhY2hlTm9kZS52O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICByZXN1bHRzQ291bnQrKztcbiAgICAgIGlmIChyZXN1bHRFcXVhbGl0eUNoZWNrKSB7XG4gICAgICAgIGNvbnN0IGxhc3RSZXN1bHRWYWx1ZSA9IGxhc3RSZXN1bHQ/LmRlcmVmPy4oKSA/PyBsYXN0UmVzdWx0O1xuICAgICAgICBpZiAobGFzdFJlc3VsdFZhbHVlICE9IG51bGwgJiYgcmVzdWx0RXF1YWxpdHlDaGVjayhsYXN0UmVzdWx0VmFsdWUsIHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBsYXN0UmVzdWx0VmFsdWU7XG4gICAgICAgICAgcmVzdWx0c0NvdW50ICE9PSAwICYmIHJlc3VsdHNDb3VudC0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRzV2Vha1JlZiA9IHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIgJiYgcmVzdWx0ICE9PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgbGFzdFJlc3VsdCA9IG5lZWRzV2Vha1JlZiA/IG5ldyBSZWYocmVzdWx0KSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGVybWluYXRlZE5vZGUucyA9IFRFUk1JTkFURUQ7XG4gICAgdGVybWluYXRlZE5vZGUudiA9IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIG1lbW9pemVkLmNsZWFyQ2FjaGUgPSAoKSA9PiB7XG4gICAgZm5Ob2RlID0gY3JlYXRlQ2FjaGVOb2RlKCk7XG4gICAgbWVtb2l6ZWQucmVzZXRSZXN1bHRzQ291bnQoKTtcbiAgfTtcbiAgbWVtb2l6ZWQucmVzdWx0c0NvdW50ID0gKCkgPT4gcmVzdWx0c0NvdW50O1xuICBtZW1vaXplZC5yZXNldFJlc3VsdHNDb3VudCA9ICgpID0+IHtcbiAgICByZXN1bHRzQ291bnQgPSAwO1xuICB9O1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIHNyYy9jcmVhdGVTZWxlY3RvckNyZWF0b3IudHNcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplT3JPcHRpb25zLCAuLi5tZW1vaXplT3B0aW9uc0Zyb21BcmdzKSB7XG4gIGNvbnN0IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvck9wdGlvbnMgPSB0eXBlb2YgbWVtb2l6ZU9yT3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiID8ge1xuICAgIG1lbW9pemU6IG1lbW9pemVPck9wdGlvbnMsXG4gICAgbWVtb2l6ZU9wdGlvbnM6IG1lbW9pemVPcHRpb25zRnJvbUFyZ3NcbiAgfSA6IG1lbW9pemVPck9wdGlvbnM7XG4gIGNvbnN0IGNyZWF0ZVNlbGVjdG9yMiA9ICguLi5jcmVhdGVTZWxlY3RvckFyZ3MpID0+IHtcbiAgICBsZXQgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIGxldCBkZXBlbmRlbmN5UmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIGxldCBsYXN0UmVzdWx0O1xuICAgIGxldCBkaXJlY3RseVBhc3NlZE9wdGlvbnMgPSB7fTtcbiAgICBsZXQgcmVzdWx0RnVuYyA9IGNyZWF0ZVNlbGVjdG9yQXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdEZ1bmMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGRpcmVjdGx5UGFzc2VkT3B0aW9ucyA9IHJlc3VsdEZ1bmM7XG4gICAgICByZXN1bHRGdW5jID0gY3JlYXRlU2VsZWN0b3JBcmdzLnBvcCgpO1xuICAgIH1cbiAgICBhc3NlcnRJc0Z1bmN0aW9uKFxuICAgICAgcmVzdWx0RnVuYyxcbiAgICAgIGBjcmVhdGVTZWxlY3RvciBleHBlY3RzIGFuIG91dHB1dCBmdW5jdGlvbiBhZnRlciB0aGUgaW5wdXRzLCBidXQgcmVjZWl2ZWQ6IFske3R5cGVvZiByZXN1bHRGdW5jfV1gXG4gICAgKTtcbiAgICBjb25zdCBjb21iaW5lZE9wdGlvbnMgPSB7XG4gICAgICAuLi5jcmVhdGVTZWxlY3RvckNyZWF0b3JPcHRpb25zLFxuICAgICAgLi4uZGlyZWN0bHlQYXNzZWRPcHRpb25zXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBtZW1vaXplLFxuICAgICAgbWVtb2l6ZU9wdGlvbnMgPSBbXSxcbiAgICAgIGFyZ3NNZW1vaXplID0gd2Vha01hcE1lbW9pemUsXG4gICAgICBhcmdzTWVtb2l6ZU9wdGlvbnMgPSBbXSxcbiAgICAgIGRldk1vZGVDaGVja3MgPSB7fVxuICAgIH0gPSBjb21iaW5lZE9wdGlvbnM7XG4gICAgY29uc3QgZmluYWxNZW1vaXplT3B0aW9ucyA9IGVuc3VyZUlzQXJyYXkobWVtb2l6ZU9wdGlvbnMpO1xuICAgIGNvbnN0IGZpbmFsQXJnc01lbW9pemVPcHRpb25zID0gZW5zdXJlSXNBcnJheShhcmdzTWVtb2l6ZU9wdGlvbnMpO1xuICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhjcmVhdGVTZWxlY3RvckFyZ3MpO1xuICAgIGNvbnN0IG1lbW9pemVkUmVzdWx0RnVuYyA9IG1lbW9pemUoZnVuY3Rpb24gcmVjb21wdXRhdGlvbldyYXBwZXIoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgcmV0dXJuIHJlc3VsdEZ1bmMuYXBwbHkoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGFyZ3VtZW50c1xuICAgICAgKTtcbiAgICB9LCAuLi5maW5hbE1lbW9pemVPcHRpb25zKTtcbiAgICBsZXQgZmlyc3RSdW4gPSB0cnVlO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYXJnc01lbW9pemUoZnVuY3Rpb24gZGVwZW5kZW5jaWVzQ2hlY2tlcigpIHtcbiAgICAgIGRlcGVuZGVuY3lSZWNvbXB1dGF0aW9ucysrO1xuICAgICAgY29uc3QgaW5wdXRTZWxlY3RvclJlc3VsdHMgPSBjb2xsZWN0SW5wdXRTZWxlY3RvclJlc3VsdHMoXG4gICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgICAgYXJndW1lbnRzXG4gICAgICApO1xuICAgICAgbGFzdFJlc3VsdCA9IG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBpbnB1dFNlbGVjdG9yUmVzdWx0cyk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IHsgaWRlbnRpdHlGdW5jdGlvbkNoZWNrLCBpbnB1dFN0YWJpbGl0eUNoZWNrIH0gPSBnZXREZXZNb2RlQ2hlY2tzRXhlY3V0aW9uSW5mbyhmaXJzdFJ1biwgZGV2TW9kZUNoZWNrcyk7XG4gICAgICAgIGlmIChpZGVudGl0eUZ1bmN0aW9uQ2hlY2suc2hvdWxkUnVuKSB7XG4gICAgICAgICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrLnJ1bihcbiAgICAgICAgICAgIHJlc3VsdEZ1bmMsXG4gICAgICAgICAgICBpbnB1dFNlbGVjdG9yUmVzdWx0cyxcbiAgICAgICAgICAgIGxhc3RSZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dFN0YWJpbGl0eUNoZWNrLnNob3VsZFJ1bikge1xuICAgICAgICAgIGNvbnN0IGlucHV0U2VsZWN0b3JSZXN1bHRzQ29weSA9IGNvbGxlY3RJbnB1dFNlbGVjdG9yUmVzdWx0cyhcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgICAgICAgIGFyZ3VtZW50c1xuICAgICAgICAgICk7XG4gICAgICAgICAgaW5wdXRTdGFiaWxpdHlDaGVjay5ydW4oXG4gICAgICAgICAgICB7IGlucHV0U2VsZWN0b3JSZXN1bHRzLCBpbnB1dFNlbGVjdG9yUmVzdWx0c0NvcHkgfSxcbiAgICAgICAgICAgIHsgbWVtb2l6ZSwgbWVtb2l6ZU9wdGlvbnM6IGZpbmFsTWVtb2l6ZU9wdGlvbnMgfSxcbiAgICAgICAgICAgIGFyZ3VtZW50c1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0UnVuKVxuICAgICAgICAgIGZpcnN0UnVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9LCAuLi5maW5hbEFyZ3NNZW1vaXplT3B0aW9ucyk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc2VsZWN0b3IsIHtcbiAgICAgIHJlc3VsdEZ1bmMsXG4gICAgICBtZW1vaXplZFJlc3VsdEZ1bmMsXG4gICAgICBkZXBlbmRlbmNpZXMsXG4gICAgICBkZXBlbmRlbmN5UmVjb21wdXRhdGlvbnM6ICgpID0+IGRlcGVuZGVuY3lSZWNvbXB1dGF0aW9ucyxcbiAgICAgIHJlc2V0RGVwZW5kZW5jeVJlY29tcHV0YXRpb25zOiAoKSA9PiB7XG4gICAgICAgIGRlcGVuZGVuY3lSZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgICB9LFxuICAgICAgbGFzdFJlc3VsdDogKCkgPT4gbGFzdFJlc3VsdCxcbiAgICAgIHJlY29tcHV0YXRpb25zOiAoKSA9PiByZWNvbXB1dGF0aW9ucyxcbiAgICAgIHJlc2V0UmVjb21wdXRhdGlvbnM6ICgpID0+IHtcbiAgICAgICAgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgICAgfSxcbiAgICAgIG1lbW9pemUsXG4gICAgICBhcmdzTWVtb2l6ZVxuICAgIH0pO1xuICB9O1xuICBPYmplY3QuYXNzaWduKGNyZWF0ZVNlbGVjdG9yMiwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gY3JlYXRlU2VsZWN0b3IyXG4gIH0pO1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IyO1xufVxudmFyIGNyZWF0ZVNlbGVjdG9yID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcih3ZWFrTWFwTWVtb2l6ZSk7XG5cbi8vIHNyYy9jcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IudHNcbnZhciBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgPSBPYmplY3QuYXNzaWduKFxuICAoaW5wdXRTZWxlY3RvcnNPYmplY3QsIHNlbGVjdG9yQ3JlYXRvciA9IGNyZWF0ZVNlbGVjdG9yKSA9PiB7XG4gICAgYXNzZXJ0SXNPYmplY3QoXG4gICAgICBpbnB1dFNlbGVjdG9yc09iamVjdCxcbiAgICAgIGBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJHt0eXBlb2YgaW5wdXRTZWxlY3RvcnNPYmplY3R9YFxuICAgICk7XG4gICAgY29uc3QgaW5wdXRTZWxlY3RvcktleXMgPSBPYmplY3Qua2V5cyhpbnB1dFNlbGVjdG9yc09iamVjdCk7XG4gICAgY29uc3QgZGVwZW5kZW5jaWVzID0gaW5wdXRTZWxlY3RvcktleXMubWFwKFxuICAgICAgKGtleSkgPT4gaW5wdXRTZWxlY3RvcnNPYmplY3Rba2V5XVxuICAgICk7XG4gICAgY29uc3Qgc3RydWN0dXJlZFNlbGVjdG9yID0gc2VsZWN0b3JDcmVhdG9yKFxuICAgICAgZGVwZW5kZW5jaWVzLFxuICAgICAgKC4uLmlucHV0U2VsZWN0b3JSZXN1bHRzKSA9PiB7XG4gICAgICAgIHJldHVybiBpbnB1dFNlbGVjdG9yUmVzdWx0cy5yZWR1Y2UoKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb21wb3NpdGlvbltpbnB1dFNlbGVjdG9yS2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgICAgICB9LCB7fSk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gc3RydWN0dXJlZFNlbGVjdG9yO1xuICB9LFxuICB7IHdpdGhUeXBlczogKCkgPT4gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yIH1cbik7XG5leHBvcnQge1xuICBjcmVhdGVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3JDcmVhdG9yLFxuICBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IsXG4gIGxydU1lbW9pemUsXG4gIHJlZmVyZW5jZUVxdWFsaXR5Q2hlY2ssXG4gIHNldEdsb2JhbERldk1vZGVDaGVja3MsXG4gIGF1dG90cmFja01lbW9pemUgYXMgdW5zdGFibGVfYXV0b3RyYWNrTWVtb2l6ZSxcbiAgd2Vha01hcE1lbW9pemVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNlbGVjdC5tanMubWFwIiwiLy8gc3JjL2luZGV4LnRzXG5mdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICBjb25zdCBtaWRkbGV3YXJlID0gKHsgZGlzcGF0Y2gsIGdldFN0YXRlIH0pID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICB9O1xuICByZXR1cm4gbWlkZGxld2FyZTtcbn1cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudmFyIHdpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuZXhwb3J0IHtcbiAgdGh1bmssXG4gIHdpdGhFeHRyYUFyZ3VtZW50XG59O1xuIiwiLy8gc3JjL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCB7IHByb2R1Y2UsIGN1cnJlbnQgYXMgY3VycmVudDMsIGZyZWV6ZSwgb3JpZ2luYWwgYXMgb3JpZ2luYWwyLCBpc0RyYWZ0IGFzIGlzRHJhZnQ1IH0gZnJvbSBcImltbWVyXCI7XG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JDcmVhdG9yIGFzIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcjIsIGxydU1lbW9pemUsIHdlYWtNYXBNZW1vaXplIGFzIHdlYWtNYXBNZW1vaXplMiB9IGZyb20gXCJyZXNlbGVjdFwiO1xuXG4vLyBzcmMvY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IudHNcbmltcG9ydCB7IGN1cnJlbnQsIGlzRHJhZnQgfSBmcm9tIFwiaW1tZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvciwgd2Vha01hcE1lbW9pemUgfSBmcm9tIFwicmVzZWxlY3RcIjtcbnZhciBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvckNyZWF0b3IgPSAoLi4uYXJncykgPT4ge1xuICBjb25zdCBjcmVhdGVTZWxlY3RvcjIgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoLi4uYXJncyk7XG4gIGNvbnN0IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yMiA9IE9iamVjdC5hc3NpZ24oKC4uLmFyZ3MyKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvcjIoLi4uYXJnczIpO1xuICAgIGNvbnN0IHdyYXBwZWRTZWxlY3RvciA9ICh2YWx1ZSwgLi4ucmVzdCkgPT4gc2VsZWN0b3IoaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlLCAuLi5yZXN0KTtcbiAgICBPYmplY3QuYXNzaWduKHdyYXBwZWRTZWxlY3Rvciwgc2VsZWN0b3IpO1xuICAgIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XG4gIH0sIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yMlxuICB9KTtcbiAgcmV0dXJuIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yMjtcbn07XG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3JDcmVhdG9yKHdlYWtNYXBNZW1vaXplKTtcblxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXG5pbXBvcnQgeyBhcHBseU1pZGRsZXdhcmUsIGNyZWF0ZVN0b3JlLCBjb21wb3NlIGFzIGNvbXBvc2UyLCBjb21iaW5lUmVkdWNlcnMsIGlzUGxhaW5PYmplY3QgYXMgaXNQbGFpbk9iamVjdDIgfSBmcm9tIFwicmVkdXhcIjtcblxuLy8gc3JjL2RldnRvb2xzRXh0ZW5zaW9uLnRzXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSBcInJlZHV4XCI7XG52YXIgY29tcG9zZVdpdGhEZXZUb29scyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbigpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB2b2lkIDA7XG4gIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm9iamVjdFwiKSByZXR1cm4gY29tcG9zZTtcbiAgcmV0dXJuIGNvbXBvc2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn07XG52YXIgZGV2VG9vbHNFbmhhbmNlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA6IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24obm9vcDMpIHtcbiAgICByZXR1cm4gbm9vcDM7XG4gIH07XG59O1xuXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcbmltcG9ydCB7IHRodW5rIGFzIHRodW5rTWlkZGxld2FyZSwgd2l0aEV4dHJhQXJndW1lbnQgfSBmcm9tIFwicmVkdXgtdGh1bmtcIjtcblxuLy8gc3JjL2NyZWF0ZUFjdGlvbi50c1xuaW1wb3J0IHsgaXNBY3Rpb24gfSBmcm9tIFwicmVkdXhcIjtcblxuLy8gc3JjL3RzSGVscGVycy50c1xudmFyIGhhc01hdGNoRnVuY3Rpb24gPSAodikgPT4ge1xuICByZXR1cm4gdiAmJiB0eXBlb2Ygdi5tYXRjaCA9PT0gXCJmdW5jdGlvblwiO1xufTtcblxuLy8gc3JjL2NyZWF0ZUFjdGlvbi50c1xuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcbiAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvciguLi5hcmdzKSB7XG4gICAgaWYgKHByZXBhcmVBY3Rpb24pIHtcbiAgICAgIGxldCBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24oLi4uYXJncyk7XG4gICAgICBpZiAoIXByZXBhcmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDApIDogXCJwcmVwYXJlQWN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWQsXG4gICAgICAgIC4uLlwibWV0YVwiIGluIHByZXBhcmVkICYmIHtcbiAgICAgICAgICBtZXRhOiBwcmVwYXJlZC5tZXRhXG4gICAgICAgIH0sXG4gICAgICAgIC4uLlwiZXJyb3JcIiBpbiBwcmVwYXJlZCAmJiB7XG4gICAgICAgICAgZXJyb3I6IHByZXBhcmVkLmVycm9yXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlLFxuICAgICAgcGF5bG9hZDogYXJnc1swXVxuICAgIH07XG4gIH1cbiAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9ICgpID0+IGAke3R5cGV9YDtcbiAgYWN0aW9uQ3JlYXRvci50eXBlID0gdHlwZTtcbiAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IChhY3Rpb24pID0+IGlzQWN0aW9uKGFjdGlvbikgJiYgYWN0aW9uLnR5cGUgPT09IHR5cGU7XG4gIHJldHVybiBhY3Rpb25DcmVhdG9yO1xufVxuZnVuY3Rpb24gaXNBY3Rpb25DcmVhdG9yKGFjdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGFjdGlvbiA9PT0gXCJmdW5jdGlvblwiICYmIFwidHlwZVwiIGluIGFjdGlvbiAmJiAvLyBoYXNNYXRjaEZ1bmN0aW9uIG9ubHkgd2FudHMgTWF0Y2hlcnMgYnV0IEkgZG9uJ3Qgc2VlIHRoZSBwb2ludCBpbiByZXdyaXRpbmcgaXRcbiAgaGFzTWF0Y2hGdW5jdGlvbihhY3Rpb24pO1xufVxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XG4gIHJldHVybiBpc0FjdGlvbihhY3Rpb24pICYmIE9iamVjdC5rZXlzKGFjdGlvbikuZXZlcnkoaXNWYWxpZEtleSk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gW1widHlwZVwiLCBcInBheWxvYWRcIiwgXCJlcnJvclwiLCBcIm1ldGFcIl0uaW5kZXhPZihrZXkpID4gLTE7XG59XG5cbi8vIHNyYy9hY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZS50c1xuZnVuY3Rpb24gZ2V0TWVzc2FnZSh0eXBlKSB7XG4gIGNvbnN0IHNwbGl0VHlwZSA9IHR5cGUgPyBgJHt0eXBlfWAuc3BsaXQoXCIvXCIpIDogW107XG4gIGNvbnN0IGFjdGlvbk5hbWUgPSBzcGxpdFR5cGVbc3BsaXRUeXBlLmxlbmd0aCAtIDFdIHx8IFwiYWN0aW9uQ3JlYXRvclwiO1xuICByZXR1cm4gYERldGVjdGVkIGFuIGFjdGlvbiBjcmVhdG9yIHdpdGggdHlwZSBcIiR7dHlwZSB8fCBcInVua25vd25cIn1cIiBiZWluZyBkaXNwYXRjaGVkLiBcbk1ha2Ugc3VyZSB5b3UncmUgY2FsbGluZyB0aGUgYWN0aW9uIGNyZWF0b3IgYmVmb3JlIGRpc3BhdGNoaW5nLCBpLmUuIFxcYGRpc3BhdGNoKCR7YWN0aW9uTmFtZX0oKSlcXGAgaW5zdGVhZCBvZiBcXGBkaXNwYXRjaCgke2FjdGlvbk5hbWV9KVxcYC4gVGhpcyBpcyBuZWNlc3NhcnkgZXZlbiBpZiB0aGUgYWN0aW9uIGhhcyBubyBwYXlsb2FkLmA7XG59XG5mdW5jdGlvbiBjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHJldHVybiAoKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4gbmV4dChhY3Rpb24pO1xuICB9XG4gIGNvbnN0IHtcbiAgICBpc0FjdGlvbkNyZWF0b3I6IGlzQWN0aW9uQ3JlYXRvcjIgPSBpc0FjdGlvbkNyZWF0b3JcbiAgfSA9IG9wdGlvbnM7XG4gIHJldHVybiAoKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgIGlmIChpc0FjdGlvbkNyZWF0b3IyKGFjdGlvbikpIHtcbiAgICAgIGNvbnNvbGUud2FybihnZXRNZXNzYWdlKGFjdGlvbi50eXBlKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gIH07XG59XG5cbi8vIHNyYy91dGlscy50c1xuaW1wb3J0IHsgcHJvZHVjZSBhcyBjcmVhdGVOZXh0U3RhdGUsIGlzRHJhZnRhYmxlIH0gZnJvbSBcImltbWVyXCI7XG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcbiAgbGV0IGVsYXBzZWQgPSAwO1xuICByZXR1cm4ge1xuICAgIG1lYXN1cmVUaW1lKGZuKSB7XG4gICAgICBjb25zdCBzdGFydGVkID0gRGF0ZS5ub3coKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgY29uc3QgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhcm5JZkV4Y2VlZGVkKCkge1xuICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYCR7Zm5OYW1lfSB0b29rICR7ZWxhcHNlZH1tcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiAke21heERlbGF5fW1zLiBcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LmApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmQoaXRlcmFibGUsIGNvbXBhcmF0b3IpIHtcbiAgZm9yIChjb25zdCBlbnRyeSBvZiBpdGVyYWJsZSkge1xuICAgIGlmIChjb21wYXJhdG9yKGVudHJ5KSkge1xuICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxudmFyIFR1cGxlID0gY2xhc3MgX1R1cGxlIGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvciguLi5pdGVtcykge1xuICAgIHN1cGVyKC4uLml0ZW1zKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1R1cGxlLnByb3RvdHlwZSk7XG4gIH1cbiAgc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkge1xuICAgIHJldHVybiBfVHVwbGU7XG4gIH1cbiAgY29uY2F0KC4uLmFycikge1xuICAgIHJldHVybiBzdXBlci5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcbiAgfVxuICBwcmVwZW5kKC4uLmFycikge1xuICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xuICAgICAgcmV0dXJuIG5ldyBfVHVwbGUoLi4uYXJyWzBdLmNvbmNhdCh0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX1R1cGxlKC4uLmFyci5jb25jYXQodGhpcykpO1xuICB9XG59O1xuZnVuY3Rpb24gZnJlZXplRHJhZnRhYmxlKHZhbCkge1xuICByZXR1cm4gaXNEcmFmdGFibGUodmFsKSA/IGNyZWF0ZU5leHRTdGF0ZSh2YWwsICgpID0+IHtcbiAgfSkgOiB2YWw7XG59XG5mdW5jdGlvbiBlbXBsYWNlKG1hcCwga2V5LCBoYW5kbGVyKSB7XG4gIGlmIChtYXAuaGFzKGtleSkpIHtcbiAgICBsZXQgdmFsdWUgPSBtYXAuZ2V0KGtleSk7XG4gICAgaWYgKGhhbmRsZXIudXBkYXRlKSB7XG4gICAgICB2YWx1ZSA9IGhhbmRsZXIudXBkYXRlKHZhbHVlLCBrZXksIG1hcCk7XG4gICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKCFoYW5kbGVyLmluc2VydCkgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJObyBpbnNlcnQgcHJvdmlkZWQgZm9yIGtleSBub3QgYWxyZWFkeSBpbiBtYXBcIik7XG4gIGNvbnN0IGluc2VydGVkID0gaGFuZGxlci5pbnNlcnQoa2V5LCBtYXApO1xuICBtYXAuc2V0KGtleSwgaW5zZXJ0ZWQpO1xuICByZXR1cm4gaW5zZXJ0ZWQ7XG59XG5cbi8vIHNyYy9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09IG51bGwgfHwgT2JqZWN0LmlzRnJvemVuKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKSB7XG4gIGNvbnN0IHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKTtcbiAgcmV0dXJuIHtcbiAgICBkZXRlY3RNdXRhdGlvbnMoKSB7XG4gICAgICByZXR1cm4gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnRpZXMsIG9iaik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocyA9IFtdLCBvYmosIHBhdGggPSBcIlwiLCBjaGVja2VkT2JqZWN0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpIHtcbiAgY29uc3QgdHJhY2tlZCA9IHtcbiAgICB2YWx1ZTogb2JqXG4gIH07XG4gIGlmICghaXNJbW11dGFibGUob2JqKSAmJiAhY2hlY2tlZE9iamVjdHMuaGFzKG9iaikpIHtcbiAgICBjaGVja2VkT2JqZWN0cy5hZGQob2JqKTtcbiAgICB0cmFja2VkLmNoaWxkcmVuID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICBjb25zdCBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xuICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdHJhY2tlZC5jaGlsZHJlbltrZXldID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqW2tleV0sIGNoaWxkUGF0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmFja2VkO1xufVxuZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMgPSBbXSwgdHJhY2tlZFByb3BlcnR5LCBvYmosIHNhbWVQYXJlbnRSZWYgPSBmYWxzZSwgcGF0aCA9IFwiXCIpIHtcbiAgY29uc3QgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHZvaWQgMDtcbiAgY29uc3Qgc2FtZVJlZiA9IHByZXZPYmogPT09IG9iajtcbiAgaWYgKHNhbWVQYXJlbnRSZWYgJiYgIXNhbWVSZWYgJiYgIU51bWJlci5pc05hTihvYmopKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdhc011dGF0ZWQ6IHRydWUsXG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xuICAgIHJldHVybiB7XG4gICAgICB3YXNNdXRhdGVkOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgY29uc3Qga2V5c1RvRGV0ZWN0ID0ge307XG4gIGZvciAobGV0IGtleSBpbiB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pIHtcbiAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XG4gIH1cbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQga2V5IGluIGtleXNUb0RldGVjdCkge1xuICAgIGNvbnN0IG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xuICAgIGlmIChoYXNJZ25vcmVkUGF0aHMpIHtcbiAgICAgIGNvbnN0IGhhc01hdGNoZXMgPSBpZ25vcmVkUGF0aHMuc29tZSgoaWdub3JlZCkgPT4ge1xuICAgICAgICBpZiAoaWdub3JlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5lc3RlZFBhdGggPT09IGlnbm9yZWQ7XG4gICAgICB9KTtcbiAgICAgIGlmIChoYXNNYXRjaGVzKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocywgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sIG9ialtrZXldLCBzYW1lUmVmLCBuZXN0ZWRQYXRoKTtcbiAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgd2FzTXV0YXRlZDogZmFsc2VcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHJldHVybiAoKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4gbmV4dChhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIGxldCBzdHJpbmdpZnkyID0gZnVuY3Rpb24ob2JqLCBzZXJpYWxpemVyLCBpbmRlbnQsIGRlY3ljbGVyKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBnZXRTZXJpYWxpemUyKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcbiAgICB9LCBnZXRTZXJpYWxpemUyID0gZnVuY3Rpb24oc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcbiAgICAgIGxldCBzdGFjayA9IFtdLCBrZXlzID0gW107XG4gICAgICBpZiAoIWRlY3ljbGVyKSBkZWN5Y2xlciA9IGZ1bmN0aW9uKF8sIHZhbHVlKSB7XG4gICAgICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpIHJldHVybiBcIltDaXJjdWxhciB+XVwiO1xuICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfi5cIiArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oXCIuXCIpICsgXCJdXCI7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XG4gICAgICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKTtcbiAgICAgICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSkgdmFsdWUgPSBkZWN5Y2xlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Ugc3RhY2sucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyID09IG51bGwgPyB2YWx1ZSA6IHNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgc3RyaW5naWZ5ID0gc3RyaW5naWZ5MiwgZ2V0U2VyaWFsaXplID0gZ2V0U2VyaWFsaXplMjtcbiAgICBsZXQge1xuICAgICAgaXNJbW11dGFibGUgPSBpc0ltbXV0YWJsZURlZmF1bHQsXG4gICAgICBpZ25vcmVkUGF0aHMsXG4gICAgICB3YXJuQWZ0ZXIgPSAzMlxuICAgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKTtcbiAgICByZXR1cm4gKHtcbiAgICAgIGdldFN0YXRlXG4gICAgfSkgPT4ge1xuICAgICAgbGV0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgIGxldCB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIHJldHVybiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZSgoKSA9PiB7XG4gICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XG4gICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICAgICAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE5KSA6IGBBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBiZXR3ZWVuIGRpc3BhdGNoZXMsIGluIHRoZSBwYXRoICcke3Jlc3VsdC5wYXRoIHx8IFwiXCJ9Jy4gIFRoaXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvci4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKCgpID0+IHtcbiAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcbiAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xuICAgICAgICAgIGlmIChyZXN1bHQud2FzTXV0YXRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjApIDogYEEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGluc2lkZSBhIGRpc3BhdGNoLCBpbiB0aGUgcGF0aDogJHtyZXN1bHQucGF0aCB8fCBcIlwifS4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiAke3N0cmluZ2lmeTIoYWN0aW9uKX0uIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hlZEFjdGlvbjtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuXG4vLyBzcmMvc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXG5pbXBvcnQgeyBpc0FjdGlvbiBhcyBpc0FjdGlvbjIsIGlzUGxhaW5PYmplY3QgfSBmcm9tIFwicmVkdXhcIjtcbmZ1bmN0aW9uIGlzUGxhaW4odmFsKSB7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsO1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlID09PSBcIm51bWJlclwiIHx8IEFycmF5LmlzQXJyYXkodmFsKSB8fCBpc1BsYWluT2JqZWN0KHZhbCk7XG59XG5mdW5jdGlvbiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUodmFsdWUsIHBhdGggPSBcIlwiLCBpc1NlcmlhbGl6YWJsZSA9IGlzUGxhaW4sIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyA9IFtdLCBjYWNoZSkge1xuICBsZXQgZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XG4gIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleVBhdGg6IHBhdGggfHwgXCI8cm9vdD5cIixcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjYWNoZT8uaGFzKHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBlbnRyaWVzID0gZ2V0RW50cmllcyAhPSBudWxsID8gZ2V0RW50cmllcyh2YWx1ZSkgOiBPYmplY3QuZW50cmllcyh2YWx1ZSk7XG4gIGNvbnN0IGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xuICBmb3IgKGNvbnN0IFtrZXksIG5lc3RlZFZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgY29uc3QgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XG4gICAgaWYgKGhhc0lnbm9yZWRQYXRocykge1xuICAgICAgY29uc3QgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKChpZ25vcmVkKSA9PiB7XG4gICAgICAgIGlmIChpZ25vcmVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgcmV0dXJuIGlnbm9yZWQudGVzdChuZXN0ZWRQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmVzdGVkUGF0aCA9PT0gaWdub3JlZDtcbiAgICAgIH0pO1xuICAgICAgaWYgKGhhc01hdGNoZXMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxuICAgICAgICB2YWx1ZTogbmVzdGVkVmFsdWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XG4gICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoY2FjaGUgJiYgaXNOZXN0ZWRGcm96ZW4odmFsdWUpKSBjYWNoZS5hZGQodmFsdWUpO1xuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc05lc3RlZEZyb3plbih2YWx1ZSkge1xuICBpZiAoIU9iamVjdC5pc0Zyb3plbih2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgZm9yIChjb25zdCBuZXN0ZWRWYWx1ZSBvZiBPYmplY3QudmFsdWVzKHZhbHVlKSkge1xuICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgIT09IFwib2JqZWN0XCIgfHwgbmVzdGVkVmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgIGlmICghaXNOZXN0ZWRGcm96ZW4obmVzdGVkVmFsdWUpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucyA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICByZXR1cm4gKCkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IG5leHQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7XG4gICAgICBpc1NlcmlhbGl6YWJsZSA9IGlzUGxhaW4sXG4gICAgICBnZXRFbnRyaWVzLFxuICAgICAgaWdub3JlZEFjdGlvbnMgPSBbXSxcbiAgICAgIGlnbm9yZWRBY3Rpb25QYXRocyA9IFtcIm1ldGEuYXJnXCIsIFwibWV0YS5iYXNlUXVlcnlNZXRhXCJdLFxuICAgICAgaWdub3JlZFBhdGhzID0gW10sXG4gICAgICB3YXJuQWZ0ZXIgPSAzMixcbiAgICAgIGlnbm9yZVN0YXRlID0gZmFsc2UsXG4gICAgICBpZ25vcmVBY3Rpb25zID0gZmFsc2UsXG4gICAgICBkaXNhYmxlQ2FjaGUgPSBmYWxzZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNhY2hlID0gIWRpc2FibGVDYWNoZSAmJiBXZWFrU2V0ID8gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIChzdG9yZUFQSSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcbiAgICAgIGlmICghaXNBY3Rpb24yKGFjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcbiAgICAgIGNvbnN0IG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIlNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcbiAgICAgIGlmICghaWdub3JlQWN0aW9ucyAmJiAhKGlnbm9yZWRBY3Rpb25zLmxlbmd0aCAmJiBpZ25vcmVkQWN0aW9ucy5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTEpKSB7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShhY3Rpb24sIFwiXCIsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkQWN0aW9uUGF0aHMsIGNhY2hlKTtcbiAgICAgICAgICBpZiAoZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBrZXlQYXRoLFxuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIGFuIGFjdGlvbiwgaW4gdGhlIHBhdGg6IFxcYCR7a2V5UGF0aH1cXGAuIFZhbHVlOmAsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSBsb2dpYyB0aGF0IGRpc3BhdGNoZWQgdGhpcyBhY3Rpb246IFwiLCBhY3Rpb24sIFwiXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvYWN0aW9ucyN3aHktc2hvdWxkLXR5cGUtYmUtYS1zdHJpbmctb3ItYXQtbGVhc3Qtc2VyaWFsaXphYmxlLXdoeS1zaG91bGQtbXktYWN0aW9uLXR5cGVzLWJlLWNvbnN0YW50cylcIiwgXCJcXG4oVG8gYWxsb3cgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZXMgc2VlOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3VzYWdlL3VzYWdlLWd1aWRlI3dvcmtpbmctd2l0aC1ub24tc2VyaWFsaXphYmxlLWRhdGEpXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlnbm9yZVN0YXRlKSB7XG4gICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIGNvbnN0IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShzdGF0ZSwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocywgY2FjaGUpO1xuICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAga2V5UGF0aCxcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH0gPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIHRoZSBzdGF0ZSwgaW4gdGhlIHBhdGg6IFxcYCR7a2V5UGF0aH1cXGAuIFZhbHVlOmAsIHZhbHVlLCBgXG5UYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGlzIGFjdGlvbiB0eXBlOiAke2FjdGlvbi50eXBlfS5cbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9XG59XG5cbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImJvb2xlYW5cIjtcbn1cbnZhciBidWlsZEdldERlZmF1bHRNaWRkbGV3YXJlID0gKCkgPT4gZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgdGh1bmsgPSB0cnVlLFxuICAgIGltbXV0YWJsZUNoZWNrID0gdHJ1ZSxcbiAgICBzZXJpYWxpemFibGVDaGVjayA9IHRydWUsXG4gICAgYWN0aW9uQ3JlYXRvckNoZWNrID0gdHJ1ZVxuICB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgbGV0IG1pZGRsZXdhcmVBcnJheSA9IG5ldyBUdXBsZSgpO1xuICBpZiAodGh1bmspIHtcbiAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2god2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudCkpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XG4gICAgICBsZXQgaW1tdXRhYmxlT3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XG4gICAgICAgIGltbXV0YWJsZU9wdGlvbnMgPSBpbW11dGFibGVDaGVjaztcbiAgICAgIH1cbiAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XG4gICAgfVxuICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xuICAgICAgbGV0IHNlcmlhbGl6YWJsZU9wdGlvbnMgPSB7fTtcbiAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xuICAgICAgICBzZXJpYWxpemFibGVPcHRpb25zID0gc2VyaWFsaXphYmxlQ2hlY2s7XG4gICAgICB9XG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uQ3JlYXRvckNoZWNrKSB7XG4gICAgICBsZXQgYWN0aW9uQ3JlYXRvck9wdGlvbnMgPSB7fTtcbiAgICAgIGlmICghaXNCb29sZWFuKGFjdGlvbkNyZWF0b3JDaGVjaykpIHtcbiAgICAgICAgYWN0aW9uQ3JlYXRvck9wdGlvbnMgPSBhY3Rpb25DcmVhdG9yQ2hlY2s7XG4gICAgICB9XG4gICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZShhY3Rpb25DcmVhdG9yT3B0aW9ucykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWlkZGxld2FyZUFycmF5O1xufTtcblxuLy8gc3JjL2F1dG9CYXRjaEVuaGFuY2VyLnRzXG52YXIgU0hPVUxEX0FVVE9CQVRDSCA9IFwiUlRLX2F1dG9CYXRjaFwiO1xudmFyIHByZXBhcmVBdXRvQmF0Y2hlZCA9ICgpID0+IChwYXlsb2FkKSA9PiAoe1xuICBwYXlsb2FkLFxuICBtZXRhOiB7XG4gICAgW1NIT1VMRF9BVVRPQkFUQ0hdOiB0cnVlXG4gIH1cbn0pO1xudmFyIGNyZWF0ZVF1ZXVlV2l0aFRpbWVyID0gKHRpbWVvdXQpID0+IHtcbiAgcmV0dXJuIChub3RpZnkpID0+IHtcbiAgICBzZXRUaW1lb3V0KG5vdGlmeSwgdGltZW91dCk7XG4gIH07XG59O1xudmFyIHJBRiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgOiBjcmVhdGVRdWV1ZVdpdGhUaW1lcigxMCk7XG52YXIgYXV0b0JhdGNoRW5oYW5jZXIgPSAob3B0aW9ucyA9IHtcbiAgdHlwZTogXCJyYWZcIlxufSkgPT4gKG5leHQpID0+ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gbmV4dCguLi5hcmdzKTtcbiAgbGV0IG5vdGlmeWluZyA9IHRydWU7XG4gIGxldCBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xuICBsZXQgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2U7XG4gIGNvbnN0IGxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHF1ZXVlQ2FsbGJhY2sgPSBvcHRpb25zLnR5cGUgPT09IFwidGlja1wiID8gcXVldWVNaWNyb3Rhc2sgOiBvcHRpb25zLnR5cGUgPT09IFwicmFmXCIgPyByQUYgOiBvcHRpb25zLnR5cGUgPT09IFwiY2FsbGJhY2tcIiA/IG9wdGlvbnMucXVldWVOb3RpZmljYXRpb24gOiBjcmVhdGVRdWV1ZVdpdGhUaW1lcihvcHRpb25zLnRpbWVvdXQpO1xuICBjb25zdCBub3RpZnlMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2U7XG4gICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XG4gICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGwpID0+IGwoKSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RvcmUsIHtcbiAgICAvLyBPdmVycmlkZSB0aGUgYmFzZSBgc3RvcmUuc3Vic2NyaWJlYCBtZXRob2QgdG8ga2VlcCBvcmlnaW5hbCBsaXN0ZW5lcnNcbiAgICAvLyBmcm9tIHJ1bm5pbmcgaWYgd2UncmUgZGVsYXlpbmcgbm90aWZpY2F0aW9uc1xuICAgIHN1YnNjcmliZShsaXN0ZW5lcjIpIHtcbiAgICAgIGNvbnN0IHdyYXBwZWRMaXN0ZW5lciA9ICgpID0+IG5vdGlmeWluZyAmJiBsaXN0ZW5lcjIoKTtcbiAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKHdyYXBwZWRMaXN0ZW5lcik7XG4gICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyMik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyMik7XG4gICAgICB9O1xuICAgIH0sXG4gICAgLy8gT3ZlcnJpZGUgdGhlIGJhc2UgYHN0b3JlLmRpc3BhdGNoYCBtZXRob2Qgc28gdGhhdCB3ZSBjYW4gY2hlY2sgYWN0aW9uc1xuICAgIC8vIGZvciB0aGUgYHNob3VsZEF1dG9CYXRjaGAgZmxhZyBhbmQgZGV0ZXJtaW5lIGlmIGJhdGNoaW5nIGlzIGFjdGl2ZVxuICAgIGRpc3BhdGNoKGFjdGlvbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbm90aWZ5aW5nID0gIWFjdGlvbj8ubWV0YT8uW1NIT1VMRF9BVVRPQkFUQ0hdO1xuICAgICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9ICFub3RpZnlpbmc7XG4gICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xuICAgICAgICAgIGlmICghbm90aWZpY2F0aW9uUXVldWVkKSB7XG4gICAgICAgICAgICBub3RpZmljYXRpb25RdWV1ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcXVldWVDYWxsYmFjayhub3RpZnlMaXN0ZW5lcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIG5vdGlmeWluZyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIHNyYy9nZXREZWZhdWx0RW5oYW5jZXJzLnRzXG52YXIgYnVpbGRHZXREZWZhdWx0RW5oYW5jZXJzID0gKG1pZGRsZXdhcmVFbmhhbmNlcikgPT4gZnVuY3Rpb24gZ2V0RGVmYXVsdEVuaGFuY2VycyhvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBhdXRvQmF0Y2ggPSB0cnVlXG4gIH0gPSBvcHRpb25zID8/IHt9O1xuICBsZXQgZW5oYW5jZXJBcnJheSA9IG5ldyBUdXBsZShtaWRkbGV3YXJlRW5oYW5jZXIpO1xuICBpZiAoYXV0b0JhdGNoKSB7XG4gICAgZW5oYW5jZXJBcnJheS5wdXNoKGF1dG9CYXRjaEVuaGFuY2VyKHR5cGVvZiBhdXRvQmF0Y2ggPT09IFwib2JqZWN0XCIgPyBhdXRvQmF0Y2ggOiB2b2lkIDApKTtcbiAgfVxuICByZXR1cm4gZW5oYW5jZXJBcnJheTtcbn07XG5cbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xuZnVuY3Rpb24gY29uZmlndXJlU3RvcmUob3B0aW9ucykge1xuICBjb25zdCBnZXREZWZhdWx0TWlkZGxld2FyZSA9IGJ1aWxkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKTtcbiAgY29uc3Qge1xuICAgIHJlZHVjZXIgPSB2b2lkIDAsXG4gICAgbWlkZGxld2FyZSxcbiAgICBkZXZUb29scyA9IHRydWUsXG4gICAgcHJlbG9hZGVkU3RhdGUgPSB2b2lkIDAsXG4gICAgZW5oYW5jZXJzID0gdm9pZCAwXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgcm9vdFJlZHVjZXI7XG4gIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QyKHJlZHVjZXIpKSB7XG4gICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcImByZWR1Y2VyYCBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2Vyc1wiKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIG1pZGRsZXdhcmUgJiYgdHlwZW9mIG1pZGRsZXdhcmUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJgbWlkZGxld2FyZWAgZmllbGQgbXVzdCBiZSBhIGNhbGxiYWNrXCIpO1xuICB9XG4gIGxldCBmaW5hbE1pZGRsZXdhcmU7XG4gIGlmICh0eXBlb2YgbWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZShnZXREZWZhdWx0TWlkZGxld2FyZSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhQXJyYXkuaXNBcnJheShmaW5hbE1pZGRsZXdhcmUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6IFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmaW5hbE1pZGRsZXdhcmUgPSBnZXREZWZhdWx0TWlkZGxld2FyZSgpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZmluYWxNaWRkbGV3YXJlLnNvbWUoKGl0ZW0pID0+IHR5cGVvZiBpdGVtICE9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcImVhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgbGV0IGZpbmFsQ29tcG9zZSA9IGNvbXBvc2UyO1xuICBpZiAoZGV2VG9vbHMpIHtcbiAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKHtcbiAgICAgIC8vIEVuYWJsZSBjYXB0dXJlIG9mIHN0YWNrIHRyYWNlcyBmb3IgZGlzcGF0Y2hlZCBSZWR1eCBhY3Rpb25zXG4gICAgICB0cmFjZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiLFxuICAgICAgLi4udHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlKC4uLmZpbmFsTWlkZGxld2FyZSk7XG4gIGNvbnN0IGdldERlZmF1bHRFbmhhbmNlcnMgPSBidWlsZEdldERlZmF1bHRFbmhhbmNlcnMobWlkZGxld2FyZUVuaGFuY2VyKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBlbmhhbmNlcnMgJiYgdHlwZW9mIGVuaGFuY2VycyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiBcImBlbmhhbmNlcnNgIGZpZWxkIG11c3QgYmUgYSBjYWxsYmFja1wiKTtcbiAgfVxuICBsZXQgc3RvcmVFbmhhbmNlcnMgPSB0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIgPyBlbmhhbmNlcnMoZ2V0RGVmYXVsdEVuaGFuY2VycykgOiBnZXREZWZhdWx0RW5oYW5jZXJzKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIUFycmF5LmlzQXJyYXkoc3RvcmVFbmhhbmNlcnMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiBcImBlbmhhbmNlcnNgIGNhbGxiYWNrIG11c3QgcmV0dXJuIGFuIGFycmF5XCIpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgc3RvcmVFbmhhbmNlcnMuc29tZSgoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiZWFjaCBlbmhhbmNlciBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBmaW5hbE1pZGRsZXdhcmUubGVuZ3RoICYmICFzdG9yZUVuaGFuY2Vycy5pbmNsdWRlcyhtaWRkbGV3YXJlRW5oYW5jZXIpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIm1pZGRsZXdhcmVzIHdlcmUgcHJvdmlkZWQsIGJ1dCBtaWRkbGV3YXJlIGVuaGFuY2VyIHdhcyBub3QgaW5jbHVkZWQgaW4gZmluYWwgZW5oYW5jZXJzIC0gbWFrZSBzdXJlIHRvIGNhbGwgYGdldERlZmF1bHRFbmhhbmNlcnNgXCIpO1xuICB9XG4gIGNvbnN0IGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UoLi4uc3RvcmVFbmhhbmNlcnMpO1xuICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcbn1cblxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcbmltcG9ydCB7IHByb2R1Y2UgYXMgY3JlYXRlTmV4dFN0YXRlMiwgaXNEcmFmdCBhcyBpc0RyYWZ0MiwgaXNEcmFmdGFibGUgYXMgaXNEcmFmdGFibGUyIH0gZnJvbSBcImltbWVyXCI7XG5cbi8vIHNyYy9tYXBCdWlsZGVycy50c1xuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XG4gIGNvbnN0IGFjdGlvbnNNYXAgPSB7fTtcbiAgY29uc3QgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRDYXNlUmVkdWNlcjtcbiAgY29uc3QgYnVpbGRlciA9IHtcbiAgICBhZGRDYXNlKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGFjdGlvbk1hdGNoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyNikgOiBcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjcpIDogXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI4KSA6IFwiYGJ1aWxkZXIuYWRkQ2FzZWAgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGVtcHR5IGFjdGlvbiB0eXBlXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgaW4gYWN0aW9uc01hcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOSkgOiBgXFxgYnVpbGRlci5hZGRDYXNlXFxgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlICcke3R5cGV9J2ApO1xuICAgICAgfVxuICAgICAgYWN0aW9uc01hcFt0eXBlXSA9IHJlZHVjZXI7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZE1hdGNoZXIobWF0Y2hlciwgcmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzApIDogXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHtcbiAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgcmVkdWNlclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZERlZmF1bHRDYXNlKHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxKSA6IFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxuICB9O1xuICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XG4gIHJldHVybiBbYWN0aW9uc01hcCwgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl07XG59XG5cbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXG5mdW5jdGlvbiBpc1N0YXRlRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOCkgOiBcIlRoZSBvYmplY3Qgbm90YXRpb24gZm9yIGBjcmVhdGVSZWR1Y2VyYCBoYXMgYmVlbiByZW1vdmVkLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlUmVkdWNlclwiKTtcbiAgICB9XG4gIH1cbiAgbGV0IFthY3Rpb25zTWFwLCBmaW5hbEFjdGlvbk1hdGNoZXJzLCBmaW5hbERlZmF1bHRDYXNlUmVkdWNlcl0gPSBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhtYXBPckJ1aWxkZXJDYWxsYmFjayk7XG4gIGxldCBnZXRJbml0aWFsU3RhdGU7XG4gIGlmIChpc1N0YXRlRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSkge1xuICAgIGdldEluaXRpYWxTdGF0ZSA9ICgpID0+IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUoKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZnJvemVuSW5pdGlhbFN0YXRlID0gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSk7XG4gICAgZ2V0SW5pdGlhbFN0YXRlID0gKCkgPT4gZnJvemVuSW5pdGlhbFN0YXRlO1xuICB9XG4gIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKSwgYWN0aW9uKSB7XG4gICAgbGV0IGNhc2VSZWR1Y2VycyA9IFthY3Rpb25zTWFwW2FjdGlvbi50eXBlXSwgLi4uZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoKHtcbiAgICAgIG1hdGNoZXJcbiAgICB9KSA9PiBtYXRjaGVyKGFjdGlvbikpLm1hcCgoe1xuICAgICAgcmVkdWNlcjogcmVkdWNlcjJcbiAgICB9KSA9PiByZWR1Y2VyMildO1xuICAgIGlmIChjYXNlUmVkdWNlcnMuZmlsdGVyKChjcikgPT4gISFjcikubGVuZ3RoID09PSAwKSB7XG4gICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xuICAgIH1cbiAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZSgocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpID0+IHtcbiAgICAgIGlmIChjYXNlUmVkdWNlcikge1xuICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcbiAgICAgICAgICBjb25zdCBkcmFmdCA9IHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmICghaXNEcmFmdGFibGUyKHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FzZVJlZHVjZXIocHJldmlvdXNTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiBcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUyKHByZXZpb3VzU3RhdGUsIChkcmFmdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICB9LCBzdGF0ZSk7XG4gIH1cbiAgcmVkdWNlci5nZXRJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGU7XG4gIHJldHVybiByZWR1Y2VyO1xufVxuXG4vLyBzcmMvbWF0Y2hlcnMudHNcbnZhciBtYXRjaGVzID0gKG1hdGNoZXIsIGFjdGlvbikgPT4ge1xuICBpZiAoaGFzTWF0Y2hGdW5jdGlvbihtYXRjaGVyKSkge1xuICAgIHJldHVybiBtYXRjaGVyLm1hdGNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzQW55T2YoLi4ubWF0Y2hlcnMpIHtcbiAgcmV0dXJuIChhY3Rpb24pID0+IHtcbiAgICByZXR1cm4gbWF0Y2hlcnMuc29tZSgobWF0Y2hlcikgPT4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzQWxsT2YoLi4ubWF0Y2hlcnMpIHtcbiAgcmV0dXJuIChhY3Rpb24pID0+IHtcbiAgICByZXR1cm4gbWF0Y2hlcnMuZXZlcnkoKG1hdGNoZXIpID0+IG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKSk7XG4gIH07XG59XG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XG4gIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBoYXNWYWxpZFJlcXVlc3RJZCA9IHR5cGVvZiBhY3Rpb24ubWV0YS5yZXF1ZXN0SWQgPT09IFwic3RyaW5nXCI7XG4gIGNvbnN0IGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcbiAgcmV0dXJuIGhhc1ZhbGlkUmVxdWVzdElkICYmIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cztcbn1cbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcbiAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSBcImZ1bmN0aW9uXCIgJiYgXCJwZW5kaW5nXCIgaW4gYVswXSAmJiBcImZ1bGZpbGxlZFwiIGluIGFbMF0gJiYgXCJyZWplY3RlZFwiIGluIGFbMF07XG59XG5mdW5jdGlvbiBpc1BlbmRpbmcoLi4uYXN5bmNUaHVua3MpIHtcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoYWN0aW9uKSA9PiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pO1xuICB9XG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUGVuZGluZygpKGFzeW5jVGh1bmtzWzBdKTtcbiAgfVxuICByZXR1cm4gaXNBbnlPZiguLi5hc3luY1RodW5rcy5tYXAoKGFzeW5jVGh1bmspID0+IGFzeW5jVGh1bmsucGVuZGluZykpO1xufVxuZnVuY3Rpb24gaXNSZWplY3RlZCguLi5hc3luY1RodW5rcykge1xuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIChhY3Rpb24pID0+IGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pO1xuICB9XG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzUmVqZWN0ZWQoKShhc3luY1RodW5rc1swXSk7XG4gIH1cbiAgcmV0dXJuIGlzQW55T2YoLi4uYXN5bmNUaHVua3MubWFwKChhc3luY1RodW5rKSA9PiBhc3luY1RodW5rLnJlamVjdGVkKSk7XG59XG5mdW5jdGlvbiBpc1JlamVjdGVkV2l0aFZhbHVlKC4uLmFzeW5jVGh1bmtzKSB7XG4gIGNvbnN0IGhhc0ZsYWcgPSAoYWN0aW9uKSA9PiB7XG4gICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcbiAgfTtcbiAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBpc0FsbE9mKGlzUmVqZWN0ZWQoLi4uYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcbiAgfVxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc1JlamVjdGVkV2l0aFZhbHVlKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG4gIHJldHVybiBpc0FsbE9mKGlzUmVqZWN0ZWQoLi4uYXN5bmNUaHVua3MpLCBoYXNGbGFnKTtcbn1cbmZ1bmN0aW9uIGlzRnVsZmlsbGVkKC4uLmFzeW5jVGh1bmtzKSB7XG4gIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKGFjdGlvbikgPT4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pO1xuICB9XG4gIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XG4gICAgcmV0dXJuIGlzRnVsZmlsbGVkKCkoYXN5bmNUaHVua3NbMF0pO1xuICB9XG4gIHJldHVybiBpc0FueU9mKC4uLmFzeW5jVGh1bmtzLm1hcCgoYXN5bmNUaHVuaykgPT4gYXN5bmNUaHVuay5mdWxmaWxsZWQpKTtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FjdGlvbiguLi5hc3luY1RodW5rcykge1xuICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIChhY3Rpb24pID0+IGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTtcbiAgfVxuICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xuICAgIHJldHVybiBpc0FzeW5jVGh1bmtBY3Rpb24oKShhc3luY1RodW5rc1swXSk7XG4gIH1cbiAgcmV0dXJuIGlzQW55T2YoLi4uYXN5bmNUaHVua3MuZmxhdE1hcCgoYXN5bmNUaHVuaykgPT4gW2FzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWRdKSk7XG59XG5cbi8vIHNyYy9uYW5vaWQudHNcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xudmFyIG5hbm9pZCA9IChzaXplID0gMjEpID0+IHtcbiAgbGV0IGlkID0gXCJcIjtcbiAgbGV0IGkgPSBzaXplO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XG4gIH1cbiAgcmV0dXJuIGlkO1xufTtcblxuLy8gc3JjL2NyZWF0ZUFzeW5jVGh1bmsudHNcbnZhciBjb21tb25Qcm9wZXJ0aWVzID0gW1wibmFtZVwiLCBcIm1lc3NhZ2VcIiwgXCJzdGFja1wiLCBcImNvZGVcIl07XG52YXIgUmVqZWN0V2l0aFZhbHVlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXlsb2FkLCBtZXRhKSB7XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB0aGlzLm1ldGEgPSBtZXRhO1xuICB9XG4gIC8qXG4gIHR5cGUtb25seSBwcm9wZXJ0eSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIFJlamVjdFdpdGhWYWx1ZSBhbmQgRnVsZmlsbFdpdGhNZXRhXG4gIGRvZXMgbm90IGV4aXN0IGF0IHJ1bnRpbWVcbiAgKi9cbiAgX3R5cGU7XG59O1xudmFyIEZ1bGZpbGxXaXRoTWV0YSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocGF5bG9hZCwgbWV0YSkge1xuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdGhpcy5tZXRhID0gbWV0YTtcbiAgfVxuICAvKlxuICB0eXBlLW9ubHkgcHJvcGVydHkgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBSZWplY3RXaXRoVmFsdWUgYW5kIEZ1bGZpbGxXaXRoTWV0YVxuICBkb2VzIG5vdCBleGlzdCBhdCBydW50aW1lXG4gICovXG4gIF90eXBlO1xufTtcbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSAodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNpbXBsZUVycm9yID0ge307XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBjb21tb25Qcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzaW1wbGVFcnJvcltwcm9wZXJ0eV0gPSB2YWx1ZVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaW1wbGVFcnJvcjtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IFN0cmluZyh2YWx1ZSlcbiAgfTtcbn07XG52YXIgY3JlYXRlQXN5bmNUaHVuayA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICBmdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rMih0eXBlUHJlZml4LCBwYXlsb2FkQ3JlYXRvciwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgPT4gKHtcbiAgICAgIHBheWxvYWQsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIC4uLm1ldGEgfHwge30sXG4gICAgICAgIGFyZyxcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXG4gICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3BlbmRpbmdcIiwgKHJlcXVlc3RJZCwgYXJnLCBtZXRhKSA9PiAoe1xuICAgICAgcGF5bG9hZDogdm9pZCAwLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi5tZXRhIHx8IHt9LFxuICAgICAgICBhcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgY29uc3QgcmVqZWN0ZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3JlamVjdGVkXCIsIChlcnJvciwgcmVxdWVzdElkLCBhcmcsIHBheWxvYWQsIG1ldGEpID0+ICh7XG4gICAgICBwYXlsb2FkLFxuICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi5tZXRhIHx8IHt9LFxuICAgICAgICBhcmcsXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgcmVqZWN0ZWRXaXRoVmFsdWU6ICEhcGF5bG9hZCxcbiAgICAgICAgcmVxdWVzdFN0YXR1czogXCJyZWplY3RlZFwiLFxuICAgICAgICBhYm9ydGVkOiBlcnJvcj8ubmFtZSA9PT0gXCJBYm9ydEVycm9yXCIsXG4gICAgICAgIGNvbmRpdGlvbjogZXJyb3I/Lm5hbWUgPT09IFwiQ29uZGl0aW9uRXJyb3JcIlxuICAgICAgfVxuICAgIH0pKTtcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKGFyZykge1xuICAgICAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IG9wdGlvbnM/LmlkR2VuZXJhdG9yID8gb3B0aW9ucy5pZEdlbmVyYXRvcihhcmcpIDogbmFub2lkKCk7XG4gICAgICAgIGNvbnN0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgbGV0IGFib3J0SGFuZGxlcjtcbiAgICAgICAgbGV0IGFib3J0UmVhc29uO1xuICAgICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcbiAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNlID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IGZpbmFsQWN0aW9uO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uUmVzdWx0ID0gb3B0aW9ucz8uY29uZGl0aW9uPy4oYXJnLCB7XG4gICAgICAgICAgICAgIGdldFN0YXRlLFxuICAgICAgICAgICAgICBleHRyYVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZShjb25kaXRpb25SZXN1bHQpKSB7XG4gICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IGF3YWl0IGNvbmRpdGlvblJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25kaXRpb25SZXN1bHQgPT09IGZhbHNlIHx8IGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDb25kaXRpb25FcnJvclwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQWJvcnRlZCBkdWUgdG8gY29uZGl0aW9uIGNhbGxiYWNrIHJldHVybmluZyBmYWxzZS5cIlxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWJvcnRlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgIGFib3J0SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJBYm9ydEVycm9yXCIsXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCBcIkFib3J0ZWRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydEhhbmRsZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkaXNwYXRjaChwZW5kaW5nKHJlcXVlc3RJZCwgYXJnLCBvcHRpb25zPy5nZXRQZW5kaW5nTWV0YT8uKHtcbiAgICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgICBhcmdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZ2V0U3RhdGUsXG4gICAgICAgICAgICAgIGV4dHJhXG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBhd2FpdCBQcm9taXNlLnJhY2UoW2Fib3J0ZWRQcm9taXNlLCBQcm9taXNlLnJlc29sdmUocGF5bG9hZENyZWF0b3IoYXJnLCB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoLFxuICAgICAgICAgICAgICBnZXRTdGF0ZSxcbiAgICAgICAgICAgICAgZXh0cmEsXG4gICAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgICAgICBhYm9ydCxcbiAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiAodmFsdWUsIG1ldGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSwgbWV0YSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bGZpbGxXaXRoVmFsdWU6ICh2YWx1ZSwgbWV0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdC5wYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgcmVzdWx0Lm1ldGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LCByZXF1ZXN0SWQsIGFyZyk7XG4gICAgICAgICAgICB9KV0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBlcnIgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUgPyByZWplY3RlZChudWxsLCByZXF1ZXN0SWQsIGFyZywgZXJyLnBheWxvYWQsIGVyci5tZXRhKSA6IHJlamVjdGVkKGVyciwgcmVxdWVzdElkLCBhcmcpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoYWJvcnRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHNraXBEaXNwYXRjaCA9IG9wdGlvbnMgJiYgIW9wdGlvbnMuZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24gJiYgcmVqZWN0ZWQubWF0Y2goZmluYWxBY3Rpb24pICYmIGZpbmFsQWN0aW9uLm1ldGEuY29uZGl0aW9uO1xuICAgICAgICAgIGlmICghc2tpcERpc3BhdGNoKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmaW5hbEFjdGlvbjtcbiAgICAgICAgfSgpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm9taXNlLCB7XG4gICAgICAgICAgYWJvcnQsXG4gICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgIGFyZyxcbiAgICAgICAgICB1bndyYXAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHVud3JhcFJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjdGlvbkNyZWF0b3IsIHtcbiAgICAgIHBlbmRpbmcsXG4gICAgICByZWplY3RlZCxcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHNldHRsZWQ6IGlzQW55T2YocmVqZWN0ZWQsIGZ1bGZpbGxlZCksXG4gICAgICB0eXBlUHJlZml4XG4gICAgfSk7XG4gIH1cbiAgY3JlYXRlQXN5bmNUaHVuazIud2l0aFR5cGVzID0gKCkgPT4gY3JlYXRlQXN5bmNUaHVuazI7XG4gIHJldHVybiBjcmVhdGVBc3luY1RodW5rMjtcbn0pKCk7XG5mdW5jdGlvbiB1bndyYXBSZXN1bHQoYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZSkge1xuICAgIHRocm93IGFjdGlvbi5wYXlsb2FkO1xuICB9XG4gIGlmIChhY3Rpb24uZXJyb3IpIHtcbiAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XG4gIH1cbiAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xufVxuZnVuY3Rpb24gaXNUaGVuYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbi8vIHNyYy9jcmVhdGVTbGljZS50c1xudmFyIGFzeW5jVGh1bmtTeW1ib2wgPSAvKiBAX19QVVJFX18gKi8gU3ltYm9sLmZvcihcInJ0ay1zbGljZS1jcmVhdGVhc3luY3RodW5rXCIpO1xudmFyIGFzeW5jVGh1bmtDcmVhdG9yID0ge1xuICBbYXN5bmNUaHVua1N5bWJvbF06IGNyZWF0ZUFzeW5jVGh1bmtcbn07XG52YXIgUmVkdWNlclR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChSZWR1Y2VyVHlwZTIpID0+IHtcbiAgUmVkdWNlclR5cGUyW1wicmVkdWNlclwiXSA9IFwicmVkdWNlclwiO1xuICBSZWR1Y2VyVHlwZTJbXCJyZWR1Y2VyV2l0aFByZXBhcmVcIl0gPSBcInJlZHVjZXJXaXRoUHJlcGFyZVwiO1xuICBSZWR1Y2VyVHlwZTJbXCJhc3luY1RodW5rXCJdID0gXCJhc3luY1RodW5rXCI7XG4gIHJldHVybiBSZWR1Y2VyVHlwZTI7XG59KShSZWR1Y2VyVHlwZSB8fCB7fSk7XG5mdW5jdGlvbiBnZXRUeXBlKHNsaWNlLCBhY3Rpb25LZXkpIHtcbiAgcmV0dXJuIGAke3NsaWNlfS8ke2FjdGlvbktleX1gO1xufVxuZnVuY3Rpb24gYnVpbGRDcmVhdGVTbGljZSh7XG4gIGNyZWF0b3JzXG59ID0ge30pIHtcbiAgY29uc3QgY0FUID0gY3JlYXRvcnM/LmFzeW5jVGh1bms/Llthc3luY1RodW5rU3ltYm9sXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVNsaWNlMihvcHRpb25zKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSxcbiAgICAgIHJlZHVjZXJQYXRoID0gbmFtZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJgbmFtZWAgaXMgYSByZXF1aXJlZCBvcHRpb24gZm9yIGNyZWF0ZVNsaWNlXCIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgaWYgKG9wdGlvbnMuaW5pdGlhbFN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBtdXN0IHByb3ZpZGUgYW4gYGluaXRpYWxTdGF0ZWAgdmFsdWUgdGhhdCBpcyBub3QgYHVuZGVmaW5lZGAuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGBpbml0aWFsU3RhdGVgXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZWR1Y2VycyA9ICh0eXBlb2Ygb3B0aW9ucy5yZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5yZWR1Y2VycyhidWlsZFJlZHVjZXJDcmVhdG9ycygpKSA6IG9wdGlvbnMucmVkdWNlcnMpIHx8IHt9O1xuICAgIGNvbnN0IHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWU6IHt9LFxuICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGU6IHt9LFxuICAgICAgYWN0aW9uQ3JlYXRvcnM6IHt9LFxuICAgICAgc2xpY2VNYXRjaGVyczogW11cbiAgICB9O1xuICAgIGNvbnN0IGNvbnRleHRNZXRob2RzID0ge1xuICAgICAgYWRkQ2FzZSh0eXBlT3JBY3Rpb25DcmVhdG9yLCByZWR1Y2VyMikge1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMikgOiBcImBjb250ZXh0LmFkZENhc2VgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBhbiBlbXB0eSBhY3Rpb24gdHlwZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSBpbiBjb250ZXh0LnNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMpIDogXCJgY29udGV4dC5hZGRDYXNlYCBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlW3R5cGVdID0gcmVkdWNlcjI7XG4gICAgICAgIHJldHVybiBjb250ZXh0TWV0aG9kcztcbiAgICAgIH0sXG4gICAgICBhZGRNYXRjaGVyKG1hdGNoZXIsIHJlZHVjZXIyKSB7XG4gICAgICAgIGNvbnRleHQuc2xpY2VNYXRjaGVycy5wdXNoKHtcbiAgICAgICAgICBtYXRjaGVyLFxuICAgICAgICAgIHJlZHVjZXI6IHJlZHVjZXIyXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29udGV4dE1ldGhvZHM7XG4gICAgICB9LFxuICAgICAgZXhwb3NlQWN0aW9uKG5hbWUyLCBhY3Rpb25DcmVhdG9yKSB7XG4gICAgICAgIGNvbnRleHQuYWN0aW9uQ3JlYXRvcnNbbmFtZTJdID0gYWN0aW9uQ3JlYXRvcjtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRNZXRob2RzO1xuICAgICAgfSxcbiAgICAgIGV4cG9zZUNhc2VSZWR1Y2VyKG5hbWUyLCByZWR1Y2VyMikge1xuICAgICAgICBjb250ZXh0LnNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW25hbWUyXSA9IHJlZHVjZXIyO1xuICAgICAgICByZXR1cm4gY29udGV4dE1ldGhvZHM7XG4gICAgICB9XG4gICAgfTtcbiAgICByZWR1Y2VyTmFtZXMuZm9yRWFjaCgocmVkdWNlck5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHJlZHVjZXJEZWZpbml0aW9uID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xuICAgICAgY29uc3QgcmVkdWNlckRldGFpbHMgPSB7XG4gICAgICAgIHJlZHVjZXJOYW1lLFxuICAgICAgICB0eXBlOiBnZXRUeXBlKG5hbWUsIHJlZHVjZXJOYW1lKSxcbiAgICAgICAgY3JlYXRlTm90YXRpb246IHR5cGVvZiBvcHRpb25zLnJlZHVjZXJzID09PSBcImZ1bmN0aW9uXCJcbiAgICAgIH07XG4gICAgICBpZiAoaXNBc3luY1RodW5rU2xpY2VSZWR1Y2VyRGVmaW5pdGlvbihyZWR1Y2VyRGVmaW5pdGlvbikpIHtcbiAgICAgICAgaGFuZGxlVGh1bmtDYXNlUmVkdWNlckRlZmluaXRpb24ocmVkdWNlckRldGFpbHMsIHJlZHVjZXJEZWZpbml0aW9uLCBjb250ZXh0TWV0aG9kcywgY0FUKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZU5vcm1hbFJlZHVjZXJEZWZpbml0aW9uKHJlZHVjZXJEZXRhaWxzLCByZWR1Y2VyRGVmaW5pdGlvbiwgY29udGV4dE1ldGhvZHMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGJ1aWxkUmVkdWNlcigpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNCkgOiBcIlRoZSBvYmplY3Qgbm90YXRpb24gZm9yIGBjcmVhdGVTbGljZS5leHRyYVJlZHVjZXJzYCBoYXMgYmVlbiByZW1vdmVkLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlU2xpY2VcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IFtleHRyYVJlZHVjZXJzID0ge30sIGFjdGlvbk1hdGNoZXJzID0gW10sIGRlZmF1bHRDYXNlUmVkdWNlciA9IHZvaWQgMF0gPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcImZ1bmN0aW9uXCIgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhvcHRpb25zLmV4dHJhUmVkdWNlcnMpIDogW29wdGlvbnMuZXh0cmFSZWR1Y2Vyc107XG4gICAgICBjb25zdCBmaW5hbENhc2VSZWR1Y2VycyA9IHtcbiAgICAgICAgLi4uZXh0cmFSZWR1Y2VycyxcbiAgICAgICAgLi4uY29udGV4dC5zbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBjcmVhdGVSZWR1Y2VyKG9wdGlvbnMuaW5pdGlhbFN0YXRlLCAoYnVpbGRlcikgPT4ge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gZmluYWxDYXNlUmVkdWNlcnMpIHtcbiAgICAgICAgICBidWlsZGVyLmFkZENhc2Uoa2V5LCBmaW5hbENhc2VSZWR1Y2Vyc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBzTSBvZiBjb250ZXh0LnNsaWNlTWF0Y2hlcnMpIHtcbiAgICAgICAgICBidWlsZGVyLmFkZE1hdGNoZXIoc00ubWF0Y2hlciwgc00ucmVkdWNlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbSBvZiBhY3Rpb25NYXRjaGVycykge1xuICAgICAgICAgIGJ1aWxkZXIuYWRkTWF0Y2hlcihtLm1hdGNoZXIsIG0ucmVkdWNlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIGJ1aWxkZXIuYWRkRGVmYXVsdENhc2UoZGVmYXVsdENhc2VSZWR1Y2VyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdFNlbGYgPSAoc3RhdGUpID0+IHN0YXRlO1xuICAgIGNvbnN0IGluamVjdGVkU2VsZWN0b3JDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgbGV0IF9yZWR1Y2VyO1xuICAgIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICAgICAgaWYgKCFfcmVkdWNlcikgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcbiAgICAgIHJldHVybiBfcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgICAgaWYgKCFfcmVkdWNlcikgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcbiAgICAgIHJldHVybiBfcmVkdWNlci5nZXRJbml0aWFsU3RhdGUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWFrZVNlbGVjdG9yUHJvcHMocmVkdWNlclBhdGgyLCBpbmplY3RlZCA9IGZhbHNlKSB7XG4gICAgICBmdW5jdGlvbiBzZWxlY3RTbGljZShzdGF0ZSkge1xuICAgICAgICBsZXQgc2xpY2VTdGF0ZSA9IHN0YXRlW3JlZHVjZXJQYXRoMl07XG4gICAgICAgIGlmICh0eXBlb2Ygc2xpY2VTdGF0ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGlmIChpbmplY3RlZCkge1xuICAgICAgICAgICAgc2xpY2VTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiBcInNlbGVjdFNsaWNlIHJldHVybmVkIHVuZGVmaW5lZCBmb3IgYW4gdW5pbmplY3RlZCBzbGljZSByZWR1Y2VyXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2xpY2VTdGF0ZTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSA9IHNlbGVjdFNlbGYpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3JDYWNoZSA9IGVtcGxhY2UoaW5qZWN0ZWRTZWxlY3RvckNhY2hlLCBpbmplY3RlZCwge1xuICAgICAgICAgIGluc2VydDogKCkgPT4gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKClcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlbXBsYWNlKHNlbGVjdG9yQ2FjaGUsIHNlbGVjdFN0YXRlLCB7XG4gICAgICAgICAgaW5zZXJ0OiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUyLCBzZWxlY3Rvcl0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5zZWxlY3RvcnMgPz8ge30pKSB7XG4gICAgICAgICAgICAgIG1hcFtuYW1lMl0gPSB3cmFwU2VsZWN0b3Ioc2VsZWN0b3IsIHNlbGVjdFN0YXRlLCBnZXRJbml0aWFsU3RhdGUsIGluamVjdGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZHVjZXJQYXRoOiByZWR1Y2VyUGF0aDIsXG4gICAgICAgIGdldFNlbGVjdG9ycyxcbiAgICAgICAgZ2V0IHNlbGVjdG9ycygpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0U2VsZWN0b3JzKHNlbGVjdFNsaWNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0U2xpY2VcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNsaWNlID0ge1xuICAgICAgbmFtZSxcbiAgICAgIHJlZHVjZXIsXG4gICAgICBhY3Rpb25zOiBjb250ZXh0LmFjdGlvbkNyZWF0b3JzLFxuICAgICAgY2FzZVJlZHVjZXJzOiBjb250ZXh0LnNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lLFxuICAgICAgZ2V0SW5pdGlhbFN0YXRlLFxuICAgICAgLi4ubWFrZVNlbGVjdG9yUHJvcHMocmVkdWNlclBhdGgpLFxuICAgICAgaW5qZWN0SW50byhpbmplY3RhYmxlLCB7XG4gICAgICAgIHJlZHVjZXJQYXRoOiBwYXRoT3B0LFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBuZXdSZWR1Y2VyUGF0aCA9IHBhdGhPcHQgPz8gcmVkdWNlclBhdGg7XG4gICAgICAgIGluamVjdGFibGUuaW5qZWN0KHtcbiAgICAgICAgICByZWR1Y2VyUGF0aDogbmV3UmVkdWNlclBhdGgsXG4gICAgICAgICAgcmVkdWNlclxuICAgICAgICB9LCBjb25maWcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnNsaWNlLFxuICAgICAgICAgIC4uLm1ha2VTZWxlY3RvclByb3BzKG5ld1JlZHVjZXJQYXRoLCB0cnVlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHNsaWNlO1xuICB9O1xufVxuZnVuY3Rpb24gd3JhcFNlbGVjdG9yKHNlbGVjdG9yLCBzZWxlY3RTdGF0ZSwgZ2V0SW5pdGlhbFN0YXRlLCBpbmplY3RlZCkge1xuICBmdW5jdGlvbiB3cmFwcGVyKHJvb3RTdGF0ZSwgLi4uYXJncykge1xuICAgIGxldCBzbGljZVN0YXRlID0gc2VsZWN0U3RhdGUocm9vdFN0YXRlKTtcbiAgICBpZiAodHlwZW9mIHNsaWNlU3RhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChpbmplY3RlZCkge1xuICAgICAgICBzbGljZVN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBcInNlbGVjdFN0YXRlIHJldHVybmVkIHVuZGVmaW5lZCBmb3IgYW4gdW5pbmplY3RlZCBzbGljZSByZWR1Y2VyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0b3Ioc2xpY2VTdGF0ZSwgLi4uYXJncyk7XG4gIH1cbiAgd3JhcHBlci51bndyYXBwZWQgPSBzZWxlY3RvcjtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG52YXIgY3JlYXRlU2xpY2UgPSAvKiBAX19QVVJFX18gKi8gYnVpbGRDcmVhdGVTbGljZSgpO1xuZnVuY3Rpb24gYnVpbGRSZWR1Y2VyQ3JlYXRvcnMoKSB7XG4gIGZ1bmN0aW9uIGFzeW5jVGh1bmsocGF5bG9hZENyZWF0b3IsIGNvbmZpZykge1xuICAgIHJldHVybiB7XG4gICAgICBfcmVkdWNlckRlZmluaXRpb25UeXBlOiBcImFzeW5jVGh1bmtcIiAvKiBhc3luY1RodW5rICovLFxuICAgICAgcGF5bG9hZENyZWF0b3IsXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICB9XG4gIGFzeW5jVGh1bmsud2l0aFR5cGVzID0gKCkgPT4gYXN5bmNUaHVuaztcbiAgcmV0dXJuIHtcbiAgICByZWR1Y2VyKGNhc2VSZWR1Y2VyKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIC8vIGhhY2sgc28gdGhlIHdyYXBwaW5nIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBuYW1lIGFzIHRoZSBvcmlnaW5hbFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGNyZWF0ZSBhIHdyYXBwZXIgc28gdGhlIGByZWR1Y2VyRGVmaW5pdGlvblR5cGVgIGlzIG5vdCBhc3NpZ25lZCB0byB0aGUgb3JpZ2luYWxcbiAgICAgICAgW2Nhc2VSZWR1Y2VyLm5hbWVdKC4uLmFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1bY2FzZVJlZHVjZXIubmFtZV0sIHtcbiAgICAgICAgX3JlZHVjZXJEZWZpbml0aW9uVHlwZTogXCJyZWR1Y2VyXCIgLyogcmVkdWNlciAqL1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwcmVwYXJlZFJlZHVjZXIocHJlcGFyZSwgcmVkdWNlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3JlZHVjZXJEZWZpbml0aW9uVHlwZTogXCJyZWR1Y2VyV2l0aFByZXBhcmVcIiAvKiByZWR1Y2VyV2l0aFByZXBhcmUgKi8sXG4gICAgICAgIHByZXBhcmUsXG4gICAgICAgIHJlZHVjZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBhc3luY1RodW5rXG4gIH07XG59XG5mdW5jdGlvbiBoYW5kbGVOb3JtYWxSZWR1Y2VyRGVmaW5pdGlvbih7XG4gIHR5cGUsXG4gIHJlZHVjZXJOYW1lLFxuICBjcmVhdGVOb3RhdGlvblxufSwgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUsIGNvbnRleHQpIHtcbiAgbGV0IGNhc2VSZWR1Y2VyO1xuICBsZXQgcHJlcGFyZUNhbGxiYWNrO1xuICBpZiAoXCJyZWR1Y2VyXCIgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcbiAgICBpZiAoY3JlYXRlTm90YXRpb24gJiYgIWlzQ2FzZVJlZHVjZXJXaXRoUHJlcGFyZURlZmluaXRpb24obWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNykgOiBcIlBsZWFzZSB1c2UgdGhlIGBjcmVhdGUucHJlcGFyZWRSZWR1Y2VyYCBub3RhdGlvbiBmb3IgcHJlcGFyZWQgYWN0aW9uIGNyZWF0b3JzIHdpdGggdGhlIGBjcmVhdGVgIG5vdGF0aW9uLlwiKTtcbiAgICB9XG4gICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xuICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XG4gIH0gZWxzZSB7XG4gICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcbiAgfVxuICBjb250ZXh0LmFkZENhc2UodHlwZSwgY2FzZVJlZHVjZXIpLmV4cG9zZUNhc2VSZWR1Y2VyKHJlZHVjZXJOYW1lLCBjYXNlUmVkdWNlcikuZXhwb3NlQWN0aW9uKHJlZHVjZXJOYW1lLCBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKSk7XG59XG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtTbGljZVJlZHVjZXJEZWZpbml0aW9uKHJlZHVjZXJEZWZpbml0aW9uKSB7XG4gIHJldHVybiByZWR1Y2VyRGVmaW5pdGlvbi5fcmVkdWNlckRlZmluaXRpb25UeXBlID09PSBcImFzeW5jVGh1bmtcIiAvKiBhc3luY1RodW5rICovO1xufVxuZnVuY3Rpb24gaXNDYXNlUmVkdWNlcldpdGhQcmVwYXJlRGVmaW5pdGlvbihyZWR1Y2VyRGVmaW5pdGlvbikge1xuICByZXR1cm4gcmVkdWNlckRlZmluaXRpb24uX3JlZHVjZXJEZWZpbml0aW9uVHlwZSA9PT0gXCJyZWR1Y2VyV2l0aFByZXBhcmVcIiAvKiByZWR1Y2VyV2l0aFByZXBhcmUgKi87XG59XG5mdW5jdGlvbiBoYW5kbGVUaHVua0Nhc2VSZWR1Y2VyRGVmaW5pdGlvbih7XG4gIHR5cGUsXG4gIHJlZHVjZXJOYW1lXG59LCByZWR1Y2VyRGVmaW5pdGlvbiwgY29udGV4dCwgY0FUKSB7XG4gIGlmICghY0FUKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTgpIDogXCJDYW5ub3QgdXNlIGBjcmVhdGUuYXN5bmNUaHVua2AgaW4gdGhlIGJ1aWx0LWluIGBjcmVhdGVTbGljZWAuIFVzZSBgYnVpbGRDcmVhdGVTbGljZSh7IGNyZWF0b3JzOiB7IGFzeW5jVGh1bms6IGFzeW5jVGh1bmtDcmVhdG9yIH0gfSlgIHRvIGNyZWF0ZSBhIGN1c3RvbWlzZWQgdmVyc2lvbiBvZiBgY3JlYXRlU2xpY2VgLlwiKTtcbiAgfVxuICBjb25zdCB7XG4gICAgcGF5bG9hZENyZWF0b3IsXG4gICAgZnVsZmlsbGVkLFxuICAgIHBlbmRpbmcsXG4gICAgcmVqZWN0ZWQsXG4gICAgc2V0dGxlZCxcbiAgICBvcHRpb25zXG4gIH0gPSByZWR1Y2VyRGVmaW5pdGlvbjtcbiAgY29uc3QgdGh1bmsgPSBjQVQodHlwZSwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpO1xuICBjb250ZXh0LmV4cG9zZUFjdGlvbihyZWR1Y2VyTmFtZSwgdGh1bmspO1xuICBpZiAoZnVsZmlsbGVkKSB7XG4gICAgY29udGV4dC5hZGRDYXNlKHRodW5rLmZ1bGZpbGxlZCwgZnVsZmlsbGVkKTtcbiAgfVxuICBpZiAocGVuZGluZykge1xuICAgIGNvbnRleHQuYWRkQ2FzZSh0aHVuay5wZW5kaW5nLCBwZW5kaW5nKTtcbiAgfVxuICBpZiAocmVqZWN0ZWQpIHtcbiAgICBjb250ZXh0LmFkZENhc2UodGh1bmsucmVqZWN0ZWQsIHJlamVjdGVkKTtcbiAgfVxuICBpZiAoc2V0dGxlZCkge1xuICAgIGNvbnRleHQuYWRkTWF0Y2hlcih0aHVuay5zZXR0bGVkLCBzZXR0bGVkKTtcbiAgfVxuICBjb250ZXh0LmV4cG9zZUNhc2VSZWR1Y2VyKHJlZHVjZXJOYW1lLCB7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQgfHwgbm9vcCxcbiAgICBwZW5kaW5nOiBwZW5kaW5nIHx8IG5vb3AsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkIHx8IG5vb3AsXG4gICAgc2V0dGxlZDogc2V0dGxlZCB8fCBub29wXG4gIH0pO1xufVxuZnVuY3Rpb24gbm9vcCgpIHtcbn1cblxuLy8gc3JjL2VudGl0aWVzL2VudGl0eV9zdGF0ZS50c1xuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGlkczogW10sXG4gICAgZW50aXRpZXM6IHt9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KHN0YXRlQWRhcHRlcikge1xuICBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoYWRkaXRpb25hbFN0YXRlID0ge30sIGVudGl0aWVzKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xuICAgIHJldHVybiBlbnRpdGllcyA/IHN0YXRlQWRhcHRlci5zZXRBbGwoc3RhdGUsIGVudGl0aWVzKSA6IHN0YXRlO1xuICB9XG4gIHJldHVybiB7XG4gICAgZ2V0SW5pdGlhbFN0YXRlXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9zZWxlY3RvcnMudHNcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgY3JlYXRlU2VsZWN0b3I6IGNyZWF0ZVNlbGVjdG9yMiA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2VsZWN0SWRzID0gKHN0YXRlKSA9PiBzdGF0ZS5pZHM7XG4gICAgY29uc3Qgc2VsZWN0RW50aXRpZXMgPSAoc3RhdGUpID0+IHN0YXRlLmVudGl0aWVzO1xuICAgIGNvbnN0IHNlbGVjdEFsbCA9IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RJZHMsIHNlbGVjdEVudGl0aWVzLCAoaWRzLCBlbnRpdGllcykgPT4gaWRzLm1hcCgoaWQpID0+IGVudGl0aWVzW2lkXSkpO1xuICAgIGNvbnN0IHNlbGVjdElkID0gKF8sIGlkKSA9PiBpZDtcbiAgICBjb25zdCBzZWxlY3RCeUlkID0gKGVudGl0aWVzLCBpZCkgPT4gZW50aXRpZXNbaWRdO1xuICAgIGNvbnN0IHNlbGVjdFRvdGFsID0gY3JlYXRlU2VsZWN0b3IyKHNlbGVjdElkcywgKGlkcykgPT4gaWRzLmxlbmd0aCk7XG4gICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0SWRzLFxuICAgICAgICBzZWxlY3RFbnRpdGllcyxcbiAgICAgICAgc2VsZWN0QWxsLFxuICAgICAgICBzZWxlY3RUb3RhbCxcbiAgICAgICAgc2VsZWN0QnlJZDogY3JlYXRlU2VsZWN0b3IyKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RJZHM6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcbiAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXG4gICAgICBzZWxlY3RBbGw6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcbiAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVTZWxlY3RvcjIoc2VsZWN0U3RhdGUsIHNlbGVjdFRvdGFsKSxcbiAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZVNlbGVjdG9yMihzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBnZXRTZWxlY3RvcnNcbiAgfTtcbn1cblxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcbmltcG9ydCB7IHByb2R1Y2UgYXMgY3JlYXRlTmV4dFN0YXRlMywgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xudmFyIGlzRHJhZnRUeXBlZCA9IGlzRHJhZnQzO1xuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgY29uc3Qgb3BlcmF0b3IgPSBjcmVhdGVTdGF0ZU9wZXJhdG9yKChfLCBzdGF0ZSkgPT4gbXV0YXRvcihzdGF0ZSkpO1xuICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB2b2lkIDApO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGVPcGVyYXRvcihtdXRhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xuICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZzIpIHtcbiAgICAgIHJldHVybiBpc0ZTQShhcmcyKTtcbiAgICB9XG4gICAgY29uc3QgcnVuTXV0YXRvciA9IChkcmFmdCkgPT4ge1xuICAgICAgaWYgKGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZykpIHtcbiAgICAgICAgbXV0YXRvcihhcmcucGF5bG9hZCwgZHJhZnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXV0YXRvcihhcmcsIGRyYWZ0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0RyYWZ0VHlwZWQoc3RhdGUpKSB7XG4gICAgICBydW5NdXRhdG9yKHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTMoc3RhdGUsIHJ1bk11dGF0b3IpO1xuICB9O1xufVxuXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcbmltcG9ydCB7IGN1cnJlbnQgYXMgY3VycmVudDIsIGlzRHJhZnQgYXMgaXNEcmFmdDQgfSBmcm9tIFwiaW1tZXJcIjtcbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xuICBjb25zdCBrZXkgPSBzZWxlY3RJZChlbnRpdHkpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGtleSA9PT0gdm9pZCAwKSB7XG4gICAgY29uc29sZS53YXJuKFwiVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLlwiLCBcIllvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLlwiLCBcIlRoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOlwiLCBlbnRpdHksIFwiVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246XCIsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5KGVudGl0aWVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICB9XG4gIHJldHVybiBlbnRpdGllcztcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnQodmFsdWUpIHtcbiAgcmV0dXJuIGlzRHJhZnQ0KHZhbHVlKSA/IGN1cnJlbnQyKHZhbHVlKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKSB7XG4gIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gIGNvbnN0IGV4aXN0aW5nSWRzQXJyYXkgPSBnZXRDdXJyZW50KHN0YXRlLmlkcyk7XG4gIGNvbnN0IGV4aXN0aW5nSWRzID0gbmV3IFNldChleGlzdGluZ0lkc0FycmF5KTtcbiAgY29uc3QgYWRkZWQgPSBbXTtcbiAgY29uc3QgdXBkYXRlZCA9IFtdO1xuICBmb3IgKGNvbnN0IGVudGl0eSBvZiBuZXdFbnRpdGllcykge1xuICAgIGNvbnN0IGlkID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcbiAgICBpZiAoZXhpc3RpbmdJZHMuaGFzKGlkKSkge1xuICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoYW5nZXM6IGVudGl0eVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZGVkLnB1c2goZW50aXR5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFthZGRlZCwgdXBkYXRlZCwgZXhpc3RpbmdJZHNBcnJheV07XG59XG5cbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xuICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICBjb25zdCBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xuICB9XG4gIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgbmV3RW50aXRpZXMpIHtcbiAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xuICAgIGNvbnN0IGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG4gICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xuICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgO1xuICAgIHN0YXRlLmVudGl0aWVzW2tleV0gPSBlbnRpdHk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBuZXdFbnRpdGllcykge1xuICAgICAgc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIHN0YXRlLmVudGl0aWVzID0ge307XG4gICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcbiAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVNYW55TXV0YWJseShrZXlzLCBzdGF0ZSkge1xuICAgIGxldCBkaWRNdXRhdGUgPSBmYWxzZTtcbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNba2V5XTtcbiAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZGlkTXV0YXRlKSB7XG4gICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKChpZCkgPT4gaWQgaW4gc3RhdGUuZW50aXRpZXMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xuICAgICAgaWRzOiBbXSxcbiAgICAgIGVudGl0aWVzOiB7fVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIGNvbnN0IG9yaWdpbmFsMyA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgaWYgKG9yaWdpbmFsMyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDMsIHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICBjb25zdCBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICBjb25zdCBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcbiAgICBpZiAoaGFzTmV3S2V5KSB7XG4gICAgICBrZXlzW3VwZGF0ZS5pZF0gPSBuZXdLZXk7XG4gICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB9XG4gICAgO1xuICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xuICAgIHJldHVybiBoYXNOZXdLZXk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcbiAgICBjb25zdCBuZXdLZXlzID0ge307XG4gICAgY29uc3QgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xuICAgIHVwZGF0ZXMuZm9yRWFjaCgodXBkYXRlKSA9PiB7XG4gICAgICBpZiAodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA9IHtcbiAgICAgICAgICBpZDogdXBkYXRlLmlkLFxuICAgICAgICAgIC8vIFNwcmVhZHMgaWdub3JlIGZhbHN5IHZhbHVlcywgc28gdGhpcyB3b3JrcyBldmVuIGlmIHRoZXJlIGlzbid0XG4gICAgICAgICAgLy8gYW4gZXhpc3RpbmcgdXBkYXRlIGFscmVhZHkgYXQgdGhpcyBrZXlcbiAgICAgICAgICBjaGFuZ2VzOiB7XG4gICAgICAgICAgICAuLi51cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0/LmNoYW5nZXMsXG4gICAgICAgICAgICAuLi51cGRhdGUuY2hhbmdlc1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcbiAgICBjb25zdCBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcbiAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcbiAgICAgIGNvbnN0IGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKCh1cGRhdGUpID0+IHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSkpLmxlbmd0aCA+IDA7XG4gICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XG4gICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpLm1hcCgoZSkgPT4gc2VsZWN0SWRWYWx1ZShlLCBzZWxlY3RJZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBjb25zdCBbYWRkZWQsIHVwZGF0ZWRdID0gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKTtcbiAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XG4gICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlbW92ZUFsbDogY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKHJlbW92ZUFsbE11dGFibHkpLFxuICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcbiAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcbiAgICBzZXRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0T25lTXV0YWJseSksXG4gICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXG4gICAgcmVtb3ZlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU9uZU11dGFibHkpLFxuICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xuZnVuY3Rpb24gZmluZEluc2VydEluZGV4KHNvcnRlZEl0ZW1zLCBpdGVtLCBjb21wYXJpc29uRnVuY3Rpb24pIHtcbiAgbGV0IGxvd0luZGV4ID0gMDtcbiAgbGV0IGhpZ2hJbmRleCA9IHNvcnRlZEl0ZW1zLmxlbmd0aDtcbiAgd2hpbGUgKGxvd0luZGV4IDwgaGlnaEluZGV4KSB7XG4gICAgbGV0IG1pZGRsZUluZGV4ID0gbG93SW5kZXggKyBoaWdoSW5kZXggPj4+IDE7XG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSBzb3J0ZWRJdGVtc1ttaWRkbGVJbmRleF07XG4gICAgY29uc3QgcmVzID0gY29tcGFyaXNvbkZ1bmN0aW9uKGl0ZW0sIGN1cnJlbnRJdGVtKTtcbiAgICBpZiAocmVzID49IDApIHtcbiAgICAgIGxvd0luZGV4ID0gbWlkZGxlSW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWdoSW5kZXggPSBtaWRkbGVJbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvd0luZGV4O1xufVxuZnVuY3Rpb24gaW5zZXJ0KHNvcnRlZEl0ZW1zLCBpdGVtLCBjb21wYXJpc29uRnVuY3Rpb24pIHtcbiAgY29uc3QgaW5zZXJ0QXRJbmRleCA9IGZpbmRJbnNlcnRJbmRleChzb3J0ZWRJdGVtcywgaXRlbSwgY29tcGFyaXNvbkZ1bmN0aW9uKTtcbiAgc29ydGVkSXRlbXMuc3BsaWNlKGluc2VydEF0SW5kZXgsIDAsIGl0ZW0pO1xuICByZXR1cm4gc29ydGVkSXRlbXM7XG59XG5mdW5jdGlvbiBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIGNvbXBhcmVyKSB7XG4gIGNvbnN0IHtcbiAgICByZW1vdmVPbmUsXG4gICAgcmVtb3ZlTWFueSxcbiAgICByZW1vdmVBbGxcbiAgfSA9IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIGFkZE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlLCBleGlzdGluZ0lkcykge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgY29uc3QgZXhpc3RpbmdLZXlzID0gbmV3IFNldChleGlzdGluZ0lkcyA/PyBnZXRDdXJyZW50KHN0YXRlLmlkcykpO1xuICAgIGNvbnN0IG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcigobW9kZWwpID0+ICFleGlzdGluZ0tleXMuaGFzKHNlbGVjdElkVmFsdWUobW9kZWwsIHNlbGVjdElkKSkpO1xuICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBtZXJnZUZ1bmN0aW9uKHN0YXRlLCBtb2RlbHMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcbiAgICByZXR1cm4gc2V0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcbiAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBuZXdFbnRpdGllcykge1xuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQoaXRlbSldO1xuICAgICAgfVxuICAgICAgbWVyZ2VGdW5jdGlvbihzdGF0ZSwgbmV3RW50aXRpZXMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XG4gICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcbiAgICBzdGF0ZS5pZHMgPSBbXTtcbiAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUsIFtdKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIGxldCBhcHBsaWVkVXBkYXRlcyA9IGZhbHNlO1xuICAgIGxldCByZXBsYWNlZElkcyA9IGZhbHNlO1xuICAgIGZvciAobGV0IHVwZGF0ZSBvZiB1cGRhdGVzKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBhcHBsaWVkVXBkYXRlcyA9IHRydWU7XG4gICAgICBPYmplY3QuYXNzaWduKGVudGl0eSwgdXBkYXRlLmNoYW5nZXMpO1xuICAgICAgY29uc3QgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpO1xuICAgICAgaWYgKHVwZGF0ZS5pZCAhPT0gbmV3SWQpIHtcbiAgICAgICAgcmVwbGFjZWRJZHMgPSB0cnVlO1xuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICAgICAgY29uc3Qgb2xkSW5kZXggPSBzdGF0ZS5pZHMuaW5kZXhPZih1cGRhdGUuaWQpO1xuICAgICAgICBzdGF0ZS5pZHNbb2xkSW5kZXhdID0gbmV3SWQ7XG4gICAgICAgIHN0YXRlLmVudGl0aWVzW25ld0lkXSA9IGVudGl0eTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFwcGxpZWRVcGRhdGVzKSB7XG4gICAgICBtZXJnZUZ1bmN0aW9uKHN0YXRlLCBbXSwgYXBwbGllZFVwZGF0ZXMsIHJlcGxhY2VkSWRzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XG4gICAgY29uc3QgW2FkZGVkLCB1cGRhdGVkLCBleGlzdGluZ0lkc0FycmF5XSA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSk7XG4gICAgaWYgKHVwZGF0ZWQubGVuZ3RoKSB7XG4gICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChhZGRlZC5sZW5ndGgpIHtcbiAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSwgZXhpc3RpbmdJZHNBcnJheSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IG1lcmdlRnVuY3Rpb24gPSAoc3RhdGUsIGFkZGVkSXRlbXMsIGFwcGxpZWRVcGRhdGVzLCByZXBsYWNlZElkcykgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRFbnRpdGllcyA9IGdldEN1cnJlbnQoc3RhdGUuZW50aXRpZXMpO1xuICAgIGNvbnN0IGN1cnJlbnRJZHMgPSBnZXRDdXJyZW50KHN0YXRlLmlkcyk7XG4gICAgY29uc3Qgc3RhdGVFbnRpdGllcyA9IHN0YXRlLmVudGl0aWVzO1xuICAgIGxldCBpZHMgPSBjdXJyZW50SWRzO1xuICAgIGlmIChyZXBsYWNlZElkcykge1xuICAgICAgaWRzID0gbmV3IFNldChjdXJyZW50SWRzKTtcbiAgICB9XG4gICAgbGV0IHNvcnRlZEVudGl0aWVzID0gW107XG4gICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgIGNvbnN0IGVudGl0eSA9IGN1cnJlbnRFbnRpdGllc1tpZF07XG4gICAgICBpZiAoZW50aXR5KSB7XG4gICAgICAgIHNvcnRlZEVudGl0aWVzLnB1c2goZW50aXR5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2FzUHJldmlvdXNseUVtcHR5ID0gc29ydGVkRW50aXRpZXMubGVuZ3RoID09PSAwO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhZGRlZEl0ZW1zKSB7XG4gICAgICBzdGF0ZUVudGl0aWVzW3NlbGVjdElkKGl0ZW0pXSA9IGl0ZW07XG4gICAgICBpZiAoIXdhc1ByZXZpb3VzbHlFbXB0eSkge1xuICAgICAgICBpbnNlcnQoc29ydGVkRW50aXRpZXMsIGl0ZW0sIGNvbXBhcmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdhc1ByZXZpb3VzbHlFbXB0eSkge1xuICAgICAgc29ydGVkRW50aXRpZXMgPSBhZGRlZEl0ZW1zLnNsaWNlKCkuc29ydChjb21wYXJlcik7XG4gICAgfSBlbHNlIGlmIChhcHBsaWVkVXBkYXRlcykge1xuICAgICAgc29ydGVkRW50aXRpZXMuc29ydChjb21wYXJlcik7XG4gICAgfVxuICAgIGNvbnN0IG5ld1NvcnRlZElkcyA9IHNvcnRlZEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XG4gICAgaWYgKCFhcmVBcnJheXNFcXVhbChjdXJyZW50SWRzLCBuZXdTb3J0ZWRJZHMpKSB7XG4gICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIHJlbW92ZU9uZSxcbiAgICByZW1vdmVNYW55LFxuICAgIHJlbW92ZUFsbCxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxuICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcbiAgICBzZXRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0T25lTXV0YWJseSksXG4gICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpXG4gIH07XG59XG5cbi8vIHNyYy9lbnRpdGllcy9jcmVhdGVfYWRhcHRlci50c1xuZnVuY3Rpb24gY3JlYXRlRW50aXR5QWRhcHRlcihvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHNlbGVjdElkLFxuICAgIHNvcnRDb21wYXJlclxuICB9ID0ge1xuICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXG4gICAgc2VsZWN0SWQ6IChpbnN0YW5jZSkgPT4gaW5zdGFuY2UuaWQsXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuICBjb25zdCBzdGF0ZUFkYXB0ZXIgPSBzb3J0Q29tcGFyZXIgPyBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIHNvcnRDb21wYXJlcikgOiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCk7XG4gIGNvbnN0IHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3Rvcnkoc3RhdGVBZGFwdGVyKTtcbiAgY29uc3Qgc2VsZWN0b3JzRmFjdG9yeSA9IGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKTtcbiAgcmV0dXJuIHtcbiAgICBzZWxlY3RJZCxcbiAgICBzb3J0Q29tcGFyZXIsXG4gICAgLi4uc3RhdGVGYWN0b3J5LFxuICAgIC4uLnNlbGVjdG9yc0ZhY3RvcnksXG4gICAgLi4uc3RhdGVBZGFwdGVyXG4gIH07XG59XG5cbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcbmltcG9ydCB7IGlzQWN0aW9uIGFzIGlzQWN0aW9uMyB9IGZyb20gXCJyZWR1eFwiO1xuXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2V4Y2VwdGlvbnMudHNcbnZhciB0YXNrID0gXCJ0YXNrXCI7XG52YXIgbGlzdGVuZXIgPSBcImxpc3RlbmVyXCI7XG52YXIgY29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcbnZhciBjYW5jZWxsZWQgPSBcImNhbmNlbGxlZFwiO1xudmFyIHRhc2tDYW5jZWxsZWQgPSBgdGFzay0ke2NhbmNlbGxlZH1gO1xudmFyIHRhc2tDb21wbGV0ZWQgPSBgdGFzay0ke2NvbXBsZXRlZH1gO1xudmFyIGxpc3RlbmVyQ2FuY2VsbGVkID0gYCR7bGlzdGVuZXJ9LSR7Y2FuY2VsbGVkfWA7XG52YXIgbGlzdGVuZXJDb21wbGV0ZWQgPSBgJHtsaXN0ZW5lcn0tJHtjb21wbGV0ZWR9YDtcbnZhciBUYXNrQWJvcnRFcnJvciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY29kZSkge1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5tZXNzYWdlID0gYCR7dGFza30gJHtjYW5jZWxsZWR9IChyZWFzb246ICR7Y29kZX0pYDtcbiAgfVxuICBuYW1lID0gXCJUYXNrQWJvcnRFcnJvclwiO1xuICBtZXNzYWdlO1xufTtcblxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS91dGlscy50c1xudmFyIGFzc2VydEZ1bmN0aW9uID0gKGZ1bmMsIGV4cGVjdGVkKSA9PiB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzIpIDogYCR7ZXhwZWN0ZWR9IGlzIG5vdCBhIGZ1bmN0aW9uYCk7XG4gIH1cbn07XG52YXIgbm9vcDIgPSAoKSA9PiB7XG59O1xudmFyIGNhdGNoUmVqZWN0aW9uID0gKHByb21pc2UsIG9uRXJyb3IgPSBub29wMikgPT4ge1xuICBwcm9taXNlLmNhdGNoKG9uRXJyb3IpO1xuICByZXR1cm4gcHJvbWlzZTtcbn07XG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IChhYm9ydFNpZ25hbCwgY2FsbGJhY2spID0+IHtcbiAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGNhbGxiYWNrLCB7XG4gICAgb25jZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuICgpID0+IGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjayk7XG59O1xudmFyIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24gPSAoYWJvcnRDb250cm9sbGVyLCByZWFzb24pID0+IHtcbiAgY29uc3Qgc2lnbmFsID0gYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcbiAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKFwicmVhc29uXCIgaW4gc2lnbmFsKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaWduYWwsIFwicmVhc29uXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogcmVhc29uLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICA7XG4gIGFib3J0Q29udHJvbGxlci5hYm9ydChyZWFzb24pO1xufTtcblxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS90YXNrLnRzXG52YXIgdmFsaWRhdGVBY3RpdmUgPSAoc2lnbmFsKSA9PiB7XG4gIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlYXNvblxuICAgIH0gPSBzaWduYWw7XG4gICAgdGhyb3cgbmV3IFRhc2tBYm9ydEVycm9yKHJlYXNvbik7XG4gIH1cbn07XG5mdW5jdGlvbiByYWNlV2l0aFNpZ25hbChzaWduYWwsIHByb21pc2UpIHtcbiAgbGV0IGNsZWFudXAgPSBub29wMjtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBub3RpZnlSZWplY3Rpb24gPSAoKSA9PiByZWplY3QobmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pKTtcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIG5vdGlmeVJlamVjdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhbnVwID0gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihzaWduYWwsIG5vdGlmeVJlamVjdGlvbik7XG4gICAgcHJvbWlzZS5maW5hbGx5KCgpID0+IGNsZWFudXAoKSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICBjbGVhbnVwID0gbm9vcDI7XG4gIH0pO1xufVxudmFyIHJ1blRhc2sgPSBhc3luYyAodGFzazIsIGNsZWFuVXApID0+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHRhc2syKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogXCJva1wiLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IGVycm9yIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IgPyBcImNhbmNlbGxlZFwiIDogXCJyZWplY3RlZFwiLFxuICAgICAgZXJyb3JcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIGNsZWFuVXA/LigpO1xuICB9XG59O1xudmFyIGNyZWF0ZVBhdXNlID0gKHNpZ25hbCkgPT4ge1xuICByZXR1cm4gKHByb21pc2UpID0+IHtcbiAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24ocmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlKS50aGVuKChvdXRwdXQpID0+IHtcbiAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0pKTtcbiAgfTtcbn07XG52YXIgY3JlYXRlRGVsYXkgPSAoc2lnbmFsKSA9PiB7XG4gIGNvbnN0IHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcbiAgcmV0dXJuICh0aW1lb3V0TXMpID0+IHtcbiAgICByZXR1cm4gcGF1c2UobmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dE1zKSkpO1xuICB9O1xufTtcblxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS9pbmRleC50c1xudmFyIHtcbiAgYXNzaWduXG59ID0gT2JqZWN0O1xudmFyIElOVEVSTkFMX05JTF9UT0tFTiA9IHt9O1xudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XG52YXIgY3JlYXRlRm9yayA9IChwYXJlbnRBYm9ydFNpZ25hbCwgcGFyZW50QmxvY2tpbmdQcm9taXNlcykgPT4ge1xuICBjb25zdCBsaW5rQ29udHJvbGxlcnMgPSAoY29udHJvbGxlcikgPT4gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihwYXJlbnRBYm9ydFNpZ25hbCwgKCkgPT4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBwYXJlbnRBYm9ydFNpZ25hbC5yZWFzb24pKTtcbiAgcmV0dXJuICh0YXNrRXhlY3V0b3IsIG9wdHMpID0+IHtcbiAgICBhc3NlcnRGdW5jdGlvbih0YXNrRXhlY3V0b3IsIFwidGFza0V4ZWN1dG9yXCIpO1xuICAgIGNvbnN0IGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XG4gICAgY29uc3QgcmVzdWx0ID0gcnVuVGFzayhhc3luYyAoKSA9PiB7XG4gICAgICB2YWxpZGF0ZUFjdGl2ZShwYXJlbnRBYm9ydFNpZ25hbCk7XG4gICAgICB2YWxpZGF0ZUFjdGl2ZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgICAgY29uc3QgcmVzdWx0MiA9IGF3YWl0IHRhc2tFeGVjdXRvcih7XG4gICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxuICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcbiAgICAgICAgc2lnbmFsOiBjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWxcbiAgICAgIH0pO1xuICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICAgIHJldHVybiByZXN1bHQyO1xuICAgIH0sICgpID0+IGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDb21wbGV0ZWQpKTtcbiAgICBpZiAob3B0cz8uYXV0b0pvaW4pIHtcbiAgICAgIHBhcmVudEJsb2NraW5nUHJvbWlzZXMucHVzaChyZXN1bHQuY2F0Y2gobm9vcDIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXG4gICAgICBjYW5jZWwoKSB7XG4gICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDYW5jZWxsZWQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpID0+IHtcbiAgY29uc3QgdGFrZSA9IGFzeW5jIChwcmVkaWNhdGUsIHRpbWVvdXQpID0+IHtcbiAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xuICAgIGxldCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICB9O1xuICAgIGNvbnN0IHR1cGxlUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBzdG9wTGlzdGVuaW5nID0gc3RhcnRMaXN0ZW5pbmcoe1xuICAgICAgICBwcmVkaWNhdGUsXG4gICAgICAgIGVmZmVjdDogKGFjdGlvbiwgbGlzdGVuZXJBcGkpID0+IHtcbiAgICAgICAgICBsaXN0ZW5lckFwaS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIHJlc29sdmUoW2FjdGlvbiwgbGlzdGVuZXJBcGkuZ2V0U3RhdGUoKSwgbGlzdGVuZXJBcGkuZ2V0T3JpZ2luYWxTdGF0ZSgpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICAgIHN0b3BMaXN0ZW5pbmcoKTtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHByb21pc2VzID0gW3R1cGxlUHJvbWlzZV07XG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0LCBudWxsKSkpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgcmFjZVdpdGhTaWduYWwoc2lnbmFsLCBQcm9taXNlLnJhY2UocHJvbWlzZXMpKTtcbiAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIChwcmVkaWNhdGUsIHRpbWVvdXQpID0+IGNhdGNoUmVqZWN0aW9uKHRha2UocHJlZGljYXRlLCB0aW1lb3V0KSk7XG59O1xudmFyIGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20gPSAob3B0aW9ucykgPT4ge1xuICBsZXQge1xuICAgIHR5cGUsXG4gICAgYWN0aW9uQ3JlYXRvcixcbiAgICBtYXRjaGVyLFxuICAgIHByZWRpY2F0ZSxcbiAgICBlZmZlY3RcbiAgfSA9IG9wdGlvbnM7XG4gIGlmICh0eXBlKSB7XG4gICAgcHJlZGljYXRlID0gY3JlYXRlQWN0aW9uKHR5cGUpLm1hdGNoO1xuICB9IGVsc2UgaWYgKGFjdGlvbkNyZWF0b3IpIHtcbiAgICB0eXBlID0gYWN0aW9uQ3JlYXRvci50eXBlO1xuICAgIHByZWRpY2F0ZSA9IGFjdGlvbkNyZWF0b3IubWF0Y2g7XG4gIH0gZWxzZSBpZiAobWF0Y2hlcikge1xuICAgIHByZWRpY2F0ZSA9IG1hdGNoZXI7XG4gIH0gZWxzZSBpZiAocHJlZGljYXRlKSB7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjEpIDogXCJDcmVhdGluZyBvciByZW1vdmluZyBhIGxpc3RlbmVyIHJlcXVpcmVzIG9uZSBvZiB0aGUga25vd24gZmllbGRzIGZvciBtYXRjaGluZyBhbiBhY3Rpb25cIik7XG4gIH1cbiAgYXNzZXJ0RnVuY3Rpb24oZWZmZWN0LCBcIm9wdGlvbnMubGlzdGVuZXJcIik7XG4gIHJldHVybiB7XG4gICAgcHJlZGljYXRlLFxuICAgIHR5cGUsXG4gICAgZWZmZWN0XG4gIH07XG59O1xudmFyIGNyZWF0ZUxpc3RlbmVyRW50cnkgPSAvKiBAX19QVVJFX18gKi8gYXNzaWduKChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHByZWRpY2F0ZSxcbiAgICBlZmZlY3RcbiAgfSA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyk7XG4gIGNvbnN0IGlkID0gbmFub2lkKCk7XG4gIGNvbnN0IGVudHJ5ID0ge1xuICAgIGlkLFxuICAgIGVmZmVjdCxcbiAgICB0eXBlLFxuICAgIHByZWRpY2F0ZSxcbiAgICBwZW5kaW5nOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyMikgOiBcIlVuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBlbnRyeTtcbn0sIHtcbiAgd2l0aFR5cGVzOiAoKSA9PiBjcmVhdGVMaXN0ZW5lckVudHJ5XG59KTtcbnZhciBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMgPSAoZW50cnkpID0+IHtcbiAgZW50cnkucGVuZGluZy5mb3JFYWNoKChjb250cm9sbGVyKSA9PiB7XG4gICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBsaXN0ZW5lckNhbmNlbGxlZCk7XG4gIH0pO1xufTtcbnZhciBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IChsaXN0ZW5lck1hcCkgPT4ge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxpc3RlbmVyTWFwLmZvckVhY2goY2FuY2VsQWN0aXZlTGlzdGVuZXJzKTtcbiAgICBsaXN0ZW5lck1hcC5jbGVhcigpO1xuICB9O1xufTtcbnZhciBzYWZlbHlOb3RpZnlFcnJvciA9IChlcnJvckhhbmRsZXIsIGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbykgPT4ge1xuICB0cnkge1xuICAgIGVycm9ySGFuZGxlcihlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pO1xuICB9IGNhdGNoIChlcnJvckhhbmRsZXJFcnJvcikge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhyb3cgZXJyb3JIYW5kbGVyRXJyb3I7XG4gICAgfSwgMCk7XG4gIH1cbn07XG52YXIgYWRkTGlzdGVuZXIgPSAvKiBAX19QVVJFX18gKi8gYXNzaWduKC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVBY3Rpb24oYCR7YWxtfS9hZGRgKSwge1xuICB3aXRoVHlwZXM6ICgpID0+IGFkZExpc3RlbmVyXG59KTtcbnZhciBjbGVhckFsbExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVBY3Rpb24oYCR7YWxtfS9yZW1vdmVBbGxgKTtcbnZhciByZW1vdmVMaXN0ZW5lciA9IC8qIEBfX1BVUkVfXyAqLyBhc3NpZ24oLyogQF9fUFVSRV9fICovIGNyZWF0ZUFjdGlvbihgJHthbG19L3JlbW92ZWApLCB7XG4gIHdpdGhUeXBlczogKCkgPT4gcmVtb3ZlTGlzdGVuZXJcbn0pO1xudmFyIGRlZmF1bHRFcnJvckhhbmRsZXIgPSAoLi4uYXJncykgPT4ge1xuICBjb25zb2xlLmVycm9yKGAke2FsbX0vZXJyb3JgLCAuLi5hcmdzKTtcbn07XG52YXIgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlID0gKG1pZGRsZXdhcmVPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgbGlzdGVuZXJNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCB7XG4gICAgZXh0cmEsXG4gICAgb25FcnJvciA9IGRlZmF1bHRFcnJvckhhbmRsZXJcbiAgfSA9IG1pZGRsZXdhcmVPcHRpb25zO1xuICBhc3NlcnRGdW5jdGlvbihvbkVycm9yLCBcIm9uRXJyb3JcIik7XG4gIGNvbnN0IGluc2VydEVudHJ5ID0gKGVudHJ5KSA9PiB7XG4gICAgZW50cnkudW5zdWJzY3JpYmUgPSAoKSA9PiBsaXN0ZW5lck1hcC5kZWxldGUoZW50cnkuaWQpO1xuICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xuICAgIHJldHVybiAoY2FuY2VsT3B0aW9ucykgPT4ge1xuICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcbiAgICAgIGlmIChjYW5jZWxPcHRpb25zPy5jYW5jZWxBY3RpdmUpIHtcbiAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzKGVudHJ5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBjb25zdCBzdGFydExpc3RlbmluZyA9IChvcHRpb25zKSA9PiB7XG4gICAgbGV0IGVudHJ5ID0gZmluZChBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKSwgKGV4aXN0aW5nRW50cnkpID0+IGV4aXN0aW5nRW50cnkuZWZmZWN0ID09PSBvcHRpb25zLmVmZmVjdCk7XG4gICAgaWYgKCFlbnRyeSkge1xuICAgICAgZW50cnkgPSBjcmVhdGVMaXN0ZW5lckVudHJ5KG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zZXJ0RW50cnkoZW50cnkpO1xuICB9O1xuICBhc3NpZ24oc3RhcnRMaXN0ZW5pbmcsIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IHN0YXJ0TGlzdGVuaW5nXG4gIH0pO1xuICBjb25zdCBzdG9wTGlzdGVuaW5nID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0eXBlLFxuICAgICAgZWZmZWN0LFxuICAgICAgcHJlZGljYXRlXG4gICAgfSA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyk7XG4gICAgY29uc3QgZW50cnkgPSBmaW5kKEFycmF5LmZyb20obGlzdGVuZXJNYXAudmFsdWVzKCkpLCAoZW50cnkyKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gZW50cnkyLnR5cGUgPT09IHR5cGUgOiBlbnRyeTIucHJlZGljYXRlID09PSBwcmVkaWNhdGU7XG4gICAgICByZXR1cm4gbWF0Y2hQcmVkaWNhdGVPclR5cGUgJiYgZW50cnkyLmVmZmVjdCA9PT0gZWZmZWN0O1xuICAgIH0pO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcbiAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xuICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gISFlbnRyeTtcbiAgfTtcbiAgYXNzaWduKHN0b3BMaXN0ZW5pbmcsIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IHN0b3BMaXN0ZW5pbmdcbiAgfSk7XG4gIGNvbnN0IG5vdGlmeUxpc3RlbmVyID0gYXN5bmMgKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IGludGVybmFsVGFza0NvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgdGFrZSA9IGNyZWF0ZVRha2VQYXR0ZXJuKHN0YXJ0TGlzdGVuaW5nLCBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgY29uc3QgYXV0b0pvaW5Qcm9taXNlcyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcbiAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZShlbnRyeS5lZmZlY3QoXG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgLy8gVXNlIGFzc2lnbigpIHJhdGhlciB0aGFuIC4uLiB0byBhdm9pZCBleHRyYSBoZWxwZXIgZnVuY3Rpb25zIGFkZGVkIHRvIGJ1bmRsZVxuICAgICAgICBhc3NpZ24oe30sIGFwaSwge1xuICAgICAgICAgIGdldE9yaWdpbmFsU3RhdGUsXG4gICAgICAgICAgY29uZGl0aW9uOiAocHJlZGljYXRlLCB0aW1lb3V0KSA9PiB0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkudGhlbihCb29sZWFuKSxcbiAgICAgICAgICB0YWtlLFxuICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXG4gICAgICAgICAgcGF1c2U6IGNyZWF0ZVBhdXNlKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcbiAgICAgICAgICBleHRyYSxcbiAgICAgICAgICBzaWduYWw6IGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgICAgIGZvcms6IGNyZWF0ZUZvcmsoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwsIGF1dG9Kb2luUHJvbWlzZXMpLFxuICAgICAgICAgIHVuc3Vic2NyaWJlOiBlbnRyeS51bnN1YnNjcmliZSxcbiAgICAgICAgICBzdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiAoKSA9PiB7XG4gICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goKGNvbnRyb2xsZXIsIF8sIHNldCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciAhPT0gaW50ZXJuYWxUYXNrQ29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgIHNldC5kZWxldGUoY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FuY2VsOiAoKSA9PiB7XG4gICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGludGVybmFsVGFza0NvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcbiAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZGVsZXRlKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhyb3dJZkNhbmNlbGxlZDogKCkgPT4ge1xuICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICkpO1xuICAgIH0gY2F0Y2ggKGxpc3RlbmVyRXJyb3IpIHtcbiAgICAgIGlmICghKGxpc3RlbmVyRXJyb3IgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvcikpIHtcbiAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgbGlzdGVuZXJFcnJvciwge1xuICAgICAgICAgIHJhaXNlZEJ5OiBcImVmZmVjdFwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChhdXRvSm9pblByb21pc2VzKTtcbiAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDb21wbGV0ZWQpO1xuICAgICAgZW50cnkucGVuZGluZy5kZWxldGUoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKGxpc3RlbmVyTWFwKTtcbiAgY29uc3QgbWlkZGxld2FyZSA9IChhcGkpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKCFpc0FjdGlvbjMoYWN0aW9uKSkge1xuICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICB9XG4gICAgaWYgKGFkZExpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcbiAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XG4gICAgfVxuICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XG4gICAgICBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xuICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xuICAgIH1cbiAgICBsZXQgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IGdldE9yaWdpbmFsU3RhdGUgPSAoKSA9PiB7XG4gICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIzKSA6IGAke2FsbX06IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnaW5hbFN0YXRlO1xuICAgIH07XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBsaXN0ZW5lckVudHJpZXMgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBsaXN0ZW5lckVudHJpZXMpIHtcbiAgICAgICAgICBsZXQgcnVuTGlzdGVuZXIgPSBmYWxzZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcnVuTGlzdGVuZXIgPSBlbnRyeS5wcmVkaWNhdGUoYWN0aW9uLCBjdXJyZW50U3RhdGUsIG9yaWdpbmFsU3RhdGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKHByZWRpY2F0ZUVycm9yKSB7XG4gICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xuICAgICAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgcHJlZGljYXRlRXJyb3IsIHtcbiAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXJ1bkxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm90aWZ5TGlzdGVuZXIoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBvcmlnaW5hbFN0YXRlID0gSU5URVJOQUxfTklMX1RPS0VOO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4ge1xuICAgIG1pZGRsZXdhcmUsXG4gICAgc3RhcnRMaXN0ZW5pbmcsXG4gICAgc3RvcExpc3RlbmluZyxcbiAgICBjbGVhckxpc3RlbmVyczogY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmVcbiAgfTtcbn07XG5cbi8vIHNyYy9keW5hbWljTWlkZGxld2FyZS9pbmRleC50c1xuaW1wb3J0IHsgY29tcG9zZSBhcyBjb21wb3NlMyB9IGZyb20gXCJyZWR1eFwiO1xudmFyIGNyZWF0ZU1pZGRsZXdhcmVFbnRyeSA9IChtaWRkbGV3YXJlKSA9PiAoe1xuICBpZDogbmFub2lkKCksXG4gIG1pZGRsZXdhcmUsXG4gIGFwcGxpZWQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKClcbn0pO1xudmFyIG1hdGNoSW5zdGFuY2UgPSAoaW5zdGFuY2VJZCkgPT4gKGFjdGlvbikgPT4gYWN0aW9uPy5tZXRhPy5pbnN0YW5jZUlkID09PSBpbnN0YW5jZUlkO1xudmFyIGNyZWF0ZUR5bmFtaWNNaWRkbGV3YXJlID0gKCkgPT4ge1xuICBjb25zdCBpbnN0YW5jZUlkID0gbmFub2lkKCk7XG4gIGNvbnN0IG1pZGRsZXdhcmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCB3aXRoTWlkZGxld2FyZSA9IE9iamVjdC5hc3NpZ24oY3JlYXRlQWN0aW9uKFwiZHluYW1pY01pZGRsZXdhcmUvYWRkXCIsICguLi5taWRkbGV3YXJlcykgPT4gKHtcbiAgICBwYXlsb2FkOiBtaWRkbGV3YXJlcyxcbiAgICBtZXRhOiB7XG4gICAgICBpbnN0YW5jZUlkXG4gICAgfVxuICB9KSksIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IHdpdGhNaWRkbGV3YXJlXG4gIH0pO1xuICBjb25zdCBhZGRNaWRkbGV3YXJlID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBhZGRNaWRkbGV3YXJlMiguLi5taWRkbGV3YXJlcykge1xuICAgIG1pZGRsZXdhcmVzLmZvckVhY2goKG1pZGRsZXdhcmUyKSA9PiB7XG4gICAgICBsZXQgZW50cnkgPSBmaW5kKEFycmF5LmZyb20obWlkZGxld2FyZU1hcC52YWx1ZXMoKSksIChlbnRyeTIpID0+IGVudHJ5Mi5taWRkbGV3YXJlID09PSBtaWRkbGV3YXJlMik7XG4gICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gY3JlYXRlTWlkZGxld2FyZUVudHJ5KG1pZGRsZXdhcmUyKTtcbiAgICAgIH1cbiAgICAgIG1pZGRsZXdhcmVNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XG4gICAgfSk7XG4gIH0sIHtcbiAgICB3aXRoVHlwZXM6ICgpID0+IGFkZE1pZGRsZXdhcmVcbiAgfSk7XG4gIGNvbnN0IGdldEZpbmFsTWlkZGxld2FyZSA9IChhcGkpID0+IHtcbiAgICBjb25zdCBhcHBsaWVkTWlkZGxld2FyZSA9IEFycmF5LmZyb20obWlkZGxld2FyZU1hcC52YWx1ZXMoKSkubWFwKChlbnRyeSkgPT4gZW1wbGFjZShlbnRyeS5hcHBsaWVkLCBhcGksIHtcbiAgICAgIGluc2VydDogKCkgPT4gZW50cnkubWlkZGxld2FyZShhcGkpXG4gICAgfSkpO1xuICAgIHJldHVybiBjb21wb3NlMyguLi5hcHBsaWVkTWlkZGxld2FyZSk7XG4gIH07XG4gIGNvbnN0IGlzV2l0aE1pZGRsZXdhcmUgPSBpc0FsbE9mKHdpdGhNaWRkbGV3YXJlLCBtYXRjaEluc3RhbmNlKGluc3RhbmNlSWQpKTtcbiAgY29uc3QgbWlkZGxld2FyZSA9IChhcGkpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKGlzV2l0aE1pZGRsZXdhcmUoYWN0aW9uKSkge1xuICAgICAgYWRkTWlkZGxld2FyZSguLi5hY3Rpb24ucGF5bG9hZCk7XG4gICAgICByZXR1cm4gYXBpLmRpc3BhdGNoO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RmluYWxNaWRkbGV3YXJlKGFwaSkobmV4dCkoYWN0aW9uKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtaWRkbGV3YXJlLFxuICAgIGFkZE1pZGRsZXdhcmUsXG4gICAgd2l0aE1pZGRsZXdhcmUsXG4gICAgaW5zdGFuY2VJZFxuICB9O1xufTtcblxuLy8gc3JjL2NvbWJpbmVTbGljZXMudHNcbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyBhcyBjb21iaW5lUmVkdWNlcnMyIH0gZnJvbSBcInJlZHV4XCI7XG52YXIgaXNTbGljZUxpa2UgPSAobWF5YmVTbGljZUxpa2UpID0+IFwicmVkdWNlclBhdGhcIiBpbiBtYXliZVNsaWNlTGlrZSAmJiB0eXBlb2YgbWF5YmVTbGljZUxpa2UucmVkdWNlclBhdGggPT09IFwic3RyaW5nXCI7XG52YXIgZ2V0UmVkdWNlcnMgPSAoc2xpY2VzKSA9PiBzbGljZXMuZmxhdE1hcCgoc2xpY2VPck1hcCkgPT4gaXNTbGljZUxpa2Uoc2xpY2VPck1hcCkgPyBbW3NsaWNlT3JNYXAucmVkdWNlclBhdGgsIHNsaWNlT3JNYXAucmVkdWNlcl1dIDogT2JqZWN0LmVudHJpZXMoc2xpY2VPck1hcCkpO1xudmFyIE9SSUdJTkFMX1NUQVRFID0gU3ltYm9sLmZvcihcInJ0ay1zdGF0ZS1wcm94eS1vcmlnaW5hbFwiKTtcbnZhciBpc1N0YXRlUHJveHkgPSAodmFsdWUpID0+ICEhdmFsdWUgJiYgISF2YWx1ZVtPUklHSU5BTF9TVEFURV07XG52YXIgc3RhdGVQcm94eU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xudmFyIGNyZWF0ZVN0YXRlUHJveHkgPSAoc3RhdGUsIHJlZHVjZXJNYXApID0+IGVtcGxhY2Uoc3RhdGVQcm94eU1hcCwgc3RhdGUsIHtcbiAgaW5zZXJ0OiAoKSA9PiBuZXcgUHJveHkoc3RhdGUsIHtcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiB7XG4gICAgICBpZiAocHJvcCA9PT0gT1JJR0lOQUxfU1RBVEUpIHJldHVybiB0YXJnZXQ7XG4gICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnN0IHJlZHVjZXIgPSByZWR1Y2VyTWFwW3Byb3AudG9TdHJpbmcoKV07XG4gICAgICAgIGlmIChyZWR1Y2VyKSB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlclJlc3VsdCA9IHJlZHVjZXIodm9pZCAwLCB7XG4gICAgICAgICAgICB0eXBlOiBuYW5vaWQoKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVkdWNlclJlc3VsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjQpIDogYFRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXCIke3Byb3AudG9TdHJpbmcoKX1cIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBjYWxsZWQgZm9yIHNlbGVjdG9yKCkuIElmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIHlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZWR1Y2VyUmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfSlcbn0pO1xudmFyIG9yaWdpbmFsID0gKHN0YXRlKSA9PiB7XG4gIGlmICghaXNTdGF0ZVByb3h5KHN0YXRlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI1KSA6IFwib3JpZ2luYWwgbXVzdCBiZSB1c2VkIG9uIHN0YXRlIFByb3h5XCIpO1xuICB9XG4gIHJldHVybiBzdGF0ZVtPUklHSU5BTF9TVEFURV07XG59O1xudmFyIG5vb3BSZWR1Y2VyID0gKHN0YXRlID0ge30pID0+IHN0YXRlO1xuZnVuY3Rpb24gY29tYmluZVNsaWNlcyguLi5zbGljZXMpIHtcbiAgY29uc3QgcmVkdWNlck1hcCA9IE9iamVjdC5mcm9tRW50cmllcyhnZXRSZWR1Y2VycyhzbGljZXMpKTtcbiAgY29uc3QgZ2V0UmVkdWNlciA9ICgpID0+IE9iamVjdC5rZXlzKHJlZHVjZXJNYXApLmxlbmd0aCA/IGNvbWJpbmVSZWR1Y2VyczIocmVkdWNlck1hcCkgOiBub29wUmVkdWNlcjtcbiAgbGV0IHJlZHVjZXIgPSBnZXRSZWR1Y2VyKCk7XG4gIGZ1bmN0aW9uIGNvbWJpbmVkUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgcmV0dXJuIHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gIH1cbiAgY29tYmluZWRSZWR1Y2VyLndpdGhMYXp5TG9hZGVkU2xpY2VzID0gKCkgPT4gY29tYmluZWRSZWR1Y2VyO1xuICBjb25zdCBpbmplY3QgPSAoc2xpY2UsIGNvbmZpZyA9IHt9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcmVkdWNlclBhdGgsXG4gICAgICByZWR1Y2VyOiByZWR1Y2VyVG9JbmplY3RcbiAgICB9ID0gc2xpY2U7XG4gICAgY29uc3QgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyTWFwW3JlZHVjZXJQYXRoXTtcbiAgICBpZiAoIWNvbmZpZy5vdmVycmlkZUV4aXN0aW5nICYmIGN1cnJlbnRSZWR1Y2VyICYmIGN1cnJlbnRSZWR1Y2VyICE9PSByZWR1Y2VyVG9JbmplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGNhbGxlZCBcXGBpbmplY3RcXGAgdG8gb3ZlcnJpZGUgYWxyZWFkeS1leGlzdGluZyByZWR1Y2VyICR7cmVkdWNlclBhdGh9IHdpdGhvdXQgc3BlY2lmeWluZyBcXGBvdmVycmlkZUV4aXN0aW5nOiB0cnVlXFxgYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29tYmluZWRSZWR1Y2VyO1xuICAgIH1cbiAgICByZWR1Y2VyTWFwW3JlZHVjZXJQYXRoXSA9IHJlZHVjZXJUb0luamVjdDtcbiAgICByZWR1Y2VyID0gZ2V0UmVkdWNlcigpO1xuICAgIHJldHVybiBjb21iaW5lZFJlZHVjZXI7XG4gIH07XG4gIGNvbnN0IHNlbGVjdG9yID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBtYWtlU2VsZWN0b3Ioc2VsZWN0b3JGbiwgc2VsZWN0U3RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2VsZWN0b3IyKHN0YXRlLCAuLi5hcmdzKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGbihjcmVhdGVTdGF0ZVByb3h5KHNlbGVjdFN0YXRlID8gc2VsZWN0U3RhdGUoc3RhdGUsIC4uLmFyZ3MpIDogc3RhdGUsIHJlZHVjZXJNYXApLCAuLi5hcmdzKTtcbiAgICB9O1xuICB9LCB7XG4gICAgb3JpZ2luYWxcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGNvbWJpbmVkUmVkdWNlciwge1xuICAgIGluamVjdCxcbiAgICBzZWxlY3RvclxuICB9KTtcbn1cblxuLy8gc3JjL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UudHNcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gYE1pbmlmaWVkIFJlZHV4IFRvb2xraXQgZXJyb3IgIyR7Y29kZX07IHZpc2l0IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvRXJyb3JzP2NvZGU9JHtjb2RlfSBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzLiBgO1xufVxuZXhwb3J0IHtcbiAgUmVkdWNlclR5cGUsXG4gIFNIT1VMRF9BVVRPQkFUQ0gsXG4gIFRhc2tBYm9ydEVycm9yLFxuICBUdXBsZSxcbiAgYWRkTGlzdGVuZXIsXG4gIGFzeW5jVGh1bmtDcmVhdG9yLFxuICBhdXRvQmF0Y2hFbmhhbmNlcixcbiAgYnVpbGRDcmVhdGVTbGljZSxcbiAgY2xlYXJBbGxMaXN0ZW5lcnMsXG4gIGNvbWJpbmVTbGljZXMsXG4gIGNvbmZpZ3VyZVN0b3JlLFxuICBjcmVhdGVBY3Rpb24sXG4gIGNyZWF0ZUFjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlLFxuICBjcmVhdGVBc3luY1RodW5rLFxuICBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcixcbiAgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3JDcmVhdG9yLFxuICBjcmVhdGVEeW5hbWljTWlkZGxld2FyZSxcbiAgY3JlYXRlRW50aXR5QWRhcHRlcixcbiAgY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLFxuICBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUsXG4gIHByb2R1Y2UgYXMgY3JlYXRlTmV4dFN0YXRlLFxuICBjcmVhdGVSZWR1Y2VyLFxuICBjcmVhdGVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3JDcmVhdG9yMiBhcyBjcmVhdGVTZWxlY3RvckNyZWF0b3IsXG4gIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSxcbiAgY3JlYXRlU2xpY2UsXG4gIGN1cnJlbnQzIGFzIGN1cnJlbnQsXG4gIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSxcbiAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSxcbiAgZnJlZXplLFxuICBpc0FjdGlvbkNyZWF0b3IsXG4gIGlzQWxsT2YsXG4gIGlzQW55T2YsXG4gIGlzQXN5bmNUaHVua0FjdGlvbixcbiAgaXNEcmFmdDUgYXMgaXNEcmFmdCxcbiAgaXNGU0EgYXMgaXNGbHV4U3RhbmRhcmRBY3Rpb24sXG4gIGlzRnVsZmlsbGVkLFxuICBpc0ltbXV0YWJsZURlZmF1bHQsXG4gIGlzUGVuZGluZyxcbiAgaXNQbGFpbixcbiAgaXNSZWplY3RlZCxcbiAgaXNSZWplY3RlZFdpdGhWYWx1ZSxcbiAgbHJ1TWVtb2l6ZSxcbiAgbWluaVNlcmlhbGl6ZUVycm9yLFxuICBuYW5vaWQsXG4gIG9yaWdpbmFsMiBhcyBvcmlnaW5hbCxcbiAgcHJlcGFyZUF1dG9CYXRjaGVkLFxuICByZW1vdmVMaXN0ZW5lcixcbiAgdW53cmFwUmVzdWx0LFxuICB3ZWFrTWFwTWVtb2l6ZTIgYXMgd2Vha01hcE1lbW9pemVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1eC10b29sa2l0Lm1vZGVybi5tanMubWFwIiwiLy8gc3JjL2luZGV4LnRzXG5pbXBvcnQgKiBhcyBSZWFjdDIgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciBhcyB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcjIgfSBmcm9tIFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvd2l0aC1zZWxlY3Rvci5qc1wiO1xuXG4vLyBzcmMvdXRpbHMvcmVhY3QudHNcbmltcG9ydCAqIGFzIFJlYWN0T3JpZ2luYWwgZnJvbSBcInJlYWN0XCI7XG52YXIgUmVhY3QgPSAoXG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAdHMtaWdub3JlXG4gIFwiZGVmYXVsdFwiIGluIFJlYWN0T3JpZ2luYWwgPyBSZWFjdE9yaWdpbmFsW1wiZGVmYXVsdFwiXSA6IFJlYWN0T3JpZ2luYWxcbik7XG5cbi8vIHNyYy9jb21wb25lbnRzL0NvbnRleHQudHNcbnZhciBDb250ZXh0S2V5ID0gU3ltYm9sLmZvcihgcmVhY3QtcmVkdXgtY29udGV4dGApO1xudmFyIGdUID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxUaGlzIDogKFxuICAvKiBmYWxsIGJhY2sgdG8gYSBwZXItbW9kdWxlIHNjb3BlIChwcmUtOC4xIGJlaGF2aW91cikgaWYgYGdsb2JhbFRoaXNgIGlzIG5vdCBhdmFpbGFibGUgKi9cbiAge31cbik7XG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICBpZiAoIVJlYWN0LmNyZWF0ZUNvbnRleHQpXG4gICAgcmV0dXJuIHt9O1xuICBjb25zdCBjb250ZXh0TWFwID0gZ1RbQ29udGV4dEtleV0gPz8gKGdUW0NvbnRleHRLZXldID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gIGxldCByZWFsQ29udGV4dCA9IGNvbnRleHRNYXAuZ2V0KFJlYWN0LmNyZWF0ZUNvbnRleHQpO1xuICBpZiAoIXJlYWxDb250ZXh0KSB7XG4gICAgcmVhbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcmVhbENvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJlYWN0UmVkdXhcIjtcbiAgICB9XG4gICAgY29udGV4dE1hcC5zZXQoUmVhY3QuY3JlYXRlQ29udGV4dCwgcmVhbENvbnRleHQpO1xuICB9XG4gIHJldHVybiByZWFsQ29udGV4dDtcbn1cbnZhciBSZWFjdFJlZHV4Q29udGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBnZXRDb250ZXh0KCk7XG5cbi8vIHNyYy91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZS50c1xudmFyIG5vdEluaXRpYWxpemVkID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJ1U0VTIG5vdCBpbml0aWFsaXplZCFcIik7XG59O1xuXG4vLyBzcmMvaG9va3MvdXNlUmVkdXhDb250ZXh0LnRzXG5mdW5jdGlvbiBjcmVhdGVSZWR1eENvbnRleHRIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0MigpIHtcbiAgICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcImNvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICB9O1xufVxudmFyIHVzZVJlZHV4Q29udGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVSZWR1eENvbnRleHRIb29rKCk7XG5cbi8vIHNyYy9ob29rcy91c2VTZWxlY3Rvci50c1xudmFyIHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yID0gbm90SW5pdGlhbGl6ZWQ7XG52YXIgaW5pdGlhbGl6ZVVzZVNlbGVjdG9yID0gKGZuKSA9PiB7XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yID0gZm47XG59O1xudmFyIHJlZkVxdWFsaXR5ID0gKGEsIGIpID0+IGEgPT09IGI7XG5mdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIGNvbnN0IHVzZVJlZHV4Q29udGV4dDIgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZVJlZHV4Q29udGV4dCA6IGNyZWF0ZVJlZHV4Q29udGV4dEhvb2soY29udGV4dCk7XG4gIGNvbnN0IHVzZVNlbGVjdG9yMiA9IChzZWxlY3RvciwgZXF1YWxpdHlGbk9yT3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgeyBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHksIGRldk1vZGVDaGVja3MgPSB7fSB9ID0gdHlwZW9mIGVxdWFsaXR5Rm5Pck9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIiA/IHsgZXF1YWxpdHlGbjogZXF1YWxpdHlGbk9yT3B0aW9ucyB9IDogZXF1YWxpdHlGbk9yT3B0aW9ucztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uLFxuICAgICAgZ2V0U2VydmVyU3RhdGUsXG4gICAgICBzdGFiaWxpdHlDaGVjayxcbiAgICAgIGlkZW50aXR5RnVuY3Rpb25DaGVja1xuICAgIH0gPSB1c2VSZWR1eENvbnRleHQyKCk7XG4gICAgY29uc3QgZmlyc3RSdW4gPSBSZWFjdC51c2VSZWYodHJ1ZSk7XG4gICAgY29uc3Qgd3JhcHBlZFNlbGVjdG9yID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgICB7XG4gICAgICAgIFtzZWxlY3Rvci5uYW1lXShzdGF0ZSkge1xuICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrOiBmaW5hbElkZW50aXR5RnVuY3Rpb25DaGVjayxcbiAgICAgICAgICAgICAgc3RhYmlsaXR5Q2hlY2s6IGZpbmFsU3RhYmlsaXR5Q2hlY2tcbiAgICAgICAgICAgIH0gPSB7XG4gICAgICAgICAgICAgIHN0YWJpbGl0eUNoZWNrLFxuICAgICAgICAgICAgICBpZGVudGl0eUZ1bmN0aW9uQ2hlY2ssXG4gICAgICAgICAgICAgIC4uLmRldk1vZGVDaGVja3NcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZmluYWxTdGFiaWxpdHlDaGVjayA9PT0gXCJhbHdheXNcIiB8fCBmaW5hbFN0YWJpbGl0eUNoZWNrID09PSBcIm9uY2VcIiAmJiBmaXJzdFJ1bi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRvQ29tcGFyZSA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICAgICAgICAgICAgaWYgKCFlcXVhbGl0eUZuKHNlbGVjdGVkLCB0b0NvbXBhcmUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YWNrID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAoeyBzdGFjayB9ID0gZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgIFwiU2VsZWN0b3IgXCIgKyAoc2VsZWN0b3IubmFtZSB8fCBcInVua25vd25cIikgKyBcIiByZXR1cm5lZCBhIGRpZmZlcmVudCByZXN1bHQgd2hlbiBjYWxsZWQgd2l0aCB0aGUgc2FtZSBwYXJhbWV0ZXJzLiBUaGlzIGNhbiBsZWFkIHRvIHVubmVjZXNzYXJ5IHJlcmVuZGVycy5cXG5TZWxlY3RvcnMgdGhhdCByZXR1cm4gYSBuZXcgcmVmZXJlbmNlIChzdWNoIGFzIGFuIG9iamVjdCBvciBhbiBhcnJheSkgc2hvdWxkIGJlIG1lbW9pemVkOiBodHRwczovL3JlZHV4LmpzLm9yZy91c2FnZS9kZXJpdmluZy1kYXRhLXNlbGVjdG9ycyNvcHRpbWl6aW5nLXNlbGVjdG9ycy13aXRoLW1lbW9pemF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQyOiB0b0NvbXBhcmUsXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpbmFsSWRlbnRpdHlGdW5jdGlvbkNoZWNrID09PSBcImFsd2F5c1wiIHx8IGZpbmFsSWRlbnRpdHlGdW5jdGlvbkNoZWNrID09PSBcIm9uY2VcIiAmJiBmaXJzdFJ1bi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGlmIChzZWxlY3RlZCA9PT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhY2sgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICh7IHN0YWNrIH0gPSBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgXCJTZWxlY3RvciBcIiArIChzZWxlY3Rvci5uYW1lIHx8IFwidW5rbm93blwiKSArIFwiIHJldHVybmVkIHRoZSByb290IHN0YXRlIHdoZW4gY2FsbGVkLiBUaGlzIGNhbiBsZWFkIHRvIHVubmVjZXNzYXJ5IHJlcmVuZGVycy5cXG5TZWxlY3RvcnMgdGhhdCByZXR1cm4gdGhlIGVudGlyZSBzdGF0ZSBhcmUgYWxtb3N0IGNlcnRhaW5seSBhIG1pc3Rha2UsIGFzIHRoZXkgd2lsbCBjYXVzZSBhIHJlcmVuZGVyIHdoZW5ldmVyICphbnl0aGluZyogaW4gc3RhdGUgY2hhbmdlcy5cIixcbiAgICAgICAgICAgICAgICAgIHsgc3RhY2sgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFJ1bi5jdXJyZW50KVxuICAgICAgICAgICAgICBmaXJzdFJ1bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgfVtzZWxlY3Rvci5uYW1lXSxcbiAgICAgIFtzZWxlY3Rvciwgc3RhYmlsaXR5Q2hlY2ssIGRldk1vZGVDaGVja3Muc3RhYmlsaXR5Q2hlY2tdXG4gICAgKTtcbiAgICBjb25zdCBzZWxlY3RlZFN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IoXG4gICAgICBzdWJzY3JpcHRpb24uYWRkTmVzdGVkU3ViLFxuICAgICAgc3RvcmUuZ2V0U3RhdGUsXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZSB8fCBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgIHdyYXBwZWRTZWxlY3RvcixcbiAgICAgIGVxdWFsaXR5Rm5cbiAgICApO1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoc2VsZWN0ZWRTdGF0ZSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24odXNlU2VsZWN0b3IyLCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiB1c2VTZWxlY3RvcjJcbiAgfSk7XG4gIHJldHVybiB1c2VTZWxlY3RvcjI7XG59XG52YXIgdXNlU2VsZWN0b3IgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlU2VsZWN0b3JIb29rKCk7XG5cbi8vIHNyYy91dGlscy9yZWFjdC1pcy50c1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpO1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpO1xudmFyIFJFQUNUX1NFUlZFUl9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIik7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpO1xudmFyIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1xudmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtcbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFID0gU3ltYm9sLmZvcihcInJlYWN0LmNsaWVudC5yZWZlcmVuY2VcIik7XG52YXIgRm9yd2FyZFJlZiA9IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG52YXIgTWVtbyA9IFJFQUNUX01FTU9fVFlQRTtcbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX09GRlNDUkVFTl9UWVBFKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSBcIm9iamVjdFwiICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IC8vIFRoaXMgbmVlZHMgdG8gaW5jbHVkZSBhbGwgcG9zc2libGUgbW9kdWxlIHJlZmVyZW5jZSBvYmplY3RcbiAgICAvLyB0eXBlcyBzdXBwb3J0ZWQgYnkgYW55IEZsaWdodCBjb25maWd1cmF0aW9uIGFueXdoZXJlIHNpbmNlXG4gICAgLy8gd2UgZG9uJ3Qga25vdyB3aGljaCBGbGlnaHQgYnVpbGQgdGhpcyB3aWxsIGVuZCB1cCBiZWluZyB1c2VkXG4gICAgLy8gd2l0aC5cbiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFIHx8IHR5cGUuZ2V0TW9kdWxlSWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHR5cGVPZihvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgPT09IFwib2JqZWN0XCIgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgY29uc3QgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6IHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG9iamVjdC50eXBlO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zdCAkJHR5cGVvZlR5cGUgPSB0eXBlICYmIHR5cGUuJCR0eXBlb2Y7XG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1NFUlZFUl9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZlR5cGU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRToge1xuICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRDb25zdW1lcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc01lbW8ob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTUVNT19UWVBFO1xufVxuXG4vLyBzcmMvdXRpbHMvd2FybmluZy50c1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG59XG5cbi8vIHNyYy9jb25uZWN0L3ZlcmlmeVN1YnNlbGVjdG9ycy50c1xuZnVuY3Rpb24gdmVyaWZ5KHNlbGVjdG9yLCBtZXRob2ROYW1lKSB7XG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdmFsdWUgZm9yICR7bWV0aG9kTmFtZX0gaW4gY29ubmVjdC5gKTtcbiAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSBcIm1hcFN0YXRlVG9Qcm9wc1wiIHx8IG1ldGhvZE5hbWUgPT09IFwibWFwRGlzcGF0Y2hUb1Byb3BzXCIpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZWxlY3RvciwgXCJkZXBlbmRzT25Pd25Qcm9wc1wiKSkge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgYFRoZSBzZWxlY3RvciBmb3IgJHttZXRob2ROYW1lfSBvZiBjb25uZWN0IGRpZCBub3Qgc3BlY2lmeSBhIHZhbHVlIGZvciBkZXBlbmRzT25Pd25Qcm9wcy5gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gIHZlcmlmeShtYXBTdGF0ZVRvUHJvcHMsIFwibWFwU3RhdGVUb1Byb3BzXCIpO1xuICB2ZXJpZnkobWFwRGlzcGF0Y2hUb1Byb3BzLCBcIm1hcERpc3BhdGNoVG9Qcm9wc1wiKTtcbiAgdmVyaWZ5KG1lcmdlUHJvcHMsIFwibWVyZ2VQcm9wc1wiKTtcbn1cblxuLy8gc3JjL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LnRzXG5mdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIHtcbiAgYXJlU3RhdGVzRXF1YWwsXG4gIGFyZU93blByb3BzRXF1YWwsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbFxufSkge1xuICBsZXQgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgbGV0IHN0YXRlO1xuICBsZXQgb3duUHJvcHM7XG4gIGxldCBzdGF0ZVByb3BzO1xuICBsZXQgZGlzcGF0Y2hQcm9wcztcbiAgbGV0IG1lcmdlZFByb3BzO1xuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcylcbiAgICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKVxuICAgICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpXG4gICAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgY29uc3QgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBjb25zdCBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpXG4gICAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICBjb25zdCBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICBjb25zdCBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwoXG4gICAgICBuZXh0U3RhdGUsXG4gICAgICBzdGF0ZSxcbiAgICAgIG5leHRPd25Qcm9wcyxcbiAgICAgIG93blByb3BzXG4gICAgKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZClcbiAgICAgIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZClcbiAgICAgIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpXG4gICAgICByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIHtcbiAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgaW5pdE1lcmdlUHJvcHMsXG4gIC4uLm9wdGlvbnNcbn0pIHtcbiAgY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIGNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICBjb25zdCBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKTtcbiAgfVxuICByZXR1cm4gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn1cblxuLy8gc3JjL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycy50c1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBjb25zdCBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgY29uc3QgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9ICguLi5hcmdzKSA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yKC4uLmFyZ3MpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8vIHNyYy91dGlscy9pc1BsYWluT2JqZWN0LnRzXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuICBpZiAocHJvdG8gPT09IG51bGwpXG4gICAgcmV0dXJuIHRydWU7XG4gIGxldCBiYXNlUHJvdG8gPSBwcm90bztcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pICE9PSBudWxsKSB7XG4gICAgYmFzZVByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90byk7XG4gIH1cbiAgcmV0dXJuIHByb3RvID09PSBiYXNlUHJvdG87XG59XG5cbi8vIHNyYy91dGlscy92ZXJpZnlQbGFpbk9iamVjdC50c1xuZnVuY3Rpb24gdmVyaWZ5UGxhaW5PYmplY3QodmFsdWUsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgYCR7bWV0aG9kTmFtZX0oKSBpbiAke2Rpc3BsYXlOYW1lfSBtdXN0IHJldHVybiBhIHBsYWluIG9iamVjdC4gSW5zdGVhZCByZWNlaXZlZCAke3ZhbHVlfS5gXG4gICAgKTtcbiAgfVxufVxuXG4vLyBzcmMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy50c1xuZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gpIHtcbiAgICBjb25zdCBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoKTtcbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5mdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCB7IGRpc3BsYXlOYW1lIH0pIHtcbiAgICBjb25zdCBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIHZvaWQgMCk7XG4gICAgfTtcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgbGV0IHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59XG5cbi8vIHNyYy9jb25uZWN0L2ludmFsaWRBcmdGYWN0b3J5LnRzXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShhcmcsIG5hbWUpIHtcbiAgcmV0dXJuIChkaXNwYXRjaCwgb3B0aW9ucykgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJHt0eXBlb2YgYXJnfSBmb3IgJHtuYW1lfSBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICR7b3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZX0uYFxuICAgICk7XG4gIH07XG59XG5cbi8vIHNyYy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy50c1xuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeShtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSBcIm9iamVjdFwiID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChcbiAgICAoZGlzcGF0Y2gpID0+IChcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKVxuICAgIClcbiAgKSA6ICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KChkaXNwYXRjaCkgPT4gKHtcbiAgICBkaXNwYXRjaFxuICB9KSkgOiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSBcImZ1bmN0aW9uXCIgPyAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsIFwibWFwRGlzcGF0Y2hUb1Byb3BzXCIpXG4gICkgOiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShtYXBEaXNwYXRjaFRvUHJvcHMsIFwibWFwRGlzcGF0Y2hUb1Byb3BzXCIpO1xufVxuXG4vLyBzcmMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMudHNcbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudCgoKSA9PiAoe30pKSA6IHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09IFwiZnVuY3Rpb25cIiA/IChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgXCJtYXBTdGF0ZVRvUHJvcHNcIilcbiAgKSA6IGNyZWF0ZUludmFsaWRBcmdGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgXCJtYXBTdGF0ZVRvUHJvcHNcIik7XG59XG5cbi8vIHNyYy9jb25uZWN0L21lcmdlUHJvcHMudHNcbmZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7IC4uLm93blByb3BzLCAuLi5zdGF0ZVByb3BzLCAuLi5kaXNwYXRjaFByb3BzIH07XG59XG5mdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgeyBkaXNwbGF5TmFtZSwgYXJlTWVyZ2VkUHJvcHNFcXVhbCB9KSB7XG4gICAgbGV0IGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICBsZXQgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgY29uc3QgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpXG4gICAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgICAgICAgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCBcIm1lcmdlUHJvcHNcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHNGYWN0b3J5KG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gKCkgPT4gZGVmYXVsdE1lcmdlUHJvcHMgOiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gXCJmdW5jdGlvblwiID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkobWVyZ2VQcm9wcywgXCJtZXJnZVByb3BzXCIpO1xufVxuXG4vLyBzcmMvdXRpbHMvYmF0Y2gudHNcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxuLy8gc3JjL3V0aWxzL1N1YnNjcmlwdGlvbi50c1xuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICBsZXQgZmlyc3QgPSBudWxsO1xuICBsZXQgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeSgpIHtcbiAgICAgIGRlZmF1bHROb29wQmF0Y2goKCkgPT4ge1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0KCkge1xuICAgICAgY29uc3QgbGlzdGVuZXJzID0gW107XG4gICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcbiAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeSgpIHtcbiAgfSxcbiAgZ2V0OiAoKSA9PiBbXVxufTtcbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIGxldCB1bnN1YnNjcmliZTtcbiAgbGV0IGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIGxldCBzdWJzY3JpcHRpb25zQW1vdW50ID0gMDtcbiAgbGV0IHNlbGZTdWJzY3JpYmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRyeVN1YnNjcmliZSgpO1xuICAgIGNvbnN0IGNsZWFudXBMaXN0ZW5lciA9IGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgIGxldCByZW1vdmVkID0gZmFsc2U7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghcmVtb3ZlZCkge1xuICAgICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cExpc3RlbmVyKCk7XG4gICAgICAgIHRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBzZWxmU3Vic2NyaWJlZDtcbiAgfVxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgc3Vic2NyaXB0aW9uc0Ftb3VudCsrO1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBzdWJzY3JpcHRpb25zQW1vdW50LS07XG4gICAgaWYgKHVuc3Vic2NyaWJlICYmIHN1YnNjcmlwdGlvbnNBbW91bnQgPT09IDApIHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICB1bnN1YnNjcmliZSA9IHZvaWQgMDtcbiAgICAgIGxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlU2VsZigpIHtcbiAgICBpZiAoIXNlbGZTdWJzY3JpYmVkKSB7XG4gICAgICBzZWxmU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmVTZWxmKCkge1xuICAgIGlmIChzZWxmU3Vic2NyaWJlZCkge1xuICAgICAgc2VsZlN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIHRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmU6IHRyeVN1YnNjcmliZVNlbGYsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlU2VsZixcbiAgICBnZXRMaXN0ZW5lcnM6ICgpID0+IGxpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufVxuXG4vLyBzcmMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC50c1xudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIpO1xudmFyIGlzUmVhY3ROYXRpdmUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSBcIlJlYWN0TmF0aXZlXCI7XG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGNhblVzZURPTSB8fCBpc1JlYWN0TmF0aXZlID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuXG4vLyBzcmMvdXRpbHMvc2hhbGxvd0VxdWFsLnRzXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIHNyYy91dGlscy9ob2lzdFN0YXRpY3MudHNcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICQkdHlwZW9mOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICQkdHlwZW9mOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge1xuICBbRm9yd2FyZFJlZl06IEZPUldBUkRfUkVGX1NUQVRJQ1MsXG4gIFtNZW1vXTogTUVNT19TVEFUSUNTXG59O1xuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgaWYgKGlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfVxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFtcIiQkdHlwZW9mXCJdXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgY29uc3QgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIGNvbnN0IHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY29ubmVjdC50c3hcbnZhciB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IG5vdEluaXRpYWxpemVkO1xudmFyIGluaXRpYWxpemVDb25uZWN0ID0gKGZuKSA9PiB7XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZm47XG59O1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSAoQ29tcCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiBlZmZlY3RGdW5jKC4uLmVmZmVjdEFyZ3MpLCBkZXBlbmRlbmNpZXMpO1xufVxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyKSB7XG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgfTtcbiAgbGV0IGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIGxldCBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlIHx8ICFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBsZXQgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IoXG4gICAgICAgIGxhdGVzdFN0b3JlU3RhdGUsXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH1cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7XG4gICAgICBhZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIoKTtcbiAgICB9XG4gIH07XG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuICBjb25zdCB1bnN1YnNjcmliZVdyYXBwZXIgPSAoKSA9PiB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCB7XG4gIC8vIFRoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQsIHNvIFRTIGRvZXNuJ3QgbGlrZSB1cyBkZXN0cnVjdHVyaW5nIHRoaXMgdG8gY2hlY2sgaXRzIGV4aXN0ZW5jZS5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdXJlLFxuICBhcmVTdGF0ZXNFcXVhbCA9IHN0cmljdEVxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIC8vIHVzZSBSZWFjdCdzIGZvcndhcmRSZWYgdG8gZXhwb3NlIGEgcmVmIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICBmb3J3YXJkUmVmID0gZmFsc2UsXG4gIC8vIHRoZSBjb250ZXh0IGNvbnN1bWVyIHRvIHVzZVxuICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHRcbn0gPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHB1cmUgIT09IHZvaWQgMCAmJiAhaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbikge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IHRydWU7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICAnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKTtcbiAgY29uc3Qgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpO1xuICBjb25zdCB3cmFwV2l0aENvbm5lY3QgPSAoV3JhcHBlZENvbXBvbmVudCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSAvKiBAX19QVVJFX18gKi8gaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgaWYgKCFpc1ZhbGlkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFlvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGNvbm5lY3QuIEluc3RlYWQgcmVjZWl2ZWQgJHtzdHJpbmdpZnlDb21wb25lbnQoXG4gICAgICAgICAgICBXcmFwcGVkQ29tcG9uZW50XG4gICAgICAgICAgKX1gXG4gICAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgXCJDb21wb25lbnRcIjtcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGBDb25uZWN0KCR7d3JhcHBlZENvbXBvbmVudE5hbWV9KWA7XG4gICAgY29uc3Qgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IHtcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgY29uc3QgW3Byb3BzQ29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCB7IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYyLCAuLi53cmFwcGVyUHJvcHMyIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmMiwgd3JhcHBlclByb3BzMl07XG4gICAgICB9LCBbcHJvcHNdKTtcbiAgICAgIGNvbnN0IENvbnRleHRUb1VzZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBsZXQgUmVzdWx0Q29udGV4dCA9IENvbnRleHQ7XG4gICAgICAgIGlmIChwcm9wc0NvbnRleHQ/LkNvbnN1bWVyKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IC8qIEBfX1BVUkVfXyAqLyBpc0NvbnRleHRDb25zdW1lcihcbiAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIllvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIGFzIGBwcm9wcy5jb250ZXh0YFwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZXN1bHRDb250ZXh0ID0gcHJvcHNDb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVzdWx0Q29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTtcbiAgICAgIGNvbnN0IGNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTtcbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgY29uc3QgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBmaW5kIFwic3RvcmVcIiBpbiB0aGUgY29udGV4dCBvZiBcIiR7ZGlzcGxheU5hbWV9XCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIG9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvICR7ZGlzcGxheU5hbWV9IGluIGNvbm5lY3Qgb3B0aW9ucy5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgY29uc3QgZ2V0U2VydmVyU3RhdGUgPSBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA/IGNvbnRleHRWYWx1ZS5nZXRTZXJ2ZXJTdGF0ZSA6IHN0b3JlLmdldFN0YXRlO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc1NlbGVjdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuICAgICAgY29uc3QgW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic10gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpXG4gICAgICAgICAgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uMiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihcbiAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyB2b2lkIDAgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5vdGlmeU5lc3RlZFN1YnMyID0gc3Vic2NyaXB0aW9uMi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uMik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uMiwgbm90aWZ5TmVzdGVkU3ViczJdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pO1xuICAgICAgY29uc3Qgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmNvbnRleHRWYWx1ZSxcbiAgICAgICAgICBzdWJzY3JpcHRpb25cbiAgICAgICAgfTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7XG4gICAgICBjb25zdCBsYXN0Q2hpbGRQcm9wcyA9IFJlYWN0LnVzZVJlZih2b2lkIDApO1xuICAgICAgY29uc3QgbGFzdFdyYXBwZXJQcm9wcyA9IFJlYWN0LnVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IFJlYWN0LnVzZVJlZih2b2lkIDApO1xuICAgICAgY29uc3QgcmVuZGVySXNTY2hlZHVsZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgaXNNb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICAgIGNvbnN0IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSBSZWFjdC51c2VSZWYoXG4gICAgICAgIHZvaWQgMFxuICAgICAgKTtcbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH0sIFtdKTtcbiAgICAgIGNvbnN0IGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH0sIFtzdG9yZSwgd3JhcHBlclByb3BzXSk7XG4gICAgICBjb25zdCBzdWJzY3JpYmVGb3JSZWFjdCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJzY3JpYmUgPSAocmVhY3RMaXN0ZW5lcikgPT4ge1xuICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN1YnNjcmliZVVwZGF0ZXMoXG4gICAgICAgICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNoaWxkUHJvcHNTZWxlY3RvcixcbiAgICAgICAgICAgIGxhc3RXcmFwcGVyUHJvcHMsXG4gICAgICAgICAgICBsYXN0Q2hpbGRQcm9wcyxcbiAgICAgICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLFxuICAgICAgICAgICAgaXNNb3VudGVkLFxuICAgICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSxcbiAgICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMsXG4gICAgICAgICAgICByZWFjdExpc3RlbmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZTtcbiAgICAgIH0sIFtzdWJzY3JpcHRpb25dKTtcbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMsXG4gICAgICAgIGxhc3RDaGlsZFByb3BzLFxuICAgICAgICByZW5kZXJJc1NjaGVkdWxlZCxcbiAgICAgICAgd3JhcHBlclByb3BzLFxuICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLFxuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzXG4gICAgICBdKTtcbiAgICAgIGxldCBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgICAgICAgIC8vIFRPRE8gV2UncmUgcGFzc2luZyB0aHJvdWdoIGEgYmlnIHdyYXBwZXIgdGhhdCBkb2VzIGEgYnVuY2ggb2YgZXh0cmEgc2lkZSBlZmZlY3RzIGJlc2lkZXMgc3Vic2NyaWJpbmdcbiAgICAgICAgICBzdWJzY3JpYmVGb3JSZWFjdCxcbiAgICAgICAgICAvLyBUT0RPIFRoaXMgaXMgaW5jcmVkaWJseSBoYWNreS4gV2UndmUgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHN0b3JlIHVwZGF0ZSBhbmQgY2FsY3VsYXRlZCBuZXcgY2hpbGQgcHJvcHMsXG4gICAgICAgICAgLy8gVE9ETyBhbmQgd2UncmUganVzdCBwYXNzaW5nIHRoYXQgdGhyb3VnaCBzbyBpdCB0cmlnZ2VycyBhIHJlLXJlbmRlciBmb3IgdXMgcmF0aGVyIHRoYW4gcmVseWluZyBvbiBgdVNFU2AuXG4gICAgICAgICAgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yLFxuICAgICAgICAgIGdldFNlcnZlclN0YXRlID8gKCkgPT4gY2hpbGRQcm9wc1NlbGVjdG9yKGdldFNlcnZlclN0YXRlKCksIHdyYXBwZXJQcm9wcykgOiBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3JcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIGVyci5tZXNzYWdlICs9IGBcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XG4ke2xhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFja31cblxuYDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdm9pZCAwO1xuICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSB2b2lkIDA7XG4gICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgfSk7XG4gICAgICBjb25zdCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAuLi5hY3R1YWxDaGlsZFByb3BzLFxuICAgICAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pO1xuICAgICAgY29uc3QgcmVuZGVyZWRDaGlsZCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwgeyB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH1cbiAgICBjb25zdCBfQ29ubmVjdCA9IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKTtcbiAgICBjb25zdCBDb25uZWN0ID0gX0Nvbm5lY3Q7XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gQ29ubmVjdEZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIGNvbnN0IF9mb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKFxuICAgICAgICBmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIHsgLi4ucHJvcHMsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZiB9KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGZvcndhcmRlZCA9IF9mb3J3YXJkZWQ7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaG9pc3ROb25SZWFjdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBob2lzdE5vblJlYWN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbiAgcmV0dXJuIHdyYXBXaXRoQ29ubmVjdDtcbn1cbnZhciBjb25uZWN0X2RlZmF1bHQgPSBjb25uZWN0O1xuXG4vLyBzcmMvY29tcG9uZW50cy9Qcm92aWRlci50c3hcbmZ1bmN0aW9uIFByb3ZpZGVyKHtcbiAgc3RvcmUsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICBzZXJ2ZXJTdGF0ZSxcbiAgc3RhYmlsaXR5Q2hlY2sgPSBcIm9uY2VcIixcbiAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrID0gXCJvbmNlXCJcbn0pIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHZvaWQgMCxcbiAgICAgIHN0YWJpbGl0eUNoZWNrLFxuICAgICAgaWRlbnRpdHlGdW5jdGlvbkNoZWNrXG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzZXJ2ZXJTdGF0ZSwgc3RhYmlsaXR5Q2hlY2ssIGlkZW50aXR5RnVuY3Rpb25DaGVja10pO1xuICBjb25zdCBwcmV2aW91c1N0YXRlID0gUmVhY3QudXNlTWVtbygoKSA9PiBzdG9yZS5nZXRTdGF0ZSgpLCBbc3RvcmVdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgeyBzdWJzY3JpcHRpb24gfSA9IGNvbnRleHRWYWx1ZTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSB2b2lkIDA7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICBjb25zdCBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHRWYWx1ZSB9LCBjaGlsZHJlbik7XG59XG52YXIgUHJvdmlkZXJfZGVmYXVsdCA9IFByb3ZpZGVyO1xuXG4vLyBzcmMvaG9va3MvdXNlU3RvcmUudHNcbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0MiA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlUmVkdXhDb250ZXh0IDogKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjcmVhdGVSZWR1eENvbnRleHRIb29rKGNvbnRleHQpXG4gICk7XG4gIGNvbnN0IHVzZVN0b3JlMiA9ICgpID0+IHtcbiAgICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQyKCk7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHVzZVN0b3JlMiwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gdXNlU3RvcmUyXG4gIH0pO1xuICByZXR1cm4gdXNlU3RvcmUyO1xufVxudmFyIHVzZVN0b3JlID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVN0b3JlSG9vaygpO1xuXG4vLyBzcmMvaG9va3MvdXNlRGlzcGF0Y2gudHNcbmZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlU3RvcmUyID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgY29uc3QgdXNlRGlzcGF0Y2gyID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUyKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHVzZURpc3BhdGNoMiwge1xuICAgIHdpdGhUeXBlczogKCkgPT4gdXNlRGlzcGF0Y2gyXG4gIH0pO1xuICByZXR1cm4gdXNlRGlzcGF0Y2gyO1xufVxudmFyIHVzZURpc3BhdGNoID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZURpc3BhdGNoSG9vaygpO1xuXG4vLyBzcmMvZXhwb3J0cy50c1xudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDtcblxuLy8gc3JjL2luZGV4LnRzXG5pbml0aWFsaXplVXNlU2VsZWN0b3IodXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IyKTtcbmluaXRpYWxpemVDb25uZWN0KFJlYWN0Mi51c2VTeW5jRXh0ZXJuYWxTdG9yZSk7XG5leHBvcnQge1xuICBQcm92aWRlcl9kZWZhdWx0IGFzIFByb3ZpZGVyLFxuICBSZWFjdFJlZHV4Q29udGV4dCxcbiAgYmF0Y2gsXG4gIGNvbm5lY3RfZGVmYXVsdCBhcyBjb25uZWN0LFxuICBjcmVhdGVEaXNwYXRjaEhvb2ssXG4gIGNyZWF0ZVNlbGVjdG9ySG9vayxcbiAgY3JlYXRlU3RvcmVIb29rLFxuICBzaGFsbG93RXF1YWwsXG4gIHVzZURpc3BhdGNoLFxuICB1c2VTZWxlY3RvcixcbiAgdXNlU3RvcmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yZWR1eC5tanMubWFwIiwiLy8gc3JjL3V0aWxzL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UudHNcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gYE1pbmlmaWVkIFJlZHV4IGVycm9yICMke2NvZGV9OyB2aXNpdCBodHRwczovL3JlZHV4LmpzLm9yZy9FcnJvcnM/Y29kZT0ke2NvZGV9IGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuIGA7XG59XG5cbi8vIHNyYy91dGlscy9zeW1ib2wtb2JzZXJ2YWJsZS50c1xudmFyICQkb2JzZXJ2YWJsZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8IFwiQEBvYnNlcnZhYmxlXCIpKCk7XG52YXIgc3ltYm9sX29ic2VydmFibGVfZGVmYXVsdCA9ICQkb2JzZXJ2YWJsZTtcblxuLy8gc3JjL3V0aWxzL2FjdGlvblR5cGVzLnRzXG52YXIgcmFuZG9tU3RyaW5nID0gKCkgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KFwiXCIpLmpvaW4oXCIuXCIpO1xudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBgQEByZWR1eC9JTklUJHsvKiBAX19QVVJFX18gKi8gcmFuZG9tU3RyaW5nKCl9YCxcbiAgUkVQTEFDRTogYEBAcmVkdXgvUkVQTEFDRSR7LyogQF9fUFVSRV9fICovIHJhbmRvbVN0cmluZygpfWAsXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiAoKSA9PiBgQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTiR7cmFuZG9tU3RyaW5nKCl9YFxufTtcbnZhciBhY3Rpb25UeXBlc19kZWZhdWx0ID0gQWN0aW9uVHlwZXM7XG5cbi8vIHNyYy91dGlscy9pc1BsYWluT2JqZWN0LnRzXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBsZXQgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG8gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IG51bGw7XG59XG5cbi8vIHNyYy91dGlscy9raW5kT2YudHNcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMClcbiAgICByZXR1cm4gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKHZhbCA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJudWxsXCI7XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgIGNhc2UgXCJmdW5jdGlvblwiOiB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSlcbiAgICByZXR1cm4gXCJhcnJheVwiO1xuICBpZiAoaXNEYXRlKHZhbCkpXG4gICAgcmV0dXJuIFwiZGF0ZVwiO1xuICBpZiAoaXNFcnJvcih2YWwpKVxuICAgIHJldHVybiBcImVycm9yXCI7XG4gIGNvbnN0IGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSBcIlN5bWJvbFwiOlxuICAgIGNhc2UgXCJQcm9taXNlXCI6XG4gICAgY2FzZSBcIldlYWtNYXBcIjpcbiAgICBjYXNlIFwiV2Vha1NldFwiOlxuICAgIGNhc2UgXCJNYXBcIjpcbiAgICBjYXNlIFwiU2V0XCI6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG59XG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09IFwiZnVuY3Rpb25cIiA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3Iuc3RhY2tUcmFjZUxpbWl0ID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHZhbC5zZXREYXRlID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIGxldCB0eXBlT2ZWYWwgPSB0eXBlb2YgdmFsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8vIHNyYy9jcmVhdGVTdG9yZS50c1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMikgOiBgRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJyR7a2luZE9mKHJlZHVjZXIpfSdgKTtcbiAgfVxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGVuaGFuY2VyID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIGVuaGFuY2VyID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiBcIkl0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvIGNyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtIHRvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS5cIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB2b2lkIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBgRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YoZW5oYW5jZXIpfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cbiAgbGV0IGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgbGV0IGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICBsZXQgY3VycmVudExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgbGV0IGxpc3RlbmVySWRDb3VudGVyID0gMDtcbiAgbGV0IGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyLCBrZXkpID0+IHtcbiAgICAgICAgbmV4dExpc3RlbmVycy5zZXQoa2V5LCBsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogXCJZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiBUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuIFBhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBgRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YobGlzdGVuZXIpfSdgKTtcbiAgICB9XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogXCJZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy5cIik7XG4gICAgfVxuICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBjb25zdCBsaXN0ZW5lcklkID0gbGlzdGVuZXJJZENvdW50ZXIrKztcbiAgICBuZXh0TGlzdGVuZXJzLnNldChsaXN0ZW5lcklkLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiBcIllvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy5cIik7XG4gICAgICB9XG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVySWQpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBgQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICcke2tpbmRPZihhY3Rpb24pfScuIFlvdSBtYXkgbmVlZCB0byBhZGQgbWlkZGxld2FyZSB0byB5b3VyIHN0b3JlIHNldHVwIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBvdGhlciB2YWx1ZXMsIHN1Y2ggYXMgJ3JlZHV4LXRodW5rJyB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgZnVuY3Rpb25zLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjbWlkZGxld2FyZSBhbmQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTYtYXN5bmMtbG9naWMjdXNpbmctdGhlLXJlZHV4LXRodW5rLW1pZGRsZXdhcmUgZm9yIGV4YW1wbGVzLmApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTcpIDogYEFjdGlvbiBcInR5cGVcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnJHtraW5kT2YoYWN0aW9uLnR5cGUpfScuIFZhbHVlIHdhczogJyR7YWN0aW9uLnR5cGV9JyAoc3RyaW5naWZpZWQpYCk7XG4gICAgfVxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6IFwiUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLlwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMCkgOiBgRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YobmV4dFJlZHVjZXIpfWApO1xuICAgIH1cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgY29uc3Qgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gXCJvYmplY3RcIiB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDExKSA6IGBFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJyR7a2luZE9mKG9ic2VydmVyKX0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGNvbnN0IG9ic2VydmVyQXNPYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgICAgIGlmIChvYnNlcnZlckFzT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJBc09ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBbc3ltYm9sX29ic2VydmFibGVfZGVmYXVsdF0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuSU5JVFxuICB9KTtcbiAgY29uc3Qgc3RvcmUgPSB7XG4gICAgZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyLFxuICAgIFtzeW1ib2xfb2JzZXJ2YWJsZV9kZWZhdWx0XTogb2JzZXJ2YWJsZVxuICB9O1xuICByZXR1cm4gc3RvcmU7XG59XG5mdW5jdGlvbiBsZWdhY3lfY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHJldHVybiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpO1xufVxuXG4vLyBzcmMvdXRpbHMvd2FybmluZy50c1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG59XG5cbi8vIHNyYy9jb21iaW5lUmVkdWNlcnMudHNcbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIGNvbnN0IHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICBjb25zdCBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzX2RlZmF1bHQuSU5JVCA/IFwicHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlXCIgOiBcInByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyXCI7XG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gXCJTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLlwiO1xuICB9XG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBgVGhlICR7YXJndW1lbnROYW1lfSBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJHtraW5kT2YoaW5wdXRTdGF0ZSl9XCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcga2V5czogXCIke3JlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpfVwiYDtcbiAgfVxuICBjb25zdCB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcigoa2V5KSA9PiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBhY3Rpb25UeXBlc19kZWZhdWx0LlJFUExBQ0UpXG4gICAgcmV0dXJuO1xuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBgVW5leHBlY3RlZCAke3VuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyBcImtleXNcIiA6IFwia2V5XCJ9IFwiJHt1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKX1cIiBmb3VuZCBpbiAke2FyZ3VtZW50TmFtZX0uIEV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIke3JlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpfVwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLmA7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih2b2lkIDAsIHtcbiAgICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuSU5JVFxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMikgOiBgVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcIiR7a2V5fVwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIElmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIHlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih2b2lkIDAsIHtcbiAgICAgIHR5cGU6IGFjdGlvblR5cGVzX2RlZmF1bHQuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMykgOiBgVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcIiR7a2V5fVwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIERvbid0IHRyeSB0byBoYW5kbGUgJyR7YWN0aW9uVHlwZXNfZGVmYXVsdC5JTklUfScgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiBuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuYCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICBjb25zdCByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgY29uc3QgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gcmVkdWNlcktleXNbaV07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHdhcm5pbmcoYE5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIiR7a2V5fVwiYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuICBjb25zdCBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG4gIGxldCB1bmV4cGVjdGVkS2V5Q2FjaGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuICBsZXQgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUgPSB7fSwgYWN0aW9uKSB7XG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tpXTtcbiAgICAgIGNvbnN0IHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW2tleV07XG4gICAgICBjb25zdCBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVba2V5XTtcbiAgICAgIGNvbnN0IG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE0KSA6IGBXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlICR7YWN0aW9uVHlwZSA/IGBcIiR7U3RyaW5nKGFjdGlvblR5cGUpfVwiYCA6IFwiKHVua25vd24gdHlwZSlcIn0sIHRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXCIke2tleX1cIiByZXR1cm5lZCB1bmRlZmluZWQuIFRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuYCk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVba2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuLy8gc3JjL2JpbmRBY3Rpb25DcmVhdG9ycy50c1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmdzKSk7XG4gIH07XG59XG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09IFwib2JqZWN0XCIgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBgYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJyR7a2luZE9mKGFjdGlvbkNyZWF0b3JzKX0nLiBEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiP2ApO1xuICB9XG4gIGNvbnN0IGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICBjb25zdCBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLy8gc3JjL2NvbXBvc2UudHNcbmZ1bmN0aW9uIGNvbXBvc2UoLi4uZnVuY3MpIHtcbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoYXJnKSA9PiBhcmc7XG4gIH1cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuICByZXR1cm4gZnVuY3MucmVkdWNlKChhLCBiKSA9PiAoLi4uYXJncykgPT4gYShiKC4uLmFyZ3MpKSk7XG59XG5cbi8vIHNyYy9hcHBseU1pZGRsZXdhcmUudHNcbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykge1xuICByZXR1cm4gKGNyZWF0ZVN0b3JlMikgPT4gKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZTIocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICAgIGxldCBkaXNwYXRjaCA9ICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6IFwiRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLlwiKTtcbiAgICB9O1xuICAgIGNvbnN0IG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICBkaXNwYXRjaDogKGFjdGlvbiwgLi4uYXJncykgPT4gZGlzcGF0Y2goYWN0aW9uLCAuLi5hcmdzKVxuICAgIH07XG4gICAgY29uc3QgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoKG1pZGRsZXdhcmUpID0+IG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSkpO1xuICAgIGRpc3BhdGNoID0gY29tcG9zZSguLi5jaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdG9yZSxcbiAgICAgIGRpc3BhdGNoXG4gICAgfTtcbiAgfTtcbn1cblxuLy8gc3JjL3V0aWxzL2lzQWN0aW9uLnRzXG5mdW5jdGlvbiBpc0FjdGlvbihhY3Rpb24pIHtcbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QoYWN0aW9uKSAmJiBcInR5cGVcIiBpbiBhY3Rpb24gJiYgdHlwZW9mIGFjdGlvbi50eXBlID09PSBcInN0cmluZ1wiO1xufVxuZXhwb3J0IHtcbiAgYWN0aW9uVHlwZXNfZGVmYXVsdCBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLFxuICBhcHBseU1pZGRsZXdhcmUsXG4gIGJpbmRBY3Rpb25DcmVhdG9ycyxcbiAgY29tYmluZVJlZHVjZXJzLFxuICBjb21wb3NlLFxuICBjcmVhdGVTdG9yZSxcbiAgaXNBY3Rpb24sXG4gIGlzUGxhaW5PYmplY3QsXG4gIGxlZ2FjeV9jcmVhdGVTdG9yZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4Lm1qcy5tYXAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsge1wiMTE3XCI6XCJiZDhiNjk5OWI4NGQ2OTE5MTA0Y1wiLFwiNDMzXCI6XCI4YjJlYjAxNzQ3ZGQ0YTg2Y2RhMVwiLFwiNTM3XCI6XCI3ZDAyYWNiOThhYzk0OGE3MTQ0YVwiLFwiNTgyXCI6XCI1ZWJkNzc3ZmNkYWIyMzNmODgzMVwiLFwiNjY5XCI6XCIwZTkyNTI4ZjZmZmJjNjA1OGU3OFwiLFwiNzQ0XCI6XCJiY2U4NjJkZjU0NzQyMzcwNTllY1wiLFwiOTg2XCI6XCI0MTkyNzVhMmRkY2EzN2ViMjI0N1wifVtjaHVua0lkXSArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiY3NzL1wiICsgY2h1bmtJZCArIFwiLlwiICsge1wiMTE3XCI6XCJhZWZmNTZiNVwiLFwiNTM3XCI6XCIzZmMyZmRkZFwiLFwiNjY5XCI6XCJkZWM0NjU2OVwiLFwiNzQ0XCI6XCI4ZmQ0MjUyNVwifVtjaHVua0lkXSArIFwiLmNzc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblxufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3BldF8xXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3BldF8xXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJpbXBvcnQge1xyXG4gIEZDLFxyXG4gIFByb3BzV2l0aENoaWxkcmVuLFxyXG4gIGNyZWF0ZUNvbnRleHQsXHJcbiAgdXNlQ2FsbGJhY2ssXHJcbiAgdXNlTWVtbyxcclxuICB1c2VTdGF0ZSxcclxufSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIEVudW1UaGVtZSB7XHJcbiAgTElHSFQgPSBcImxpZ2h0XCIsXHJcbiAgREFSSyA9IFwiZGFya1wiLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxUaGVtZUNvbnRleHRQcm9wcz4oe30pO1xyXG5cclxuaW50ZXJmYWNlIFRoZW1lQ29udGV4dFByb3BzIHtcclxuICB0aGVtZT86IEVudW1UaGVtZTtcclxuICB0b2dnbGVUaGVtZT86ICgpID0+IHZvaWQ7XHJcbiAgaXNEYXJrPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfVEhFTUVfS0VZID0gXCJ0aGVtZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRoZW1lUHJvdmlkZXI6IEZDPFByb3BzV2l0aENoaWxkcmVuPHt9Pj4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgY29uc3QgW2lzRGFyaywgc2V0SXNEYXJrXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICBjb25zdCBbdGhlbWUsIHNldFRoZW1lXSA9IHVzZVN0YXRlPEVudW1UaGVtZT4oXHJcbiAgICAobG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9USEVNRV9LRVkpIGFzIEVudW1UaGVtZSkgfHxcclxuICAgICAgRW51bVRoZW1lLkxJR0hULFxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZVRoZW1lID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXHJcbiAgICAgIExPQ0FMX1NUT1JBR0VfVEhFTUVfS0VZLFxyXG4gICAgICB0aGVtZSA9PT0gRW51bVRoZW1lLkxJR0hUID8gRW51bVRoZW1lLkRBUksgOiBFbnVtVGhlbWUuTElHSFQsXHJcbiAgICApO1xyXG4gICAgc2V0SXNEYXJrKHRoZW1lID09PSBFbnVtVGhlbWUuTElHSFQgPyBmYWxzZSA6IHRydWUpO1xyXG4gICAgc2V0VGhlbWUodGhlbWUgPT09IEVudW1UaGVtZS5MSUdIVCA/IEVudW1UaGVtZS5EQVJLIDogRW51bVRoZW1lLkxJR0hUKTtcclxuICB9LCBbdGhlbWVdKTtcclxuXHJcbiAgY29uc3QgbWVtb1ZhbHVlID0gdXNlTWVtbyhcclxuICAgICgpID0+ICh7XHJcbiAgICAgIHRoZW1lLFxyXG4gICAgICBpc0RhcmssXHJcbiAgICAgIHRvZ2dsZVRoZW1lLFxyXG4gICAgfSksXHJcbiAgICBbdGhlbWUsIGlzRGFyaywgdG9nZ2xlVGhlbWVdLFxyXG4gICk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttZW1vVmFsdWV9PlxyXG4gICAgICA8PntjaGlsZHJlbn08Lz5cclxuICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi4vdWkvVGhlbWVDb250ZXh0J1xyXG5cclxuXHJcbmNvbnN0IHVzZVRoZW1lID0gKCkgPT4ge1xyXG5cdHJldHVybiB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcclxufVxyXG5cclxuZXhwb3J0IHsgdXNlVGhlbWUgfVxyXG5cclxuIiwiaW1wb3J0IHsgQ1NTUHJvcGVydGllcywgRkMsIEhUTUxBdHRyaWJ1dGVzLCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9GbGV4Q29udGFpbmVyLm1vZHVsZS5zY3NzXCI7XHJcblxyXG5pbnRlcmZhY2UgRmxleENvbnRhaW5lclByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxuICBwcm9wcz86IEhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PjtcclxuICBzdHlsZVByb3BzPzogQ1NTUHJvcGVydGllcztcclxufVxyXG5cclxuY29uc3QgRmxleENvbnRhaW5lcjogRkM8UHJvcHNXaXRoQ2hpbGRyZW48RmxleENvbnRhaW5lclByb3BzPj4gPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG4gIHNvbWVDbGFzc2VzID0gXCJcIixcclxuICBzdHlsZVByb3BzID0ge30sXHJcbiAgLi4ucHJvcHNcclxufSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhtYWluQ2xhc3Nlcy5GbGV4Q29udGFpbmVyLCB7fSwgW3NvbWVDbGFzc2VzXSl9XHJcbiAgICAgIHN0eWxlPXtzdHlsZVByb3BzfVxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGbGV4Q29udGFpbmVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIkZsZXhDb250YWluZXJcIjpcIkptYkM3U0JHXCJ9OyIsImltcG9ydCB7IEZDLCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9Db250ZW50Lm1vZHVsZS5zY3NzXCI7XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudFByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgQ29udGVudDogRkM8UHJvcHNXaXRoQ2hpbGRyZW48Q29udGVudFByb3BzPj4gPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG4gIHNvbWVDbGFzc2VzLFxyXG4gIC4uLnByb3BzXHJcbn0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMobWFpbkNsYXNzZXMuQ29udGVudCwge30sIFtzb21lQ2xhc3Nlc10pfVxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250ZW50O1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIkNvbnRlbnRcIjpcImpJelhJcnJmXCJ9OyIsImltcG9ydCB7IEZDLCBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5cclxuaW50ZXJmYWNlIFBvcnRhbFByb3BzIHtcclxuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcclxuICBub2RlPzogRWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnQ7XHJcbn1cclxuXHJcbmNvbnN0IFBvcnRhbDogRkM8UG9ydGFsUHJvcHM+ID0gKHsgY2hpbGRyZW4sIG5vZGUgPSBkb2N1bWVudC5ib2R5IH0pID0+IHtcclxuICByZXR1cm4gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBub2RlKSBhcyBSZWFjdE5vZGU7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7XHJcbiIsImltcG9ydCB7IEZDLCBSZWFjdE5vZGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwic2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXNcIjtcclxuaW1wb3J0IG1haW5DbGFzc2VzIGZyb20gXCIuL01vZGFsLm1vZHVsZS5zY3NzXCI7XHJcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gXCJzaGFyZWQvdWkvUG9ydGFsXCI7XHJcbmltcG9ydCB7IHVzZU1vZGFsIH0gZnJvbSBcImFwcC9wcm92aWRlcnMvTW9kYWxQcm92aWRlclwiO1xyXG5cclxuaW50ZXJmYWNlIE1vZGFsUHJvcHMge1xyXG4gIHNvbWVDbGFzc2VzPzogc3RyaW5nO1xyXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XHJcbiAgaWQ6IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgTW9kYWw6IEZDPE1vZGFsUHJvcHM+ID0gKHsgc29tZUNsYXNzZXMsIGNoaWxkcmVuLCBpZCB9KSA9PiB7XHJcbiAgY29uc3QgeyBpc01vZGFsT3BlbiwgdG9nZ2xlTW9kYWxIYW5kbGVyLCBtb2RhbElkIH0gPSB1c2VNb2RhbCgpO1xyXG4gIGNvbnN0IFtjYW5DbG9zZSwgc2V0Q2FuQ2xvc2VdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIGNvbnN0IFtpc01vdW50ZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4odHJ1ZSk7XHJcblxyXG4gIGNvbnN0IGNsb3NlTW9kYWwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBpZiAoY2FuQ2xvc2UpIHtcclxuICAgICAgcmV0dXJuIHRvZ2dsZU1vZGFsSGFuZGxlcihmYWxzZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfSwgW2NhbkNsb3NlLCB0b2dnbGVNb2RhbEhhbmRsZXJdKTtcclxuXHJcbiAgY29uc3Qgb25QcmVzc0VzY2FwZUhhbmRsZXIgPSB1c2VDYWxsYmFjayhcclxuICAgIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoZS5rZXkgPT09IFwiRXNjYXBlXCIgJiYgaXNNb2RhbE9wZW4pIHx8XHJcbiAgICAgICAgKGUua2V5ID09PSBcIlNwYWNlXCIgJiYgaXNNb2RhbE9wZW4pXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNsb3NlTW9kYWwoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFtjbG9zZU1vZGFsLCBpc01vZGFsT3Blbl0sXHJcbiAgKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldENhbkNsb3NlKGZhbHNlKTtcclxuXHJcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHNldENhbkNsb3NlKHRydWUpO1xyXG4gICAgfSwgODAwKTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gIH0sIFtpc01vZGFsT3Blbl0pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uUHJlc3NFc2NhcGVIYW5kbGVyKTtcclxuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgb25QcmVzc0VzY2FwZUhhbmRsZXIpO1xyXG4gIH0sIFtvblByZXNzRXNjYXBlSGFuZGxlcl0pO1xyXG5cclxuICAvLyB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gIC8vICAgaWYgKGlzTW9kYWxPcGVuKSB7XHJcbiAgLy8gICAgIHNldElzTW91bnRlZCh0cnVlKTtcclxuICAvLyAgIH1cclxuICAvLyAgIHJldHVybiAoKSA9PiBzZXRJc01vdW50ZWQoZmFsc2UpO1xyXG4gIC8vIH0sIFtpc01vZGFsT3Blbl0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAge2lzTW91bnRlZCA/IChcclxuICAgICAgICA8UG9ydGFsPlxyXG4gICAgICAgICAge21vZGFsSWQgPT09IGlkID8gKFxyXG4gICAgICAgICAgICA8YXNpZGVcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXHJcbiAgICAgICAgICAgICAgICBtYWluQ2xhc3Nlcy5Nb2RhbCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgW21haW5DbGFzc2VzLm9wZW5lZF06IGlzTW9kYWxPcGVuLFxyXG4gICAgICAgICAgICAgICAgICBbbWFpbkNsYXNzZXMuY2xvc2VkXTogIWlzTW9kYWxPcGVuLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIFtzb21lQ2xhc3Nlc10sXHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlTW9kYWx9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMobWFpbkNsYXNzZXMub3ZlcmxheSwge30sIFtdKX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX1cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKG1haW5DbGFzc2VzLmNvbnRlbnQsIHt9LCBbXSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2FzaWRlPlxyXG4gICAgICAgICAgKSA6IG51bGx9XHJcbiAgICAgICAgPC9Qb3J0YWw+XHJcbiAgICAgICkgOiBudWxsfVxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vZGFsO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIk1vZGFsXCI6XCJtNXk4UHRyS1wiLFwib3BlbmVkXCI6XCJOam1JU21IM1wiLFwiY2xvc2VkXCI6XCJVdXBSeFBfYlwiLFwib3ZlcmxheVwiOlwibU9HU1huVTlcIixcImNvbnRlbnRcIjpcIld3Ynd4ZVBhXCJ9OyIsImltcG9ydCB7IHVzZU1vZGFsIH0gZnJvbSBcImFwcC9wcm92aWRlcnMvTW9kYWxQcm92aWRlclwiO1xyXG5pbXBvcnQgeyBGQywgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJzaGFyZWQvdWkvQnV0dG9uXCI7XHJcblxyXG5pbnRlcmZhY2UgVG9nZ2xlTW9kYWxCdXR0b25Qcm9wcyB7XHJcbiAgc29tZUNsYXNzZXM/OiBzdHJpbmc7XHJcbiAgaWQ6IHN0cmluZztcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG4gIHZhbHVlPzogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgVG9nZ2xlTW9kYWxCdXR0b246IEZDPFRvZ2dsZU1vZGFsQnV0dG9uUHJvcHM+ID0gKHtcclxuICBzb21lQ2xhc3NlcyxcclxuICBpZCxcclxuICBjaGlsZHJlbixcclxuICB2YWx1ZSxcclxufSkgPT4ge1xyXG4gIGNvbnN0IHsgc2V0SWQsIHRvZ2dsZU1vZGFsSGFuZGxlciB9ID0gdXNlTW9kYWwoKTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlTW9kYWwgPSAoaWQ6IHN0cmluZywgdmFsdWU/OiBib29sZWFuKSA9PiB7XHJcbiAgICBzZXRJZChpZCk7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRvZ2dsZU1vZGFsSGFuZGxlcih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICB0b2dnbGVNb2RhbEhhbmRsZXIoKTtcclxuICB9O1xyXG4gIHJldHVybiA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHRvZ2dsZU1vZGFsKGlkLCB2YWx1ZSl9PntjaGlsZHJlbn08L0J1dHRvbj47XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb2dnbGVNb2RhbEJ1dHRvbjtcclxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuXG4vKipcclxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjYWN0aW9uXHJcbiAqL1xudmFyIEFjdGlvbjtcblxuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXHJcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxyXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXHJcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXHJcbiAgICpcclxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXHJcbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxyXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxyXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcclxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cclxuICAgKi9cblxuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxyXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXHJcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxyXG4gICAqL1xuXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcblxudmFyIHJlYWRPbmx5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iajtcbn07XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxudmFyIEJlZm9yZVVubG9hZEV2ZW50VHlwZSA9ICdiZWZvcmV1bmxvYWQnO1xudmFyIEhhc2hDaGFuZ2VFdmVudFR5cGUgPSAnaGFzaGNoYW5nZSc7XG52YXIgUG9wU3RhdGVFdmVudFR5cGUgPSAncG9wc3RhdGUnO1xuLyoqXHJcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXHJcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XHJcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkd2luZG93ID0gX29wdGlvbnMud2luZG93LFxuICAgICAgd2luZG93ID0gX29wdGlvbnMkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zJHdpbmRvdztcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICBmdW5jdGlvbiBnZXRJbmRleEFuZExvY2F0aW9uKCkge1xuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgICAgICBuZXh0SW5kZXggPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblswXSxcbiAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlciB3aGF0XG4gICAgICAgICAgLy8gaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24yWzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjJbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9IC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuXG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc2VhcmNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdXNyOiBuZXh0TG9jYXRpb24uc3RhdGUsXG4gICAgICBrZXk6IG5leHRMb2NhdGlvbi5rZXksXG4gICAgICBpZHg6IGluZGV4XG4gICAgfSwgY3JlYXRlSHJlZihuZXh0TG9jYXRpb24pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbG93VHgoYWN0aW9uLCBsb2NhdGlvbiwgcmV0cnkpIHtcbiAgICByZXR1cm4gIWJsb2NrZXJzLmxlbmd0aCB8fCAoYmxvY2tlcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIHJldHJ5OiByZXRyeVxuICAgIH0pLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVR4KG5leHRBY3Rpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuXG4gICAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMyA9IGdldEluZGV4QW5kTG9jYXRpb24oKTtcblxuICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzBdO1xuICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzFdO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIHZhciBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCArIDEpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVclswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuICAgICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cblxuXG4gICAgICB0cnkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcmVwbGFjZSh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4KSxcbiAgICAgICAgICBoaXN0b3J5U3RhdGUgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyWzBdLFxuICAgICAgICAgIHVybCA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuXG5cbiAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgJycsIHVybCk7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhkZWx0YSk7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHZhciB1bmJsb2NrID0gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVuYmxvY2soKTsgLy8gUmVtb3ZlIHRoZSBiZWZvcmV1bmxvYWQgbGlzdGVuZXIgc28gdGhlIGRvY3VtZW50IG1heVxuICAgICAgICAvLyBzdGlsbCBiZSBzYWx2YWdlYWJsZSBpbiB0aGUgcGFnZWhpZGUgZXZlbnQuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyN1bmxvYWRpbmctZG9jdW1lbnRzXG5cbiAgICAgICAgaWYgKCFibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxyXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxyXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxyXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xyXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9uczIgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMyJHdpbmRvdyA9IF9vcHRpb25zMi53aW5kb3csXG4gICAgICB3aW5kb3cgPSBfb3B0aW9uczIkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zMiR3aW5kb3c7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXhBbmRMb2NhdGlvbigpIHtcbiAgICB2YXIgX3BhcnNlUGF0aCA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpLFxuICAgICAgICBfcGFyc2VQYXRoJHBhdGhuYW1lID0gX3BhcnNlUGF0aC5wYXRobmFtZSxcbiAgICAgICAgcGF0aG5hbWUgPSBfcGFyc2VQYXRoJHBhdGhuYW1lID09PSB2b2lkIDAgPyAnLycgOiBfcGFyc2VQYXRoJHBhdGhuYW1lLFxuICAgICAgICBfcGFyc2VQYXRoJHNlYXJjaCA9IF9wYXJzZVBhdGguc2VhcmNoLFxuICAgICAgICBzZWFyY2ggPSBfcGFyc2VQYXRoJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcGFyc2VQYXRoJHNlYXJjaCxcbiAgICAgICAgX3BhcnNlUGF0aCRoYXNoID0gX3BhcnNlUGF0aC5oYXNoLFxuICAgICAgICBoYXNoID0gX3BhcnNlUGF0aCRoYXNoID09PSB2b2lkIDAgPyAnJyA6IF9wYXJzZVBhdGgkaGFzaDtcblxuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjQgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICAgICAgbmV4dEluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb240WzBdLFxuICAgICAgICAgIG5leHRMb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uNFsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlclxuICAgICAgICAgIC8vIHdoYXQgaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTsgLy8gcG9wc3RhdGUgZG9lcyBub3QgZmlyZSBvbiBoYXNoY2hhbmdlIGluIElFIDExIGFuZCBvbGQgKHRyaWRlbnQpIEVkZ2VcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL1dpbmRvdy9wb3BzdGF0ZV9ldmVudFxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudFR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb241ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpLFxuICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjVbMV07IC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxuXG5cbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xuICAgICAgaGFuZGxlUG9wKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uNiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb242WzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjZbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlSHJlZigpIHtcbiAgICB2YXIgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiBnZXRCYXNlSHJlZigpICsgJyMnICsgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHVzcjogbmV4dExvY2F0aW9uLnN0YXRlLFxuICAgICAga2V5OiBuZXh0TG9jYXRpb24ua2V5LFxuICAgICAgaWR4OiBpbmRleFxuICAgIH0sIGNyZWF0ZUhyZWYobmV4dExvY2F0aW9uKV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcblxuICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjcgPSBnZXRJbmRleEFuZExvY2F0aW9uKCk7XG5cbiAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1swXTtcbiAgICBsb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1sxXTtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobmV4dExvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMyA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4ICsgMSksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyM1swXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIzWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcbiAgICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG5leHRMb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnJlcGxhY2UoXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjQgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyNFswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0WzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcblxuXG4gICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28oZGVsdGEpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICB2YXIgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJsb2NrKCk7IC8vIFJlbW92ZSB0aGUgYmVmb3JldW5sb2FkIGxpc3RlbmVyIHNvIHRoZSBkb2N1bWVudCBtYXlcbiAgICAgICAgLy8gc3RpbGwgYmUgc2FsdmFnZWFibGUgaW4gdGhlIHBhZ2VoaWRlIGV2ZW50LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdW5sb2FkaW5nLWRvY3VtZW50c1xuXG4gICAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcclxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxyXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZW1lbW9yeWhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9uczMkaW5pdGlhbEVudHIgPSBfb3B0aW9uczMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9vcHRpb25zMyRpbml0aWFsRW50ciA9PT0gdm9pZCAwID8gWycvJ10gOiBfb3B0aW9uczMkaW5pdGlhbEVudHIsXG4gICAgICBpbml0aWFsSW5kZXggPSBfb3B0aW9uczMuaW5pdGlhbEluZGV4O1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIgbG9jYXRpb24gPSByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgICAgc2VhcmNoOiAnJyxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc3RhdGU6IG51bGwsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSwgdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChlbnRyeSkgOiBlbnRyeSkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGNyZWF0ZU1lbW9yeUhpc3RvcnkoeyBpbml0aWFsRW50cmllcyB9KSAoaW52YWxpZCBlbnRyeTogXCIgKyBKU09OLnN0cmluZ2lmeShlbnRyeSkgKyBcIilcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9KTtcbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICB2YXIgbG9jYXRpb24gPSBlbnRyaWVzW2luZGV4XTtcbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBoYXNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuICAgIGxvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5yZXBsYWNlKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGluZGV4ICsgZGVsdGEsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHJldHVybiBibG9ja2Vycy5wdXNoKGJsb2NrZXIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuXG5mdW5jdGlvbiBwcm9tcHRCZWZvcmVVbmxvYWQoZXZlbnQpIHtcbiAgLy8gQ2FuY2VsIHRoZSBldmVudC5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQ2hyb21lIChhbmQgbGVnYWN5IElFKSByZXF1aXJlcyByZXR1cm5WYWx1ZSB0byBiZSBzZXQuXG5cbiAgZXZlbnQucmV0dXJuVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRzKCkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChmbikge1xuICAgICAgaGFuZGxlcnMucHVzaChmbik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyICE9PSBmbjtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbChhcmcpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiAmJiBmbihhcmcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZXBhdGhcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIHZhciBfcmVmJHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX3JlZiRwYXRobmFtZSA9PT0gdm9pZCAwID8gJy8nIDogX3JlZiRwYXRobmFtZSxcbiAgICAgIF9yZWYkc2VhcmNoID0gX3JlZi5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfcmVmJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNlYXJjaCxcbiAgICAgIF9yZWYkaGFzaCA9IF9yZWYuaGFzaCxcbiAgICAgIGhhc2ggPSBfcmVmJGhhc2ggPT09IHZvaWQgMCA/ICcnIDogX3JlZiRoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcclxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjcGFyc2VwYXRoXHJcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGFyc2VkUGF0aCA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cblxuZXhwb3J0IHsgQWN0aW9uLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHtcbiAgICBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykge1xuICAgICAgdmFyIHQgPSBhcmd1bWVudHNbZV07XG4gICAgICBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cbmV4cG9ydCB7IF9leHRlbmRzIGFzIGRlZmF1bHQgfTsiLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4yLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCBjcmVhdGVFbGVtZW50LCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZUNhbGxiYWNrLCBDaGlsZHJlbiwgaXNWYWxpZEVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWN0aW9uLCBwYXJzZVBhdGggfSBmcm9tICdoaXN0b3J5JztcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDT05URVhUXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIDxSb3V0ZXI+IEFQSVxuICogd2hlcmUgYm90aCB0aGUgbG9jYXRpb24gYW5kIGEgbmF2aWdhdG9yIG11c3QgYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBpbiBvcmRlclxuICogdG8gYXZvaWQgXCJ0ZWFyaW5nXCIgdGhhdCBtYXkgb2NjdXIgaW4gYSBzdXNwZW5zZS1lbmFibGVkIGFwcCBpZiB0aGUgYWN0aW9uXG4gKiBhbmQvb3IgbG9jYXRpb24gd2VyZSB0byBiZSByZWFkIGRpcmVjdGx5IGZyb20gdGhlIGhpc3RvcnkgaW5zdGFuY2UuXG4gKi9cblxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTVBPTkVOVFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWVtb3J5cm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNuYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMikge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZVxuICB9ID0gX3JlZjM7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBiYXNlbmFtZSA9IG5vcm1hbGl6ZVBhdGhuYW1lKGJhc2VuYW1lUHJvcCk7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wXG4gIH0pLCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cblxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG5cbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoLFxuICAgICAgc3RhdGUsXG4gICAgICBrZXlcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXldKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbiAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcblxuICBpZiAobG9jYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZToge1xuICAgICAgbG9jYXRpb24sXG4gICAgICBuYXZpZ2F0aW9uVHlwZVxuICAgIH1cbiAgfSkpO1xufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIDxSb3V0ZT4gZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNCkge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNDtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSB1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGxldCB0b1BhdGhuYW1lID0gZ2V0VG9QYXRobmFtZSh0byk7XG4gICAgbGV0IGVuZHNXaXRoU2xhc2ggPSB0b1BhdGhuYW1lICE9IG51bGwgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSArIChlbmRzV2l0aFNsYXNoID8gXCIvXCIgOiBcIlwiKSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaW5yb3V0ZXJjb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VuYXZpZ2F0aW9udHlwZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBVUkwgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiA8TmF2TGluaz4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VtYXRjaFxuICovXG5cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IHVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSk7XG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlb3V0bGV0Y29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcGFyYW1zXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VyZXNvbHZlZHBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8pIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiA8T3V0bGV0PiB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzKTtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjY3JlYXRlcm91dGVzZnJvbWNoaWxkcmVuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL2lzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhKGVsZW1lbnQudHlwZSA9PT0gUm91dGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoXG4gICAgfTtcblxuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyB0aGF0IHdlcmUgcGFyc2VkIGZyb20gdGhlIFVSTCBwYXRoLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjZ2VuZXJhdGVwYXRoXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC86KFxcdyspL2csIChfLCBrZXkpID0+IHtcbiAgICAhKHBhcmFtc1trZXldICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHBhcmFtc1trZXldO1xuICB9KS5yZXBsYWNlKC9cXC8qXFwqJC8sIF8gPT4gcGFyYW1zW1wiKlwiXSA9PSBudWxsID8gXCJcIiA6IHBhcmFtc1tcIipcIl0ucmVwbGFjZSgvXlxcLyovLCBcIi9cIikpO1xufVxuLyoqXG4gKiBBIFJvdXRlTWF0Y2ggY29udGFpbnMgaW5mbyBhYm91dCBob3cgYSByb3V0ZSBtYXRjaGVkIGEgVVJMLlxuICovXG5cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCBwYXRobmFtZSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cblxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cblxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJvdXRlLnBhdGggfHwgXCJcIixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgIW1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7IC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cblxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAhKHJvdXRlLmluZGV4ICE9PSB0cnVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBicmFuY2hlcztcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzKSB7XG4gIGlmIChwYXJlbnRNYXRjaGVzID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRNYXRjaGVzID0gW107XG4gIH1cblxuICBpZiAobWF0Y2hlcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIG1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChPdXRsZXQsIG51bGwpLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgb3V0bGV0LFxuICAgICAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzLmNvbmNhdChtYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpXG4gICAgICB9XG4gICAgfSk7XG4gIH0sIG51bGwpO1xufVxuLyoqXG4gKiBBIFBhdGhQYXR0ZXJuIGlzIHVzZWQgdG8gbWF0Y2ggb24gc29tZSBwb3J0aW9uIG9mIGEgVVJMIHBhdGhuYW1lLlxuICovXG5cblxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHBhdGhcbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7XG4gICAgICBwYXRoOiBwYXR0ZXJuLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICBlbmQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgbGV0IFttYXRjaGVyLCBwYXJhbU5hbWVzXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlKChtZW1vLCBwYXJhbU5hbWUsIGluZGV4KSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cblxuICAgIG1lbW9bcGFyYW1OYW1lXSA9IHNhZmVseURlY29kZVVSSUNvbXBvbmVudChjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiLCBwYXJhbU5hbWUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7XG4gIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHtcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoZW5kID09PSB2b2lkIDApIHtcbiAgICBlbmQgPSB0cnVlO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSkgOiB2b2lkIDA7XG4gIGxldCBwYXJhbU5hbWVzID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiQ/e318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvOihcXHcrKS9nLCAoXywgcGFyYW1OYW1lKSA9PiB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIFwiKFteXFxcXC9dKylcIjtcbiAgfSk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIHtcbiAgICByZWdleHBTb3VyY2UgKz0gZW5kID8gXCJcXFxcLyokXCIgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIDogLy8gT3RoZXJ3aXNlLCBtYXRjaCBhIHdvcmQgYm91bmRhcnkgb3IgYSBwcm9jZWVkaW5nIC8uIFRoZSB3b3JkIGJvdW5kYXJ5IHJlc3RyaWN0c1xuICAgIC8vIHBhcmVudCByb3V0ZXMgdG8gbWF0Y2hpbmcgb25seSB0aGVpciBvd24gd29yZHMgYW5kIG5vdGhpbmcgbW9yZSwgZS5nLiBwYXJlbnRcbiAgICAvLyByb3V0ZSBcIi9ob21lXCIgc2hvdWxkIG5vdCBtYXRjaCBcIi9ob21lMlwiLlxuICAgIFwiKD86XFxcXGJ8XFxcXC98JClcIjtcbiAgfVxuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3Jlc29sdmVwYXRoXG4gKi9cblxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSkge1xuICBsZXQgdG8gPSB0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG9BcmcpIDogdG9Bcmc7XG4gIGxldCB0b1BhdGhuYW1lID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHRvLnBhdGhuYW1lOyAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgbGV0IGZyb207XG5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIHRvIHZhbHVlIGhhZCBvbmUuXG5cbiAgaWYgKHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoYmFzZW5hbWUubGVuZ3RoKTtcblxuICBpZiAobmV4dENoYXIgJiYgbmV4dENoYXIgIT09IFwiL1wiKSB7XG4gICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRobmFtZS5zbGljZShiYXNlbmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xufVxuXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcblxuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCB7IEZDLCBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwic2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXNcIjtcclxuaW1wb3J0IG1haW5DbGFzc2VzIGZyb20gXCIuL0hlYWRlci5tb2R1bGUuc2Nzc1wiO1xyXG5pbXBvcnQgeyBUb2dnbGVNb2RhbEJ1dHRvbiB9IGZyb20gXCJ3aWRnZXRzL01vZGFsXCI7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tIFwic2hhcmVkL3VpL1RleHRcIjtcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInNoYXJlZC91aS9CdXR0b25cIjtcclxuaW1wb3J0IHsgdXNlQXBwRGlzcGF0Y2ggfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9TdG9yZVByb3ZpZGVyL2NvbmZpZy9zdG9yZVwiO1xyXG5pbXBvcnQgeyBnZXRVc2VyQXV0aG9yaXplZCwgdXNlckFjdGlvbnMgfSBmcm9tIFwiZW50aXRpZXMvVXNlclwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW50ZXJmYWNlIEhlYWRlclByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgSGVhZGVyOiBGQzxIZWFkZXJQcm9wcz4gPSBtZW1vKCh7IHNvbWVDbGFzc2VzIH0pID0+IHtcclxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcbiAgY29uc3QgYXV0aG9yaXplZCA9IHVzZVNlbGVjdG9yKGdldFVzZXJBdXRob3JpemVkKTtcclxuICBjb25zdCBkaXNwYXRjaCA9IHVzZUFwcERpc3BhdGNoKCk7XHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG5cclxuICBjb25zdCBsb2dvdXQgPSAoKSA9PiB7XHJcbiAgICBkaXNwYXRjaCh1c2VyQWN0aW9ucy5sb2dvdXQoKSk7XHJcbiAgICBuYXZpZ2F0ZShcIi9cIik7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgZGF0YS10ZXN0aWQ9XCJoZWFkZXJfdGVzdFwiXHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhtYWluQ2xhc3Nlcy5IZWFkZXIsIHt9LCBbc29tZUNsYXNzZXNdKX1cclxuICAgID5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e21haW5DbGFzc2VzLmxlZnR9PjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17bWFpbkNsYXNzZXMucmlnaHR9PlxyXG4gICAgICAgIHshYXV0aG9yaXplZCA/IChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXttYWluQ2xhc3Nlcy5sb2dpbkJ1dHRvbn0+XHJcbiAgICAgICAgICAgIDxUb2dnbGVNb2RhbEJ1dHRvbiBpZD1cImF1dGhNb2RhbFwiPlxyXG4gICAgICAgICAgICAgIDxUZXh0Pnt0PHN0cmluZz4oXCLQstC+0LnRgtC4XCIpfTwvVGV4dD5cclxuICAgICAgICAgICAgPC9Ub2dnbGVNb2RhbEJ1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICkgOiAoXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17bWFpbkNsYXNzZXMubG9nb3V0QnV0dG9ufT5cclxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBsb2dvdXQoKX0+e3Q8c3RyaW5nPihcItCy0YvQudGC0LhcIil9PC9CdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIkhlYWRlclwiOlwic2hvbnFVd1pcIixcImxlZnRcIjpcInZvQVlXbFJEXCIsXCJyaWdodFwiOlwiaHdWSVNFVUZcIixcImxvZ2luQnV0dG9uXCI6XCJFUXA0Q1pXUVwiLFwibG9nb3V0QnV0dG9uXCI6XCJKZkNaWDNha1wifTsiLCJpbXBvcnQge1xyXG4gIEZDLFxyXG4gIFByb3BzV2l0aENoaWxkcmVuLFxyXG4gIFJlYWN0RWxlbWVudCxcclxuICBSZWFjdE5vZGUsXHJcbiAgY3JlYXRlQ29udGV4dCxcclxuICB1c2VNZW1vLFxyXG4gIHVzZVN0YXRlLFxyXG59IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaWRlYmFyQ29udGV4dFByb3BzIHtcclxuICBpc1NpZGViYXJPcGVuPzogYm9vbGVhbjtcclxuICBvcGVuU2lkZWJhckhhbmRsZXI/OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2lkZWJhckNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFNpZGViYXJDb250ZXh0UHJvcHM+KHt9KTtcclxuXHJcbmV4cG9ydCBjb25zdCBTaWRlYmFyUHJvdmlkZXI6IEZDPFByb3BzV2l0aENoaWxkcmVuPHt9Pj4gPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG59OiB7XHJcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZSB8IFJlYWN0RWxlbWVudDtcclxufSkgPT4ge1xyXG4gIGNvbnN0IFtpc1NpZGViYXJPcGVuU3RhdGUsIHNldElzU2lkZWJhck9wZW5dID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICBjb25zdCBvcGVuU2lkZWJhckhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICBzZXRJc1NpZGViYXJPcGVuKHByZXYgPT4gIXByZXYpO1xyXG4gIH07XHJcbiAgY29uc3QgaXNTaWRlYmFyT3BlbiA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgcmV0dXJuIGlzU2lkZWJhck9wZW5TdGF0ZTtcclxuICB9LCBbaXNTaWRlYmFyT3BlblN0YXRlXSk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxTaWRlYmFyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBpc1NpZGViYXJPcGVuLCBvcGVuU2lkZWJhckhhbmRsZXIgfX0+XHJcbiAgICAgIDw+e2NoaWxkcmVufTwvPlxyXG4gICAgPC9TaWRlYmFyQ29udGV4dC5Qcm92aWRlcj5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFNpZGViYXJDb250ZXh0IH0gZnJvbSAnLi4vdWkvU2lkZWJhclByb3ZpZGVyJ1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB1c2VTaWRlYmFyID0gKCkgPT57XHJcblx0cmV0dXJuIHVzZUNvbnRleHQoU2lkZWJhckNvbnRleHQpXHJcbn0iLCJpbXBvcnQgeyBGQywgbWVtbyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9MYW5nU3dpdGNoZXIubW9kdWxlLnNjc3NcIjtcclxuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xyXG5cclxuaW50ZXJmYWNlIExhbmdTd2l0Y2hlclByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgTGFuZ1N3aXRjaGVyOiBGQzxMYW5nU3dpdGNoZXJQcm9wcz4gPSBtZW1vKFxyXG4gICh7IHNvbWVDbGFzc2VzLCAuLi5wcm9wcyB9KSA9PiB7XHJcbiAgICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcblxyXG4gICAgY29uc3QgY2hhbmdlTGFuZ3VhZ2UgPSAoKSA9PlxyXG4gICAgICBpMThuLmNoYW5nZUxhbmd1YWdlKGkxOG4ubGFuZ3VhZ2UgPT09IFwicnVcIiA/IFwiZW5cIiA6IFwicnVcIik7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgIG9uQ2xpY2s9e2NoYW5nZUxhbmd1YWdlfVxyXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhtYWluQ2xhc3Nlcy5MYW5nU3dpdGNoZXIsIHt9LCBbc29tZUNsYXNzZXNdKX1cclxuICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgID5cclxuICAgICAgICB7dDxzdHJpbmc+KFwi0YHQvNC10L3QuNGC0Ywg0Y/Qt9GL0LpcIil9XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgKTtcclxuICB9LFxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGFuZ1N3aXRjaGVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIkxhbmdTd2l0Y2hlclwiOlwiT2NpSzlwRElcIn07IiwidmFyIF9nLCBfZGVmcztcbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyByZXR1cm4gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAobikgeyBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgeyB2YXIgdCA9IGFyZ3VtZW50c1tlXTsgZm9yICh2YXIgciBpbiB0KSAoe30pLmhhc093blByb3BlcnR5LmNhbGwodCwgcikgJiYgKG5bcl0gPSB0W3JdKTsgfSByZXR1cm4gbjsgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnVGhlbWVEYXJrID0gZnVuY3Rpb24gU3ZnVGhlbWVEYXJrKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB3aWR0aDogNDAsXG4gICAgaGVpZ2h0OiA0MSxcbiAgICBmaWxsOiBcIm5vbmVcIlxuICB9LCBwcm9wcyksIF9nIHx8IChfZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7XG4gICAgZmlsbDogXCIjMDExNUM2XCIsXG4gICAgY2xpcFBhdGg6IFwidXJsKCN0aGVtZS1kYXJrX3N2Z19fYSlcIlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwLjg0OCAxLjA0NEExMi44NyAxMi44NyAwIDAgMCA0LjkzMSAxMS44OGMwIDQuNTcxIDIuMzg3IDguNTcgNS45NzYgMTAuODM3QzQuODUyIDIyLjcxNyAwIDE3Ljg3IDAgMTEuODhhMTAuODMgMTAuODMgMCAwIDEgMy4xNzctNy42NjIgMTAuODUgMTAuODUgMCAwIDEgNy42NzEtMy4xNzRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIm0xNC45NyAxNS45LTIuMjg4LTEuNDM5LTIuMjA5IDEuNTM3LjY3MS0yLjYtMi4xNS0xLjYzNiAyLjY4My0uMTc3Ljg4Ny0yLjU0MiAxLjAwNiAyLjUwMiAyLjY4My4wNi0yLjA3MiAxLjcxNHpNMjEuNDggOC43ODdsLTIuOTItMS44MzItMi44NCAxLjk3LjgyOC0zLjM1LTIuNzQxLTIuMDg4IDMuNDUxLS4yMzZMMTguNDAyIDBsMS4zMjIgMy4yMTEgMy40MTIuMDYtMi42NjMgMi4yMjZ6TTMzLjY2OSA0bDIuODIgMi44MTdMNS43OCAzNy40OTNsLTIuODItMi44MTd6TTMzLjUzIDIzLjcwMmExMC44MyAxMC44MyAwIDAgMS0zLjE3NyA3LjY2MiAxMC44NTQgMTAuODU0IDAgMCAxLTE0LjEgMS4wNjZMMzEuNDIgMTcuMjc5YTEwLjggMTAuOCAwIDAgMSAyLjExIDYuNDIzTTMzLjM5MyAzMS4zNDZsMi4yNjgtNS40NTdMNDAgMzAuODkzek0zNS42NiAyMS41NzRsLTIuMjQ4LTUuNDc3IDYuNTg4LjQ3MnpNMjQuODUyIDM2LjY2Nmw1LjQ2NC0yLjI2Ni0uNDc0IDYuNnpNMTUuMDUgMzQuNGw1LjQ2MyAyLjI2Ni00Ljk5IDQuMzE0elwiXG4gIH0pKSksIF9kZWZzIHx8IChfZGVmcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGVmc1wiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNsaXBQYXRoXCIsIHtcbiAgICBpZDogXCJ0aGVtZS1kYXJrX3N2Z19fYVwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZmlsbDogXCIjZmZmXCIsXG4gICAgZDogXCJNMCAwaDQwdjQxSDB6XCJcbiAgfSkpKSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFN2Z1RoZW1lRGFyazsiLCJ2YXIgX2csIF9kZWZzO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IHJldHVybiBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uIChuKSB7IGZvciAodmFyIGUgPSAxOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7IHZhciB0ID0gYXJndW1lbnRzW2VdOyBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pOyB9IHJldHVybiBuOyB9LCBfZXh0ZW5kcy5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdUaGVtZUxpZ2h0ID0gZnVuY3Rpb24gU3ZnVGhlbWVMaWdodChwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgd2lkdGg6IDQwLFxuICAgIGhlaWdodDogNDEsXG4gICAgZmlsbDogXCJub25lXCJcbiAgfSwgcHJvcHMpLCBfZyB8fCAoX2cgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImdcIiwge1xuICAgIGZpbGw6IFwiI0ZGQzcwMFwiLFxuICAgIGNsaXBQYXRoOiBcInVybCgjdGhlbWUtbGlnaHRfc3ZnX19hKVwiXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMzMuNTMgMjMuNzAyYTEwLjgzIDEwLjgzIDAgMCAxLTMuMTc3IDcuNjYyIDEwLjg1NCAxMC44NTQgMCAwIDEtMTQuMSAxLjA2NkwzMS40MiAxNy4yNzlhMTAuOCAxMC44IDAgMCAxIDIuMTEgNi40MjNNMzMuMzkzIDMxLjM0NmwyLjI2OC01LjQ1N0w0MCAzMC44OTN6TTM1LjY2IDIxLjU3NGwtMi4yNDgtNS40NzcgNi41ODguNDcyek0yNC44NTIgMzYuNjY2bDUuNDY0LTIuMjY2LS40NzQgNi42ek0xNS4wNSAzNC40bDUuNDYzIDIuMjY2LTQuOTkgNC4zMTR6TTMzLjY2OSA0bDIuODIgMi44MTdMNS43OCAzNy40OTNsLTIuODItMi44MTd6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwibTE4LjU2IDYuOTU1IDIuOTIgMS44MzItMS4wMDctMy4yOSAyLjY2My0yLjIyNi0zLjQxMi0uMDZMMTguNDAyIDBsLTEuMTQ0IDMuMjUtMy40NTEuMjM3IDIuNzQxIDIuMDg5LS44MjggMy4zNDl6bS01Ljg3OCA3LjUwNkwxNC45NyAxNS45bC0uNzg5LTIuNTgxIDIuMDcyLTEuNzE1LTIuNjgzLS4wNTktMS4wMDYtMi41MDItLjg4NyAyLjU0Mi0yLjY4My4xNzcgMi4xNSAxLjYzNS0uNjcgMi42MDF6XCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwLjg0OCAxLjA0NEExMi44NyAxMi44NyAwIDAgMCA0LjkzMSAxMS44OGMwIDQuNTcxIDIuMzg3IDguNTcgNS45NzYgMTAuODM3QzQuODUyIDIyLjcxNyAwIDE3Ljg3IDAgMTEuODhhMTAuODMgMTAuODMgMCAwIDEgMy4xNzctNy42NjIgMTAuODUgMTAuODUgMCAwIDEgNy42NzEtMy4xNzRcIlxuICB9KSkpLCBfZGVmcyB8fCAoX2RlZnMgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRlZnNcIiwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjbGlwUGF0aFwiLCB7XG4gICAgaWQ6IFwidGhlbWUtbGlnaHRfc3ZnX19hXCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsOiBcIiNmZmZcIixcbiAgICBkOiBcIk0wIDBoNDB2NDFIMHpcIlxuICB9KSkpKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU3ZnVGhlbWVMaWdodDsiLCJpbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCJhcHAvcHJvdmlkZXJzL1RoZW1lUHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgRkMsIG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IERhcmtJY29uIGZyb20gXCJzaGFyZWQvYXNzZXRzL2ljb25zL3RoZW1lLWRhcmsuc3ZnXCI7XHJcbmltcG9ydCBMaWdodEljb24gZnJvbSBcInNoYXJlZC9hc3NldHMvaWNvbnMvdGhlbWUtbGlnaHQuc3ZnXCI7XHJcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwic2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXNcIjtcclxuaW1wb3J0IG1haW5DbGFzc2VzIGZyb20gXCIuL1RoZW1lU3dpdGNoZXIubW9kdWxlLnNjc3NcIjtcclxuXHJcbmludGVyZmFjZSBUaGVtZVN3aXRjaGVyUHJvcHMge1xyXG4gIHNvbWVDbGFzc2VzPzogc3RyaW5nO1xyXG4gIHByb3BzPzogdW5rbm93bjtcclxufVxyXG5cclxuY29uc3QgVGhlbWVTd2l0Y2hlcjogRkM8VGhlbWVTd2l0Y2hlclByb3BzPiA9IG1lbW8oXHJcbiAgKHsgc29tZUNsYXNzZXMsIC4uLnByb3BzIH0pID0+IHtcclxuICAgIGNvbnN0IHsgdG9nZ2xlVGhlbWUsIGlzRGFyayB9ID0gdXNlVGhlbWUoKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKG1haW5DbGFzc2VzLnRoZW1lU3dpdGNoZXIsIHt9LCBbc29tZUNsYXNzZXNdKX1cclxuICAgICAgICBvbkNsaWNrPXt0b2dnbGVUaGVtZX1cclxuICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgID5cclxuICAgICAgICB7aXNEYXJrID8gPERhcmtJY29uIC8+IDogPExpZ2h0SWNvbiAvPn1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH0sXHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUaGVtZVN3aXRjaGVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInRoZW1lU3dpdGNoZXJcIjpcImxGV2tVWjFpXCJ9OyIsImltcG9ydCB7IEZDLCBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVNpZGViYXIgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9TaWRlYmFyUHJvdmlkZXIvaG9va3MvdXNlU2lkZWJhclwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9TaWRlYmFyU3dpdGNoZXIubW9kdWxlLnNjc3NcIjtcclxuaW1wb3J0IHsgY2lyY2xlTGVmdCB9IGZyb20gXCJyZWFjdC1pY29ucy1raXQvaWNvbW9vbi9jaXJjbGVMZWZ0XCI7XHJcbmltcG9ydCB7IGNpcmNsZVJpZ2h0IH0gZnJvbSBcInJlYWN0LWljb25zLWtpdC9pY29tb29uL2NpcmNsZVJpZ2h0XCI7XHJcbmltcG9ydCBJY29uIGZyb20gXCJyZWFjdC1pY29ucy1raXRcIjtcclxuaW50ZXJmYWNlIFNpZGViYXJTd2l0Y2hlclByb3BzIHtcclxuICBvdGhlckNsYXNzZXM/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IFNpZGViYXJTd2l0Y2hlcjogRkM8U2lkZWJhclN3aXRjaGVyUHJvcHM+ID0gbWVtbygoeyBvdGhlckNsYXNzZXMgfSkgPT4ge1xyXG4gIGNvbnN0IHsgaXNTaWRlYmFyT3Blbiwgb3BlblNpZGViYXJIYW5kbGVyIH0gPSB1c2VTaWRlYmFyKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8YnV0dG9uXHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhtYWluQ2xhc3Nlcy5TaWRlYmFyU3dpdGNoZXIsIHt9LCBbb3RoZXJDbGFzc2VzXSl9XHJcbiAgICAgIGRhdGEtdGVzdGlkPVwidG9nZ2xlX3NpZGViYXJcIlxyXG4gICAgICBvbkNsaWNrPXsoKSA9PiBvcGVuU2lkZWJhckhhbmRsZXIoKX1cclxuICAgID5cclxuICAgICAge2lzU2lkZWJhck9wZW4gPyA8SWNvbiBpY29uPXtjaXJjbGVMZWZ0fSAvPiA6IDxJY29uIGljb249e2NpcmNsZVJpZ2h0fSAvPn1cclxuICAgIDwvYnV0dG9uPlxyXG4gICk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2lkZWJhclN3aXRjaGVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIlNpZGViYXJTd2l0Y2hlclwiOlwiT0J2UWp2aVRcIn07IiwiaW1wb3J0IHsgbGF6eSB9IGZyb20gJ3JlYWN0J1xyXG5cclxuY29uc3QgQWJvdXRQYWdlQXN5bmMgPSBsYXp5KCgpPT5pbXBvcnQoJy4vQWJvdXRQYWdlJykpXHJcblxyXG5leHBvcnQgeyBBYm91dFBhZ2VBc3luYyB9XHJcblxyXG4iLCJpbXBvcnQgeyBsYXp5IH0gZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBNYWluUGFnZUFzeW5jID0gbGF6eSgoKT0+aW1wb3J0KCcuL01haW5QYWdlJykpXHJcblxyXG5leHBvcnQgeyBNYWluUGFnZUFzeW5jIH1cclxuXHJcbiIsImltcG9ydCB7IGxhenkgfSBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBNZXNzYWdlc1BhZ2VBc3luYyA9IGxhenkoKCk9PmltcG9ydCgnLi9NZXNzYWdlc1BhZ2UnKSkiLCJpbXBvcnQgeyBsYXp5IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgTm90Rm91bmRQYWdlQXN5bmMgPSBsYXp5KCgpID0+IGltcG9ydChcIi4vTm90Rm91bmRQYWdlXCIpKTtcclxuIiwiaW1wb3J0IHsgbGF6eSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFByb2ZpbGVQYWdlQXN5bmMgPSBsYXp5KCgpID0+IHtcclxuICByZXR1cm4gaW1wb3J0KFwiLi9Qcm9maWxlUGFnZVwiKTtcclxufSk7XHJcbiIsImltcG9ydCB7IEFib3V0UGFnZSB9IGZyb20gXCJwYWdlcy9BYm91dFBhZ2VcIjtcclxuaW1wb3J0IHsgTWFpblBhZ2UgfSBmcm9tIFwicGFnZXMvTWFpblBhZ2VcIjtcclxuaW1wb3J0IHsgTWVzc2FnZXNQYWdlIH0gZnJvbSBcInBhZ2VzL01lc3NhZ2VzUGFnZVwiO1xyXG5pbXBvcnQgeyBOb3RGb3VuZFBhZ2UgfSBmcm9tIFwicGFnZXMvTm90Rm91bmRQYWdlXCI7XHJcbmltcG9ydCBJY29uIGZyb20gXCJyZWFjdC1pY29ucy1raXRcIjtcclxuaW1wb3J0IHsgUm91dGVQcm9wcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IGhvbWUgfSBmcm9tIFwicmVhY3QtaWNvbnMta2l0L2ljb21vb24vaG9tZVwiO1xyXG5pbXBvcnQgeyBSZWFjdEVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgYnViYmxlczIgfSBmcm9tIFwicmVhY3QtaWNvbnMta2l0L2ljb21vb24vYnViYmxlczJcIjtcclxuaW1wb3J0IHsgaW5mbyB9IGZyb20gXCJyZWFjdC1pY29ucy1raXQvaWNvbW9vbi9pbmZvXCI7XHJcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tIFwicmVhY3QtaWNvbnMta2l0L2ljb21vb24vd2FybmluZ1wiO1xyXG5pbXBvcnQgeyB1c2VyIH0gZnJvbSBcInJlYWN0LWljb25zLWtpdC9pY29tb29uL3VzZXJcIjtcclxuaW1wb3J0IHsgUHJvZmlsZVBhZ2UgfSBmcm9tIFwicGFnZXMvUHJvZmlsZVBhZ2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIFJvdXRlcyB7XHJcbiAgTUFJTiA9IFwi0YHRgtGA0LDQvdC40YbQsCDQs9C70LDQstC90LDRj1wiLFxyXG4gIEFCT1VUID0gXCLRgdGC0YDQsNC90LjRhtCwINC+INC90LDRgVwiLFxyXG4gIE1FU1NBR0VTID0gXCLRgdGC0YDQsNC90LjRhtCwINGB0L7QvtCx0YnQtdC90LjRj1wiLFxyXG4gIE5PVF9GT1VORCA9IFwi0YHRgtGA0LDQvdC40YbQsCDQvdC1INC90LDQudC00LXQvdC+XCIsXHJcbiAgLy8gTUFQID0gXCLRgdGC0YDQsNC90LjRhtCwINC60LDRgNGC0LBcIixcclxuICBQUk9GSUxFID0gXCLRgdGC0YDQsNC90LjRhtCwINC/0YDQvtGE0LjQu9GMXCIsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBSb3V0ZVBhdGhzOiBSZWNvcmQ8Um91dGVzLCBzdHJpbmc+ID0ge1xyXG4gIFtSb3V0ZXMuTUFJTl06IFwiL1wiLFxyXG4gIFtSb3V0ZXMuQUJPVVRdOiBcIi9hYm91dFwiLFxyXG4gIFtSb3V0ZXMuTUVTU0FHRVNdOiBcIi9tZXNzYWdlc1wiLFxyXG4gIFtSb3V0ZXMuTk9UX0ZPVU5EXTogXCIqXCIsXHJcbiAgLy8gW1JvdXRlcy5NQVBdOiBcIi9tYXBcIixcclxuICBbUm91dGVzLlBST0ZJTEVdOiBcIi9wcm9maWxlXCIsXHJcbn07XHJcbmludGVyZmFjZSBDdXN0b21Sb3V0ZVByb3BzIGV4dGVuZHMgUm91dGVQcm9wcyB7XHJcbiAgaWNvbjogUmVhY3RFbGVtZW50O1xyXG4gIGZvckF1dGhVc2VyPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJvdXRlckNvbmZpZzogUmVjb3JkPFJvdXRlcywgQ3VzdG9tUm91dGVQcm9wcz4gPSB7XHJcbiAgW1JvdXRlcy5NQUlOXToge1xyXG4gICAgZWxlbWVudDogPE1haW5QYWdlIC8+LFxyXG4gICAgcGF0aDogUm91dGVQYXRoc1tSb3V0ZXMuTUFJTl0sXHJcbiAgICBpY29uOiA8SWNvbiBpY29uPXtob21lfSAvPixcclxuICB9LFxyXG4gIFtSb3V0ZXMuUFJPRklMRV06IHtcclxuICAgIGVsZW1lbnQ6IDxQcm9maWxlUGFnZSAvPixcclxuICAgIHBhdGg6IFJvdXRlUGF0aHNbUm91dGVzLlBST0ZJTEVdLFxyXG4gICAgaWNvbjogPEljb24gaWNvbj17dXNlcn0gLz4sXHJcbiAgICBmb3JBdXRoVXNlcjogdHJ1ZSxcclxuICB9LFxyXG4gIC8vIFtSb3V0ZXMuTUFQXToge1xyXG4gIC8vICAgZWxlbWVudDogPE1hcFBhZ2UgLz4sXHJcbiAgLy8gICBwYXRoOiBSb3V0ZVBhdGhzW1JvdXRlcy5NQVBdLFxyXG4gIC8vICAgaWNvbjogPEljb24gaWNvbj17bWFwMn0gLz4sXHJcbiAgLy8gfSxcclxuXHJcbiAgW1JvdXRlcy5BQk9VVF06IHtcclxuICAgIGVsZW1lbnQ6IDxBYm91dFBhZ2UgLz4sXHJcbiAgICBwYXRoOiBSb3V0ZVBhdGhzW1JvdXRlcy5BQk9VVF0sXHJcbiAgICBpY29uOiA8SWNvbiBpY29uPXtpbmZvfSAvPixcclxuICB9LFxyXG4gIFtSb3V0ZXMuTUVTU0FHRVNdOiB7XHJcbiAgICBlbGVtZW50OiA8TWVzc2FnZXNQYWdlIC8+LFxyXG4gICAgcGF0aDogUm91dGVQYXRoc1tSb3V0ZXMuTUVTU0FHRVNdLFxyXG4gICAgaWNvbjogPEljb24gaWNvbj17YnViYmxlczJ9IC8+LFxyXG4gIH0sXHJcbiAgW1JvdXRlcy5OT1RfRk9VTkRdOiB7XHJcbiAgICBlbGVtZW50OiA8Tm90Rm91bmRQYWdlIC8+LFxyXG4gICAgcGF0aDogUm91dGVQYXRoc1tSb3V0ZXMuTk9UX0ZPVU5EXSxcclxuICAgIGljb246IDxJY29uIGljb249e3dhcm5pbmd9IC8+LFxyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwic2hhcmVkL2xpYi9DbGFzc05hbWVzL2NsYXNzTmFtZXNcIjtcclxuaW1wb3J0IG1haW5DbGFzc2VzIGZyb20gXCIuL1BhZ2VMb2FkZXIubW9kdWxlLnNjc3NcIjtcclxuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSBcInNoYXJlZC91aS9Mb2FkZXJcIjtcclxuXHJcbmludGVyZmFjZSBQYWdlTG9hZGVyUHJvcHMge1xyXG4gIHNvbWVDbGFzc2VzPzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBQYWdlTG9hZGVyOiBGQzxQYWdlTG9hZGVyUHJvcHM+ID0gKHsgc29tZUNsYXNzZXMsIC4uLnByb3BzIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMobWFpbkNsYXNzZXMuUGFnZUxvYWRlciwge30sIFtzb21lQ2xhc3Nlc10pfVxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICA+XHJcbiAgICAgIDxMb2FkZXIgLz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlTG9hZGVyO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIlBhZ2VMb2FkZXJcIjpcIkU4NlVWcW80XCIsXCJsZHMtcm9sbGVyXCI6XCJndnFtZHRVQVwifTsiLCJpbXBvcnQgeyBSb3V0ZXJDb25maWcgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9Sb3V0ZXJQcm92aWRlci9jb25maWcvUm91dGVyQ29uZmlnXCI7XHJcbmltcG9ydCB7IGdldFVzZXJBdXRob3JpemVkIH0gZnJvbSBcImVudGl0aWVzL1VzZXJcIjtcclxuXHJcbmltcG9ydCB7IFN1c3BlbnNlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IFJvdXRlLCBSb3V0ZXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgUGFnZUxvYWRlciBmcm9tIFwid2lkZ2V0cy9QYWdlTG9hZGVyL3VpL1BhZ2VMb2FkZXJcIjtcclxuY29uc3QgQXBwUm91dGVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IGF1dGhvcml6ZWQgPSB1c2VTZWxlY3RvcihnZXRVc2VyQXV0aG9yaXplZCk7XHJcblxyXG4gIGNvbnN0IFJvdXRlc0ZvckF1dGhVc2VyID0gT2JqZWN0LnZhbHVlcyhSb3V0ZXJDb25maWcpLmZpbHRlcihyb3V0ZSA9PiB7XHJcbiAgICBpZiAoIXJvdXRlLmZvckF1dGhVc2VyKSB7XHJcbiAgICAgIHJldHVybiByb3V0ZTtcclxuICAgIH1cclxuICAgIGlmIChyb3V0ZT8uZm9yQXV0aFVzZXIgJiYgYXV0aG9yaXplZCkge1xyXG4gICAgICByZXR1cm4gcm91dGU7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxQYWdlTG9hZGVyIC8+fT5cclxuICAgICAgPFJvdXRlcz5cclxuICAgICAgICB7Um91dGVzRm9yQXV0aFVzZXIubWFwKCh7IGVsZW1lbnQsIHBhdGggfSkgPT4gKFxyXG4gICAgICAgICAgPFJvdXRlIGtleT17cGF0aH0gZWxlbWVudD17ZWxlbWVudH0gcGF0aD17cGF0aH0gLz5cclxuICAgICAgICApKX1cclxuICAgICAgPC9Sb3V0ZXM+XHJcbiAgICA8L1N1c3BlbnNlPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcHBSb3V0ZXI7XHJcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCBjcmVhdGVFbGVtZW50LCBmb3J3YXJkUmVmLCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHsgUm91dGVyLCB1c2VIcmVmLCB1c2VMb2NhdGlvbiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImNoaWxkcmVuXCJdO1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ09NUE9ORU5UU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmMjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3dcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjM7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjQsIHJlZikge1xuICBsZXQge1xuICAgIG9uQ2xpY2ssXG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSA9IGZhbHNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICB0b1xuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvKTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldFxuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAhcmVsb2FkRG9jdW1lbnQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmNSwgcmVmKSB7XG4gIGxldCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgZW5kID0gZmFsc2UsXG4gICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICB0byxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIjtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG5cbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHtcbiAgICAgIGlzQWN0aXZlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cblxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3Aoe1xuICAgIGlzQWN0aXZlXG4gIH0pIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHtcbiAgICBpc0FjdGl2ZVxuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5cblxuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIHJldHVybiB1c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICApIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlLlxuXG4gICAgICBsZXQgcmVwbGFjZSA9ICEhcmVwbGFjZVByb3AgfHwgY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG9dKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuXCIgKyBcIklmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBcIiArIFwiaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IFwiICsgXCJ0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgXCIgKyBcInVzZXIuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IHVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKTtcblxuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQua2V5cygpKSB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbiAgfSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gdXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIGNyZWF0ZVNlYXJjaFBhcmFtcyhuZXh0SW5pdCksIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZV0pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiQ3VzdG9tTGlua1wiOlwib2JOMmJIMDFcIn07IiwiaW1wb3J0IHsgRkMsIG1lbW8sIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBOYXZMaW5rLCBMaW5rUHJvcHMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9DdXN0b21MaW5rLm1vZHVsZS5zY3NzXCI7XHJcbmV4cG9ydCBpbnRlcmZhY2UgVG8ge1xyXG4gIHBhdGhuYW1lOiBzdHJpbmc7XHJcbiAgc3RhdGU6IHsgcHJldlBhdGg6IHN0cmluZyB9O1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9TdGF0ZSB7XHJcbiAgcHJldlBhdGg6IHN0cmluZztcclxufVxyXG5pbnRlcmZhY2UgQ3VzdG9tTGlua1Byb3BzIGV4dGVuZHMgT21pdDxMaW5rUHJvcHMsIFwidG9cIj4ge1xyXG4gIHNvbWVDbGFzc2VzPzogc3RyaW5nO1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICB0bzogVG87XHJcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZSB8IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgQ3VzdG9tTGluazogRkM8Q3VzdG9tTGlua1Byb3BzPiA9IG1lbW8oXHJcbiAgKHsgY2hpbGRyZW4sIGRpc2FibGVkID0gZmFsc2UsIHRvLCBzb21lQ2xhc3NlcywgLi4ucHJvcHMgfSkgPT4ge1xyXG4gICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMobWFpbkNsYXNzZXMuQ3VzdG9tTGluaywge30sIFtzb21lQ2xhc3Nlc10pfT5cclxuICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8TmF2TGlua1xyXG4gICAgICAgIHRvPXt0b31cclxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMobWFpbkNsYXNzZXMuQ3VzdG9tTGluaywge30sIFtzb21lQ2xhc3Nlc10pfVxyXG4gICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgPlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9OYXZMaW5rPlxyXG4gICAgKTtcclxuICB9LFxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tTGluaztcclxuIiwiLy8gaTE4bmV4dC1leHRyYWN0LWRpc2FibGVcclxuaW1wb3J0IHsgRkMsIG1lbW8gfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCJzaGFyZWQvbGliL0NsYXNzTmFtZXMvY2xhc3NOYW1lc1wiO1xyXG5pbXBvcnQgY2xzIGZyb20gXCIuL05hdmJhci5tb2R1bGUuc2Nzc1wiO1xyXG5pbXBvcnQgeyBSb3V0ZXJDb25maWcgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9Sb3V0ZXJQcm92aWRlclwiO1xyXG5pbXBvcnQgeyBDdXN0b21MaW5rIH0gZnJvbSBcInNoYXJlZC91aS9DdXN0b21MaW5rXCI7XHJcbmltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgZ2V0VXNlckF1dGhvcml6ZWQgfSBmcm9tIFwiZW50aXRpZXMvVXNlclwiO1xyXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XHJcblxyXG5pbnRlcmZhY2UgTmF2YmFyUHJvcHMge1xyXG4gIG90aGVyQ2xhc3Nlcz86IHN0cmluZztcclxuICBzaG9ydD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmNvbnN0IE5hdmJhcjogRkM8TmF2YmFyUHJvcHM+ID0gbWVtbygoeyBvdGhlckNsYXNzZXMsIHNob3J0IH0pID0+IHtcclxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcbiAgY29uc3QgeyBwYXRobmFtZSB9ID0gdXNlTG9jYXRpb24oKTtcclxuICBjb25zdCBhdXRob3JpemVkID0gdXNlU2VsZWN0b3IoZ2V0VXNlckF1dGhvcml6ZWQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHVsIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhjbHMubmF2YmFyLCB7fSwgW290aGVyQ2xhc3Nlc10pfT5cclxuICAgICAge09iamVjdC5rZXlzKFJvdXRlckNvbmZpZykubWFwKChlbGVtZW50OiBrZXlvZiB0eXBlb2YgUm91dGVyQ29uZmlnKSA9PiB7XHJcbiAgICAgICAgaWYgKFJvdXRlckNvbmZpZ1tlbGVtZW50XT8uZm9yQXV0aFVzZXIgJiYgIWF1dGhvcml6ZWQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVsZW1lbnQgIT0gXCLRgdGC0YDQsNC90LjRhtCwINC90LUg0L3QsNC50LTQtdC90L5cIikge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEN1c3RvbUxpbmtcclxuICAgICAgICAgICAgICBkaXNhYmxlZD17cGF0aG5hbWUgPT09IFJvdXRlckNvbmZpZ1tlbGVtZW50XS5wYXRofVxyXG4gICAgICAgICAgICAgIGtleT17ZWxlbWVudH1cclxuICAgICAgICAgICAgICB0bz17e1xyXG4gICAgICAgICAgICAgICAgcGF0aG5hbWU6IFJvdXRlckNvbmZpZ1tlbGVtZW50XS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IHsgcHJldlBhdGg6IGxvY2F0aW9uLnBhdGhuYW1lIH0sXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMuaWNvbn0+e1JvdXRlckNvbmZpZ1tlbGVtZW50XS5pY29ufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAge3Nob3J0ICYmIDxkaXYgY2xhc3NOYW1lPXtjbHMubGlua30+e3Q8c3RyaW5nPihlbGVtZW50KX08L2Rpdj59XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC9DdXN0b21MaW5rPlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pfVxyXG4gICAgPC91bD5cclxuICApO1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5hdmJhcjtcclxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJuYXZiYXJcIjpcIkNYS0c1ZWxlXCIsXCJpY29uXCI6XCJueGRWV21lUFwiLFwibGlua1wiOlwibU8ya1l2NXdcIn07IiwiaW1wb3J0IHsgdXNlU2lkZWJhciB9IGZyb20gXCJhcHAvcHJvdmlkZXJzL1NpZGViYXJQcm92aWRlci9ob29rcy91c2VTaWRlYmFyXCI7XHJcbmltcG9ydCB7IEZDLCBtZW1vLCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9TaWRlYmFyLm1vZHVsZS5zY3NzXCI7XHJcbmltcG9ydCB7IExhbmdTd2l0Y2hlciB9IGZyb20gXCJ3aWRnZXRzL0xhbmdTd2l0Y2hlclwiO1xyXG5pbXBvcnQgeyBUaGVtZVN3aXRjaGVyIH0gZnJvbSBcIndpZGdldHMvVGhlbWVTd2l0Y2hlclwiO1xyXG5pbXBvcnQgU2lkZWJhclN3aXRjaGVyIGZyb20gXCIuL1NpZGViYXJTd2l0Y2hlci91aS9TaWRlYmFyU3dpdGNoZXJcIjtcclxuaW1wb3J0IHsgTmF2YmFyIH0gZnJvbSBcIndpZGdldHMvTmF2YmFyXCI7XHJcblxyXG5pbnRlcmZhY2UgU2lkZWJhclByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgU2lkZWJhcjogRkM8UHJvcHNXaXRoQ2hpbGRyZW48U2lkZWJhclByb3BzPj4gPSBtZW1vKCh7IHNvbWVDbGFzc2VzIH0pID0+IHtcclxuICBjb25zdCB7IGlzU2lkZWJhck9wZW4gfSA9IHVzZVNpZGViYXIoKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgZGF0YS10ZXN0aWQ9XCJzaWRlYmFyX3Rlc3RcIlxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXHJcbiAgICAgICAgbWFpbkNsYXNzZXMuU2lkZWJhcixcclxuICAgICAgICB7IFttYWluQ2xhc3Nlcy5vcGVuXTogaXNTaWRlYmFyT3BlbiB9LFxyXG4gICAgICAgIFtzb21lQ2xhc3Nlc10sXHJcbiAgICAgICl9XHJcbiAgICA+XHJcbiAgICAgIDxOYXZiYXIgc2hvcnQ9e2lzU2lkZWJhck9wZW59IC8+XHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17bWFpbkNsYXNzZXMuc3dpdGNoZXJzfT5cclxuICAgICAgICA8TGFuZ1N3aXRjaGVyIC8+XHJcbiAgICAgICAgPFRoZW1lU3dpdGNoZXIgLz5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e21haW5DbGFzc2VzLnRvZ2dsZUJ1dHRvbn0+XHJcbiAgICAgICAgPFNpZGViYXJTd2l0Y2hlciAvPlxyXG4gICAgICA8L3NwYW4+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGViYXI7XHJcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiU2lkZWJhclwiOlwiUG5PQlpBbjFcIixcInRvZ2dsZUJ1dHRvblwiOlwiYVQ5ejFkeHpcIixcInN3aXRjaGVyc1wiOlwiaUc0cFJIemRcIixcIm9wZW5cIjpcInpzNFc5N1paXCJ9OyIsImltcG9ydCB7IExvZ2luRm9ybSB9IGZyb20gXCJmZWF0dXJlcy9BdXRoQnlVc2VybmFtZVwiO1xyXG5pbXBvcnQgeyBGQywgU3VzcGVuc2UgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSBcInNoYXJlZC91aS9Mb2FkZXJcIjtcclxuaW1wb3J0IHsgTW9kYWwgfSBmcm9tIFwid2lkZ2V0cy9Nb2RhbFwiO1xyXG5cclxuaW50ZXJmYWNlIE1vZGFsc1Byb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgTW9kYWxzOiBGQzxNb2RhbHNQcm9wcz4gPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxNb2RhbCBpZD1cImF1dGhNb2RhbFwiPlxyXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PExvYWRlciAvPn0+XHJcbiAgICAgICAgICA8TG9naW5Gb3JtIC8+XHJcbiAgICAgICAgPC9TdXNwZW5zZT5cclxuICAgICAgPC9Nb2RhbD5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgeyBNb2RhbHMgfTtcclxuIiwiaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9UaGVtZVByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IG1lbW8sIFN1c3BlbnNlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCJzaGFyZWQvbGliL0NsYXNzTmFtZXMvY2xhc3NOYW1lc1wiO1xyXG5pbXBvcnQgeyBGbGV4Q29udGFpbmVyIH0gZnJvbSBcInNoYXJlZC91aS9GbGV4Q29udGFpbmVyXCI7XHJcbmltcG9ydCB7IENvbnRlbnQgfSBmcm9tIFwid2lkZ2V0cy9Db250ZW50XCI7XHJcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCJ3aWRnZXRzL0hlYWRlclwiO1xyXG5pbXBvcnQgeyBTaWRlYmFyIH0gZnJvbSBcIndpZGdldHMvU2lkZWJhclwiO1xyXG5pbXBvcnQgeyBBcHBSb3V0ZXIgfSBmcm9tIFwiLi9wcm92aWRlcnMvUm91dGVyUHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSBcInNoYXJlZC91aS9Mb2FkZXJcIjtcclxuaW1wb3J0IHsgTW9kYWxzIH0gZnJvbSBcInNoYXJlZC91aS9Nb2RhbHNcIjtcclxuaW1wb3J0IHsgYWRkVGhlbWVPbkJvZHkgfSBmcm9tIFwic2hhcmVkL2hlbHBlcnMvZnVuY3Rpb25zL2FkZFRoZW1lQ2xhc3NPbkJvZHlcIjtcclxuaW1wb3J0IHsgdXNlQXBwRGlzcGF0Y2ggfSBmcm9tIFwiLi9wcm92aWRlcnMvU3RvcmVQcm92aWRlci9jb25maWcvc3RvcmVcIjtcclxuaW1wb3J0IHsgdXNlckFjdGlvbnMgfSBmcm9tIFwiZW50aXRpZXMvVXNlclwiO1xyXG5cclxuY29uc3QgQXBwID0gbWVtbygoKSA9PiB7XHJcbiAgY29uc3QgeyB0aGVtZSB9ID0gdXNlVGhlbWUoKTtcclxuICBjb25zdCBkaXNwYXRjaCA9IHVzZUFwcERpc3BhdGNoKCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBkaXNwYXRjaCh1c2VyQWN0aW9ucy51cGRhdGVVc2VyKCkpO1xyXG4gIH0sIFtkaXNwYXRjaF0pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgYWRkVGhlbWVPbkJvZHkodGhlbWUpO1xyXG4gIH0sIFt0aGVtZV0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJhcHBcIiwge30sIFt0aGVtZV0pfT5cclxuICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8TG9hZGVyIC8+fT5cclxuICAgICAgICA8SGVhZGVyIC8+XHJcbiAgICAgICAgPEZsZXhDb250YWluZXIgc3R5bGVQcm9wcz17eyBmbGV4RGlyZWN0aW9uOiBcInJvd1wiIH19PlxyXG4gICAgICAgICAgPFNpZGViYXIgLz5cclxuICAgICAgICAgIDxDb250ZW50PlxyXG4gICAgICAgICAgICA8TW9kYWxzIC8+XHJcbiAgICAgICAgICAgIDxBcHBSb3V0ZXIgLz5cclxuICAgICAgICAgIDwvQ29udGVudD5cclxuICAgICAgICA8L0ZsZXhDb250YWluZXI+XHJcbiAgICAgIDwvU3VzcGVuc2U+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuIiwiZXhwb3J0IGNvbnN0IGFkZFRoZW1lT25Cb2R5ID0gKHRoZW1lOiBzdHJpbmcpID0+IHtcclxuICBjb25zdCBiID0gZG9jdW1lbnQuYm9keTtcclxuICBiLmNsYXNzTGlzdC5hZGQoXCJhcHBcIik7XHJcbiAgYi5jbGFzc0xpc3QucmVtb3ZlKFwiZGFya1wiKTtcclxuICBiLmNsYXNzTGlzdC5yZW1vdmUoXCJsaWdodFwiKTtcclxuICBiLmNsYXNzTGlzdC5hZGQodGhlbWUpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcInNoYXJlZC9saWIvQ2xhc3NOYW1lcy9jbGFzc05hbWVzXCI7XHJcbmltcG9ydCBtYWluQ2xhc3NlcyBmcm9tIFwiLi9QYWdlRXJyb3IubW9kdWxlLnNjc3NcIjtcclxuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xyXG5cclxuaW50ZXJmYWNlIFBhZ2VFcnJvclByb3BzIHtcclxuICBzb21lQ2xhc3Nlcz86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgUGFnZUVycm9yOiBGQzxQYWdlRXJyb3JQcm9wcz4gPSAoeyBzb21lQ2xhc3NlcywgLi4ucHJvcHMgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICBjb25zdCByZWZyZXNoU2l0ZSA9ICgpID0+IHtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICB9O1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhtYWluQ2xhc3Nlcy5QYWdlRXJyb3IsIHt9LCBbc29tZUNsYXNzZXNdKX1cclxuICAgICAgey4uLnByb3BzfVxyXG4gICAgPlxyXG4gICAgICA8Yj57dDxzdHJpbmc+KFwi0YHRgtGA0LDQvdC40YbQsCDRgSDQvtGI0LjQsdC60L7QuVwiKX08L2I+XHJcbiAgICAgIDxidXR0b24gb25DbGljaz17cmVmcmVzaFNpdGV9Pnt0PHN0cmluZz4oXCLQv9C10YDQtdC30LDQs9GA0YPQt9C40YLRjCDRgdCw0LnRglwiKX08L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlRXJyb3I7XHJcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiUGFnZUVycm9yXCI6XCJIU0ZCYmtQRlwifTsiLCJpbXBvcnQgUmVhY3QsIHsgRXJyb3JJbmZvLCBSZWFjdE5vZGUsIFN1c3BlbnNlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExvYWRlciB9IGZyb20gXCJzaGFyZWQvdWkvTG9hZGVyXCI7XHJcbmltcG9ydCB7IFBhZ2VFcnJvciB9IGZyb20gXCJ3aWRnZXRzL1BhZ2VFcnJvclwiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG59XHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgaGFzRXJyb3I6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0geyBoYXNFcnJvcjogZmFsc2UgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3I6IEVycm9yKSB7XHJcbiAgICByZXR1cm4geyBoYXNFcnJvcjogdHJ1ZSB9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IEVycm9yLCBpbmZvOiBFcnJvckluZm8pIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIik7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGhhc0Vycm9yIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxMb2FkZXIgLz59PlxyXG4gICAgICAgICAgPFBhZ2VFcnJvciAvPlxyXG4gICAgICAgIDwvU3VzcGVuc2U+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDw+e2NoaWxkcmVufTwvPjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVycm9yQm91bmRhcnk7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2xlYWZsZXQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2xlYWZsZXQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChlKSB7XG4gIGlmICh2b2lkIDAgPT09IGUpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgcmV0dXJuIGU7XG59XG5leHBvcnQgeyBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkge1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDtcbiAgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpO1xufVxuZXhwb3J0IHsgX3NldFByb3RvdHlwZU9mIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7XG4gIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogdCxcbiAgICAgIHdyaXRhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9XG4gIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiAhMVxuICB9KSwgZSAmJiBzZXRQcm90b3R5cGVPZih0LCBlKTtcbn1cbmV4cG9ydCB7IF9pbmhlcml0cyBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qc1wiO1xuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkge1xuICBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlO1xuICBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7XG59XG5leHBvcnQgeyBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBhcyBkZWZhdWx0IH07IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7XG4gIH0sIF9nZXRQcm90b3R5cGVPZih0KTtcbn1cbmV4cG9ydCB7IF9nZXRQcm90b3R5cGVPZiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF90b0FycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQXJyYXknO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBjb25zb2xlTG9nZ2VyID0ge1xuICB0eXBlOiAnbG9nZ2VyJyxcbiAgbG9nOiBmdW5jdGlvbiBsb2coYXJncykge1xuICAgIHRoaXMub3V0cHV0KCdsb2cnLCBhcmdzKTtcbiAgfSxcbiAgd2FybjogZnVuY3Rpb24gd2FybihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ3dhcm4nLCBhcmdzKTtcbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnZXJyb3InLCBhcmdzKTtcbiAgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbiBvdXRwdXQodHlwZSwgYXJncykge1xuICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGVbdHlwZV0pIGNvbnNvbGVbdHlwZV0uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gIH1cbn07XG5cbnZhciBMb2dnZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExvZ2dlcihjb25jcmV0ZUxvZ2dlcikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2dnZXIpO1xuXG4gICAgdGhpcy5pbml0KGNvbmNyZXRlTG9nZ2VyLCBvcHRpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMb2dnZXIsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChjb25jcmV0ZUxvZ2dlcikge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdGhpcy5wcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnaTE4bmV4dDonO1xuICAgICAgdGhpcy5sb2dnZXIgPSBjb25jcmV0ZUxvZ2dlciB8fCBjb25zb2xlTG9nZ2VyO1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHRoaXMuZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXREZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZWJ1Zyhib29sKSB7XG4gICAgICB0aGlzLmRlYnVnID0gYm9vbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICdsb2cnLCAnJywgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIndhcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2FybigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ3dhcm4nLCAnJywgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnZXJyb3InLCAnJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlcHJlY2F0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXByZWNhdGUoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJ1dBUk5JTkcgREVQUkVDQVRFRDogJywgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcndhcmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yd2FyZChhcmdzLCBsdmwsIHByZWZpeCwgZGVidWdPbmx5KSB7XG4gICAgICBpZiAoZGVidWdPbmx5ICYmICF0aGlzLmRlYnVnKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIGFyZ3NbMF0gPSBcIlwiLmNvbmNhdChwcmVmaXgpLmNvbmNhdCh0aGlzLnByZWZpeCwgXCIgXCIpLmNvbmNhdChhcmdzWzBdKTtcbiAgICAgIHJldHVybiB0aGlzLmxvZ2dlcltsdmxdKGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKG1vZHVsZU5hbWUpIHtcbiAgICAgIHJldHVybiBuZXcgTG9nZ2VyKHRoaXMubG9nZ2VyLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHtcbiAgICAgICAgcHJlZml4OiBcIlwiLmNvbmNhdCh0aGlzLnByZWZpeCwgXCI6XCIpLmNvbmNhdChtb2R1bGVOYW1lLCBcIjpcIilcbiAgICAgIH0pLCB0aGlzLm9wdGlvbnMpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9nZ2VyO1xufSgpO1xuXG52YXIgYmFzZUxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblxudmFyIEV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudEVtaXR0ZXIpO1xuXG4gICAgdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFdmVudEVtaXR0ZXIsIFt7XG4gICAga2V5OiBcIm9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50cywgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIF90aGlzLm9ic2VydmVyc1tldmVudF0gPSBfdGhpcy5vYnNlcnZlcnNbZXZlbnRdIHx8IFtdO1xuXG4gICAgICAgIF90aGlzLm9ic2VydmVyc1tldmVudF0ucHVzaChsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgaWYgKCF0aGlzLm9ic2VydmVyc1tldmVudF0pIHJldHVybjtcblxuICAgICAgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICBkZWxldGUgdGhpcy5vYnNlcnZlcnNbZXZlbnRdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5maWx0ZXIoZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgcmV0dXJuIGwgIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImVtaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkge1xuICAgICAgICB2YXIgY2xvbmVkID0gW10uY29uY2F0KHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSk7XG4gICAgICAgIGNsb25lZC5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgIG9ic2VydmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vYnNlcnZlcnNbJyonXSkge1xuICAgICAgICB2YXIgX2Nsb25lZCA9IFtdLmNvbmNhdCh0aGlzLm9ic2VydmVyc1snKiddKTtcblxuICAgICAgICBfY2xvbmVkLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIuYXBwbHkob2JzZXJ2ZXIsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbn0oKTtcblxuZnVuY3Rpb24gZGVmZXIoKSB7XG4gIHZhciByZXM7XG4gIHZhciByZWo7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlcyA9IHJlc29sdmU7XG4gICAgcmVqID0gcmVqZWN0O1xuICB9KTtcbiAgcHJvbWlzZS5yZXNvbHZlID0gcmVzO1xuICBwcm9taXNlLnJlamVjdCA9IHJlajtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBtYWtlU3RyaW5nKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAnJztcbiAgcmV0dXJuICcnICsgb2JqZWN0O1xufVxuZnVuY3Rpb24gY29weShhLCBzLCB0KSB7XG4gIGEuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgIGlmIChzW21dKSB0W21dID0gc1ttXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBFbXB0eSkge1xuICBmdW5jdGlvbiBjbGVhbktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5ICYmIGtleS5pbmRleE9mKCcjIyMnKSA+IC0xID8ga2V5LnJlcGxhY2UoLyMjIy9nLCAnLicpIDoga2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuTm90VHJhdmVyc2VEZWVwZXIoKSB7XG4gICAgcmV0dXJuICFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICB2YXIgc3RhY2sgPSB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgPyBbXS5jb25jYXQocGF0aCkgOiBwYXRoLnNwbGl0KCcuJyk7XG5cbiAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoY2FuTm90VHJhdmVyc2VEZWVwZXIoKSkgcmV0dXJuIHt9O1xuICAgIHZhciBrZXkgPSBjbGVhbktleShzdGFjay5zaGlmdCgpKTtcbiAgICBpZiAoIW9iamVjdFtrZXldICYmIEVtcHR5KSBvYmplY3Rba2V5XSA9IG5ldyBFbXB0eSgpO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3QgPSB7fTtcbiAgICB9XG4gIH1cblxuICBpZiAoY2FuTm90VHJhdmVyc2VEZWVwZXIoKSkgcmV0dXJuIHt9O1xuICByZXR1cm4ge1xuICAgIG9iajogb2JqZWN0LFxuICAgIGs6IGNsZWFuS2V5KHN0YWNrLnNoaWZ0KCkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldFBhdGgob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSkge1xuICB2YXIgX2dldExhc3RPZlBhdGggPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCwgT2JqZWN0KSxcbiAgICAgIG9iaiA9IF9nZXRMYXN0T2ZQYXRoLm9iaixcbiAgICAgIGsgPSBfZ2V0TGFzdE9mUGF0aC5rO1xuXG4gIG9ialtrXSA9IG5ld1ZhbHVlO1xufVxuZnVuY3Rpb24gcHVzaFBhdGgob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSwgY29uY2F0KSB7XG4gIHZhciBfZ2V0TGFzdE9mUGF0aDIgPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCwgT2JqZWN0KSxcbiAgICAgIG9iaiA9IF9nZXRMYXN0T2ZQYXRoMi5vYmosXG4gICAgICBrID0gX2dldExhc3RPZlBhdGgyLms7XG5cbiAgb2JqW2tdID0gb2JqW2tdIHx8IFtdO1xuICBpZiAoY29uY2F0KSBvYmpba10gPSBvYmpba10uY29uY2F0KG5ld1ZhbHVlKTtcbiAgaWYgKCFjb25jYXQpIG9ialtrXS5wdXNoKG5ld1ZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldFBhdGgob2JqZWN0LCBwYXRoKSB7XG4gIHZhciBfZ2V0TGFzdE9mUGF0aDMgPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCksXG4gICAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aDMub2JqLFxuICAgICAgayA9IF9nZXRMYXN0T2ZQYXRoMy5rO1xuXG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gb2JqW2tdO1xufVxuZnVuY3Rpb24gZ2V0UGF0aFdpdGhEZWZhdWx0cyhkYXRhLCBkZWZhdWx0RGF0YSwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFBhdGgoZGF0YSwga2V5KTtcblxuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBnZXRQYXRoKGRlZmF1bHREYXRhLCBrZXkpO1xufVxuZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQsIHNvdXJjZSwgb3ZlcndyaXRlKSB7XG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgaWYgKHByb3AgIT09ICdfX3Byb3RvX18nICYmIHByb3AgIT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wXSA9PT0gJ3N0cmluZycgfHwgdGFyZ2V0W3Byb3BdIGluc3RhbmNlb2YgU3RyaW5nIHx8IHR5cGVvZiBzb3VyY2VbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHNvdXJjZVtwcm9wXSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICAgIGlmIChvdmVyd3JpdGUpIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWVwRXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdLCBvdmVyd3JpdGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCAnXFxcXCQmJyk7XG59XG52YXIgX2VudGl0eU1hcCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7JyxcbiAgJy8nOiAnJiN4MkY7J1xufTtcbmZ1bmN0aW9uIGVzY2FwZShkYXRhKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGF0YS5yZXBsYWNlKC9bJjw+XCInXFwvXS9nLCBmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIF9lbnRpdHlNYXBbc107XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbnZhciBpc0lFMTAgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50ICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSA+IC0xO1xudmFyIGNoYXJzID0gWycgJywgJywnLCAnPycsICchJywgJzsnXTtcbmZ1bmN0aW9uIGxvb2tzTGlrZU9iamVjdFBhdGgoa2V5LCBuc1NlcGFyYXRvciwga2V5U2VwYXJhdG9yKSB7XG4gIG5zU2VwYXJhdG9yID0gbnNTZXBhcmF0b3IgfHwgJyc7XG4gIGtleVNlcGFyYXRvciA9IGtleVNlcGFyYXRvciB8fCAnJztcbiAgdmFyIHBvc3NpYmxlQ2hhcnMgPSBjaGFycy5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gbnNTZXBhcmF0b3IuaW5kZXhPZihjKSA8IDAgJiYga2V5U2VwYXJhdG9yLmluZGV4T2YoYykgPCAwO1xuICB9KTtcbiAgaWYgKHBvc3NpYmxlQ2hhcnMubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHIgPSBuZXcgUmVnRXhwKFwiKFwiLmNvbmNhdChwb3NzaWJsZUNoYXJzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjID09PSAnPycgPyAnXFxcXD8nIDogYztcbiAgfSkuam9pbignfCcpLCBcIilcIikpO1xuICB2YXIgbWF0Y2hlZCA9ICFyLnRlc3Qoa2V5KTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICB2YXIga2kgPSBrZXkuaW5kZXhPZihrZXlTZXBhcmF0b3IpO1xuXG4gICAgaWYgKGtpID4gMCAmJiAhci50ZXN0KGtleS5zdWJzdHJpbmcoMCwga2kpKSkge1xuICAgICAgbWF0Y2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIG93bktleXMkMShvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMSh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDEoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQxKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gZGVlcEZpbmQob2JqLCBwYXRoKSB7XG4gIHZhciBrZXlTZXBhcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcuJztcbiAgaWYgKCFvYmopIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmIChvYmpbcGF0aF0pIHJldHVybiBvYmpbcGF0aF07XG4gIHZhciBwYXRocyA9IHBhdGguc3BsaXQoa2V5U2VwYXJhdG9yKTtcbiAgdmFyIGN1cnJlbnQgPSBvYmo7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7ICsraSkge1xuICAgIGlmICghY3VycmVudCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGlmICh0eXBlb2YgY3VycmVudFtwYXRoc1tpXV0gPT09ICdzdHJpbmcnICYmIGkgKyAxIDwgcGF0aHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50W3BhdGhzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgaiA9IDI7XG4gICAgICB2YXIgcCA9IHBhdGhzLnNsaWNlKGksIGkgKyBqKS5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICB2YXIgbWl4ID0gY3VycmVudFtwXTtcblxuICAgICAgd2hpbGUgKG1peCA9PT0gdW5kZWZpbmVkICYmIHBhdGhzLmxlbmd0aCA+IGkgKyBqKSB7XG4gICAgICAgIGorKztcbiAgICAgICAgcCA9IHBhdGhzLnNsaWNlKGksIGkgKyBqKS5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICAgIG1peCA9IGN1cnJlbnRbcF07XG4gICAgICB9XG5cbiAgICAgIGlmIChtaXggPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHBhdGguZW5kc1dpdGgocCkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtaXggPT09ICdzdHJpbmcnKSByZXR1cm4gbWl4O1xuICAgICAgICBpZiAocCAmJiB0eXBlb2YgbWl4W3BdID09PSAnc3RyaW5nJykgcmV0dXJuIG1peFtwXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGpvaW5lZFBhdGggPSBwYXRocy5zbGljZShpICsgaikuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgaWYgKGpvaW5lZFBhdGgpIHJldHVybiBkZWVwRmluZChtaXgsIGpvaW5lZFBhdGgsIGtleVNlcGFyYXRvcik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhzW2ldXTtcbiAgfVxuXG4gIHJldHVybiBjdXJyZW50O1xufVxuXG52YXIgUmVzb3VyY2VTdG9yZSA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhSZXNvdXJjZVN0b3JlLCBfRXZlbnRFbWl0dGVyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFJlc291cmNlU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIFJlc291cmNlU3RvcmUoZGF0YSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgICBuczogWyd0cmFuc2xhdGlvbiddLFxuICAgICAgZGVmYXVsdE5TOiAndHJhbnNsYXRpb24nXG4gICAgfTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNvdXJjZVN0b3JlKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG5cbiAgICBpZiAoaXNJRTEwKSB7XG4gICAgICBFdmVudEVtaXR0ZXIuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfVxuXG4gICAgX3RoaXMuZGF0YSA9IGRhdGEgfHwge307XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBpZiAoX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXNvdXJjZVN0b3JlLCBbe1xuICAgIGtleTogXCJhZGROYW1lc3BhY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE5hbWVzcGFjZXMobnMpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucykgPCAwKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5ucy5wdXNoKG5zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlTmFtZXNwYWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVOYW1lc3BhY2VzKG5zKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucyk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXNvdXJjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXNvdXJjZShsbmcsIG5zLCBrZXkpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgICAgdmFyIGlnbm9yZUpTT05TdHJ1Y3R1cmUgPSBvcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA6IHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlO1xuICAgICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG4gICAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcbiAgICAgIGlmIChrZXkgJiYgdHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHBhdGggPSBwYXRoLmNvbmNhdChrZXlTZXBhcmF0b3IgPyBrZXkuc3BsaXQoa2V5U2VwYXJhdG9yKSA6IGtleSk7XG5cbiAgICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpO1xuICAgICAgaWYgKHJlc3VsdCB8fCAhaWdub3JlSlNPTlN0cnVjdHVyZSB8fCB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgcmV0dXJuIHJlc3VsdDtcbiAgICAgIHJldHVybiBkZWVwRmluZCh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhW2xuZ10gJiYgdGhpcy5kYXRhW2xuZ11bbnNdLCBrZXksIGtleVNlcGFyYXRvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFJlc291cmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc291cmNlKGxuZywgbnMsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7XG4gICAgICAgIHNpbGVudDogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIga2V5U2VwYXJhdG9yID0gdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICAgIGlmIChrZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkga2V5U2VwYXJhdG9yID0gJy4nO1xuICAgICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG4gICAgICBpZiAoa2V5KSBwYXRoID0gcGF0aC5jb25jYXQoa2V5U2VwYXJhdG9yID8ga2V5LnNwbGl0KGtleVNlcGFyYXRvcikgOiBrZXkpO1xuXG4gICAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFsdWUgPSBucztcbiAgICAgICAgbnMgPSBwYXRoWzFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgICAgc2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgsIHZhbHVlKTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkUmVzb3VyY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc291cmNlcyhsbmcsIG5zLCByZXNvdXJjZXMpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7XG4gICAgICAgIHNpbGVudDogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIG0gaW4gcmVzb3VyY2VzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb3VyY2VzW21dID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHJlc291cmNlc1ttXSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHRoaXMuYWRkUmVzb3VyY2UobG5nLCBucywgbSwgcmVzb3VyY2VzW21dLCB7XG4gICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmVtaXQoJ2FkZGVkJywgbG5nLCBucywgcmVzb3VyY2VzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkUmVzb3VyY2VCdW5kbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmVzb3VyY2VCdW5kbGUobG5nLCBucywgcmVzb3VyY2VzLCBkZWVwLCBvdmVyd3JpdGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7XG4gICAgICAgIHNpbGVudDogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIgcGF0aCA9IFtsbmcsIG5zXTtcblxuICAgICAgaWYgKGxuZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgICBwYXRoID0gbG5nLnNwbGl0KCcuJyk7XG4gICAgICAgIGRlZXAgPSByZXNvdXJjZXM7XG4gICAgICAgIHJlc291cmNlcyA9IG5zO1xuICAgICAgICBucyA9IHBhdGhbMV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkTmFtZXNwYWNlcyhucyk7XG4gICAgICB2YXIgcGFjayA9IGdldFBhdGgodGhpcy5kYXRhLCBwYXRoKSB8fCB7fTtcblxuICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgZGVlcEV4dGVuZChwYWNrLCByZXNvdXJjZXMsIG92ZXJ3cml0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWNrID0gX29iamVjdFNwcmVhZCQxKF9vYmplY3RTcHJlYWQkMSh7fSwgcGFjayksIHJlc291cmNlcyk7XG4gICAgICB9XG5cbiAgICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCBwYWNrKTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCByZXNvdXJjZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVSZXNvdXJjZUJ1bmRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSB7XG4gICAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkge1xuICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2xuZ11bbnNdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbW92ZU5hbWVzcGFjZXMobnMpO1xuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVkJywgbG5nLCBucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1Jlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKGxuZywgbnMpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLmRlZmF1bHROUztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUFQSSA9PT0gJ3YxJykgcmV0dXJuIF9vYmplY3RTcHJlYWQkMShfb2JqZWN0U3ByZWFkJDEoe30sIHt9KSwgdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKSk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGF0YUJ5TGFuZ3VhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YUJ5TGFuZ3VhZ2UobG5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhW2xuZ107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNMYW5ndWFnZVNvbWVUcmFuc2xhdGlvbnMobG5nKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0RGF0YUJ5TGFuZ3VhZ2UobG5nKTtcbiAgICAgIHZhciBuID0gZGF0YSAmJiBPYmplY3Qua2V5cyhkYXRhKSB8fCBbXTtcbiAgICAgIHJldHVybiAhIW4uZmluZChmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gZGF0YVt2XSAmJiBPYmplY3Qua2V5cyhkYXRhW3ZdKS5sZW5ndGggPiAwO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXNvdXJjZVN0b3JlO1xufShFdmVudEVtaXR0ZXIpO1xuXG52YXIgcG9zdFByb2Nlc3NvciA9IHtcbiAgcHJvY2Vzc29yczoge30sXG4gIGFkZFBvc3RQcm9jZXNzb3I6IGZ1bmN0aW9uIGFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKSB7XG4gICAgdGhpcy5wcm9jZXNzb3JzW21vZHVsZS5uYW1lXSA9IG1vZHVsZTtcbiAgfSxcbiAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUocHJvY2Vzc29ycywgdmFsdWUsIGtleSwgb3B0aW9ucywgdHJhbnNsYXRvcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBwcm9jZXNzb3JzLmZvckVhY2goZnVuY3Rpb24gKHByb2Nlc3Nvcikge1xuICAgICAgaWYgKF90aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXSkgdmFsdWUgPSBfdGhpcy5wcm9jZXNzb3JzW3Byb2Nlc3Nvcl0ucHJvY2Vzcyh2YWx1ZSwga2V5LCBvcHRpb25zLCB0cmFuc2xhdG9yKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG93bktleXMkMihvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMih0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDIoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQyKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIkMShEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cbnZhciBjaGVja2VkTG9hZGVkRm9yID0ge307XG5cbnZhciBUcmFuc2xhdG9yID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKFRyYW5zbGF0b3IsIF9FdmVudEVtaXR0ZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIkMShUcmFuc2xhdG9yKTtcblxuICBmdW5jdGlvbiBUcmFuc2xhdG9yKHNlcnZpY2VzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zbGF0b3IpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcblxuICAgIGlmIChpc0lFMTApIHtcbiAgICAgIEV2ZW50RW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICBjb3B5KFsncmVzb3VyY2VTdG9yZScsICdsYW5ndWFnZVV0aWxzJywgJ3BsdXJhbFJlc29sdmVyJywgJ2ludGVycG9sYXRvcicsICdiYWNrZW5kQ29ubmVjdG9yJywgJ2kxOG5Gb3JtYXQnLCAndXRpbHMnXSwgc2VydmljZXMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmIChfdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9ICcuJztcbiAgICB9XG5cbiAgICBfdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgndHJhbnNsYXRvcicpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUcmFuc2xhdG9yLCBbe1xuICAgIGtleTogXCJjaGFuZ2VMYW5ndWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VMYW5ndWFnZShsbmcpIHtcbiAgICAgIGlmIChsbmcpIHRoaXMubGFuZ3VhZ2UgPSBsbmc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4aXN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGlzdHMoa2V5KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7fVxuICAgICAgfTtcblxuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNvbHZlZCA9IHRoaXMucmVzb2x2ZShrZXksIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHJlc29sdmVkICYmIHJlc29sdmVkLnJlcyAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0RnJvbUtleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0RnJvbUtleShrZXksIG9wdGlvbnMpIHtcbiAgICAgIHZhciBuc1NlcGFyYXRvciA9IG9wdGlvbnMubnNTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMubnNTZXBhcmF0b3I7XG4gICAgICBpZiAobnNTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgbnNTZXBhcmF0b3IgPSAnOic7XG4gICAgICB2YXIga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICAgIHZhciBuYW1lc3BhY2VzID0gb3B0aW9ucy5ucyB8fCB0aGlzLm9wdGlvbnMuZGVmYXVsdE5TIHx8IFtdO1xuICAgICAgdmFyIHdvdWxkQ2hlY2tGb3JOc0luS2V5ID0gbnNTZXBhcmF0b3IgJiYga2V5LmluZGV4T2YobnNTZXBhcmF0b3IpID4gLTE7XG4gICAgICB2YXIgc2VlbXNOYXR1cmFsTGFuZ3VhZ2UgPSAhdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkS2V5U2VwYXJhdG9yICYmICFvcHRpb25zLmtleVNlcGFyYXRvciAmJiAhdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkTnNTZXBhcmF0b3IgJiYgIW9wdGlvbnMubnNTZXBhcmF0b3IgJiYgIWxvb2tzTGlrZU9iamVjdFBhdGgoa2V5LCBuc1NlcGFyYXRvciwga2V5U2VwYXJhdG9yKTtcblxuICAgICAgaWYgKHdvdWxkQ2hlY2tGb3JOc0luS2V5ICYmICFzZWVtc05hdHVyYWxMYW5ndWFnZSkge1xuICAgICAgICB2YXIgbSA9IGtleS5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcblxuICAgICAgICBpZiAobSAmJiBtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBuYW1lc3BhY2VzOiBuYW1lc3BhY2VzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJ0cyA9IGtleS5zcGxpdChuc1NlcGFyYXRvcik7XG4gICAgICAgIGlmIChuc1NlcGFyYXRvciAhPT0ga2V5U2VwYXJhdG9yIHx8IG5zU2VwYXJhdG9yID09PSBrZXlTZXBhcmF0b3IgJiYgdGhpcy5vcHRpb25zLm5zLmluZGV4T2YocGFydHNbMF0pID4gLTEpIG5hbWVzcGFjZXMgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICBrZXkgPSBwYXJ0cy5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycpIG5hbWVzcGFjZXMgPSBbbmFtZXNwYWNlc107XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgbmFtZXNwYWNlczogbmFtZXNwYWNlc1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJhbnNsYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zbGF0ZShrZXlzLCBvcHRpb25zLCBsYXN0S2V5KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKF90eXBlb2Yob3B0aW9ucykgIT09ICdvYmplY3QnICYmIHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcikge1xuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCB8fCBrZXlzID09PSBudWxsKSByZXR1cm4gJyc7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIGtleXMgPSBbU3RyaW5nKGtleXMpXTtcbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuXG4gICAgICB2YXIgX3RoaXMkZXh0cmFjdEZyb21LZXkgPSB0aGlzLmV4dHJhY3RGcm9tS2V5KGtleXNba2V5cy5sZW5ndGggLSAxXSwgb3B0aW9ucyksXG4gICAgICAgICAga2V5ID0gX3RoaXMkZXh0cmFjdEZyb21LZXkua2V5LFxuICAgICAgICAgIG5hbWVzcGFjZXMgPSBfdGhpcyRleHRyYWN0RnJvbUtleS5uYW1lc3BhY2VzO1xuXG4gICAgICB2YXIgbmFtZXNwYWNlID0gbmFtZXNwYWNlc1tuYW1lc3BhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIGxuZyA9IG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2U7XG4gICAgICB2YXIgYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUgPSBvcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlIHx8IHRoaXMub3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb0NJTW9kZTtcblxuICAgICAgaWYgKGxuZyAmJiBsbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHtcbiAgICAgICAgaWYgKGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlKSB7XG4gICAgICAgICAgdmFyIG5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvciB8fCB0aGlzLm9wdGlvbnMubnNTZXBhcmF0b3I7XG4gICAgICAgICAgcmV0dXJuIG5hbWVzcGFjZSArIG5zU2VwYXJhdG9yICsga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc29sdmVkID0gdGhpcy5yZXNvbHZlKGtleXMsIG9wdGlvbnMpO1xuICAgICAgdmFyIHJlcyA9IHJlc29sdmVkICYmIHJlc29sdmVkLnJlcztcbiAgICAgIHZhciByZXNVc2VkS2V5ID0gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQudXNlZEtleSB8fCBrZXk7XG4gICAgICB2YXIgcmVzRXhhY3RVc2VkS2V5ID0gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQuZXhhY3RVc2VkS2V5IHx8IGtleTtcbiAgICAgIHZhciByZXNUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShyZXMpO1xuICAgICAgdmFyIG5vT2JqZWN0ID0gWydbb2JqZWN0IE51bWJlcl0nLCAnW29iamVjdCBGdW5jdGlvbl0nLCAnW29iamVjdCBSZWdFeHBdJ107XG4gICAgICB2YXIgam9pbkFycmF5cyA9IG9wdGlvbnMuam9pbkFycmF5cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5qb2luQXJyYXlzIDogdGhpcy5vcHRpb25zLmpvaW5BcnJheXM7XG4gICAgICB2YXIgaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgPSAhdGhpcy5pMThuRm9ybWF0IHx8IHRoaXMuaTE4bkZvcm1hdC5oYW5kbGVBc09iamVjdDtcbiAgICAgIHZhciBoYW5kbGVBc09iamVjdCA9IHR5cGVvZiByZXMgIT09ICdzdHJpbmcnICYmIHR5cGVvZiByZXMgIT09ICdib29sZWFuJyAmJiB0eXBlb2YgcmVzICE9PSAnbnVtYmVyJztcblxuICAgICAgaWYgKGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ICYmIHJlcyAmJiBoYW5kbGVBc09iamVjdCAmJiBub09iamVjdC5pbmRleE9mKHJlc1R5cGUpIDwgMCAmJiAhKHR5cGVvZiBqb2luQXJyYXlzID09PSAnc3RyaW5nJyAmJiByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nKSkge1xuICAgICAgICBpZiAoIW9wdGlvbnMucmV0dXJuT2JqZWN0cyAmJiAhdGhpcy5vcHRpb25zLnJldHVybk9iamVjdHMpIHtcbiAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXR1cm5lZE9iamVjdEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2FjY2Vzc2luZyBhbiBvYmplY3QgLSBidXQgcmV0dXJuT2JqZWN0cyBvcHRpb25zIGlzIG5vdCBlbmFibGVkIScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmV0dXJuZWRPYmplY3RIYW5kbGVyID8gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcihyZXNVc2VkS2V5LCByZXMsIF9vYmplY3RTcHJlYWQkMihfb2JqZWN0U3ByZWFkJDIoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAgICAgbnM6IG5hbWVzcGFjZXNcbiAgICAgICAgICB9KSkgOiBcImtleSAnXCIuY29uY2F0KGtleSwgXCIgKFwiKS5jb25jYXQodGhpcy5sYW5ndWFnZSwgXCIpJyByZXR1cm5lZCBhbiBvYmplY3QgaW5zdGVhZCBvZiBzdHJpbmcuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleVNlcGFyYXRvcikge1xuICAgICAgICAgIHZhciByZXNUeXBlSXNBcnJheSA9IHJlc1R5cGUgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgICAgICAgdmFyIGNvcHkgPSByZXNUeXBlSXNBcnJheSA/IFtdIDoge307XG4gICAgICAgICAgdmFyIG5ld0tleVRvVXNlID0gcmVzVHlwZUlzQXJyYXkgPyByZXNFeGFjdFVzZWRLZXkgOiByZXNVc2VkS2V5O1xuXG4gICAgICAgICAgZm9yICh2YXIgbSBpbiByZXMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzLCBtKSkge1xuICAgICAgICAgICAgICB2YXIgZGVlcEtleSA9IFwiXCIuY29uY2F0KG5ld0tleVRvVXNlKS5jb25jYXQoa2V5U2VwYXJhdG9yKS5jb25jYXQobSk7XG4gICAgICAgICAgICAgIGNvcHlbbV0gPSB0aGlzLnRyYW5zbGF0ZShkZWVwS2V5LCBfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCBvcHRpb25zKSwge1xuICAgICAgICAgICAgICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5zOiBuYW1lc3BhY2VzXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgaWYgKGNvcHlbbV0gPT09IGRlZXBLZXkpIGNvcHlbbV0gPSByZXNbbV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzID0gY29weTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCAmJiB0eXBlb2Ygam9pbkFycmF5cyA9PT0gJ3N0cmluZycgJiYgcmVzVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICByZXMgPSByZXMuam9pbihqb2luQXJyYXlzKTtcbiAgICAgICAgaWYgKHJlcykgcmVzID0gdGhpcy5leHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleXMsIG9wdGlvbnMsIGxhc3RLZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHVzZWREZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIHZhciB1c2VkS2V5ID0gZmFsc2U7XG4gICAgICAgIHZhciBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcbiAgICAgICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IFRyYW5zbGF0b3IuaGFzRGVmYXVsdFZhbHVlKG9wdGlvbnMpO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlU3VmZml4ID0gbmVlZHNQbHVyYWxIYW5kbGluZyA/IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGxuZywgb3B0aW9ucy5jb3VudCwgb3B0aW9ucykgOiAnJztcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IG9wdGlvbnNbXCJkZWZhdWx0VmFsdWVcIi5jb25jYXQoZGVmYXVsdFZhbHVlU3VmZml4KV0gfHwgb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSAmJiBoYXNEZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICB1c2VkRGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgcmVzID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSkge1xuICAgICAgICAgIHVzZWRLZXkgPSB0cnVlO1xuICAgICAgICAgIHJlcyA9IGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaXNzaW5nS2V5Tm9WYWx1ZUZhbGxiYWNrVG9LZXkgPSBvcHRpb25zLm1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSB8fCB0aGlzLm9wdGlvbnMubWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5O1xuICAgICAgICB2YXIgcmVzRm9yTWlzc2luZyA9IG1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSAmJiB1c2VkS2V5ID8gdW5kZWZpbmVkIDogcmVzO1xuICAgICAgICB2YXIgdXBkYXRlTWlzc2luZyA9IGhhc0RlZmF1bHRWYWx1ZSAmJiBkZWZhdWx0VmFsdWUgIT09IHJlcyAmJiB0aGlzLm9wdGlvbnMudXBkYXRlTWlzc2luZztcblxuICAgICAgICBpZiAodXNlZEtleSB8fCB1c2VkRGVmYXVsdCB8fCB1cGRhdGVNaXNzaW5nKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIubG9nKHVwZGF0ZU1pc3NpbmcgPyAndXBkYXRlS2V5JyA6ICdtaXNzaW5nS2V5JywgbG5nLCBuYW1lc3BhY2UsIGtleSwgdXBkYXRlTWlzc2luZyA/IGRlZmF1bHRWYWx1ZSA6IHJlcyk7XG5cbiAgICAgICAgICBpZiAoa2V5U2VwYXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgZmsgPSB0aGlzLnJlc29sdmUoa2V5LCBfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCBvcHRpb25zKSwge30sIHtcbiAgICAgICAgICAgICAga2V5U2VwYXJhdG9yOiBmYWxzZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgaWYgKGZrICYmIGZrLnJlcykgdGhpcy5sb2dnZXIud2FybignU2VlbXMgdGhlIGxvYWRlZCB0cmFuc2xhdGlvbnMgd2VyZSBpbiBmbGF0IEpTT04gZm9ybWF0IGluc3RlYWQgb2YgbmVzdGVkLiBFaXRoZXIgc2V0IGtleVNlcGFyYXRvcjogZmFsc2Ugb24gaW5pdCBvciBtYWtlIHN1cmUgeW91ciB0cmFuc2xhdGlvbnMgYXJlIHB1Ymxpc2hlZCBpbiBuZXN0ZWQgZm9ybWF0LicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBsbmdzID0gW107XG4gICAgICAgICAgdmFyIGZhbGxiYWNrTG5ncyA9IHRoaXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZywgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNhdmVNaXNzaW5nVG8gPT09ICdmYWxsYmFjaycgJiYgZmFsbGJhY2tMbmdzICYmIGZhbGxiYWNrTG5nc1swXSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmYWxsYmFja0xuZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbG5ncy5wdXNoKGZhbGxiYWNrTG5nc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdUbyA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIGxuZ3MgPSB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsbmdzLnB1c2gob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNlbmQgPSBmdW5jdGlvbiBzZW5kKGwsIGssIHNwZWNpZmljRGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdEZvck1pc3NpbmcgPSBoYXNEZWZhdWx0VmFsdWUgJiYgc3BlY2lmaWNEZWZhdWx0VmFsdWUgIT09IHJlcyA/IHNwZWNpZmljRGVmYXVsdFZhbHVlIDogcmVzRm9yTWlzc2luZztcblxuICAgICAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKGwsIG5hbWVzcGFjZSwgaywgZGVmYXVsdEZvck1pc3NpbmcsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuYmFja2VuZENvbm5lY3RvciAmJiBfdGhpczIuYmFja2VuZENvbm5lY3Rvci5zYXZlTWlzc2luZykge1xuICAgICAgICAgICAgICBfdGhpczIuYmFja2VuZENvbm5lY3Rvci5zYXZlTWlzc2luZyhsLCBuYW1lc3BhY2UsIGssIGRlZmF1bHRGb3JNaXNzaW5nLCB1cGRhdGVNaXNzaW5nLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXMyLmVtaXQoJ21pc3NpbmdLZXknLCBsLCBuYW1lc3BhY2UsIGssIHJlcyk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdQbHVyYWxzICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgbG5ncy5mb3JFYWNoKGZ1bmN0aW9uIChsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXhlcyhsYW5ndWFnZSkuZm9yRWFjaChmdW5jdGlvbiAoc3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICBzZW5kKFtsYW5ndWFnZV0sIGtleSArIHN1ZmZpeCwgb3B0aW9uc1tcImRlZmF1bHRWYWx1ZVwiLmNvbmNhdChzdWZmaXgpXSB8fCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbmQobG5ncywga2V5LCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyA9IHRoaXMuZXh0ZW5kVHJhbnNsYXRpb24ocmVzLCBrZXlzLCBvcHRpb25zLCByZXNvbHZlZCwgbGFzdEtleSk7XG4gICAgICAgIGlmICh1c2VkS2V5ICYmIHJlcyA9PT0ga2V5ICYmIHRoaXMub3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb01pc3NpbmdLZXkpIHJlcyA9IFwiXCIuY29uY2F0KG5hbWVzcGFjZSwgXCI6XCIpLmNvbmNhdChrZXkpO1xuXG4gICAgICAgIGlmICgodXNlZEtleSB8fCB1c2VkRGVmYXVsdCkgJiYgdGhpcy5vcHRpb25zLnBhcnNlTWlzc2luZ0tleUhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgICAgICAgIHJlcyA9IHRoaXMub3B0aW9ucy5wYXJzZU1pc3NpbmdLZXlIYW5kbGVyKGtleSwgdXNlZERlZmF1bHQgPyByZXMgOiB1bmRlZmluZWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcihyZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRlbmRUcmFuc2xhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleSwgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5wYXJzZSkge1xuICAgICAgICByZXMgPSB0aGlzLmkxOG5Gb3JtYXQucGFyc2UocmVzLCBvcHRpb25zLCByZXNvbHZlZC51c2VkTG5nLCByZXNvbHZlZC51c2VkTlMsIHJlc29sdmVkLnVzZWRLZXksIHtcbiAgICAgICAgICByZXNvbHZlZDogcmVzb2x2ZWRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFvcHRpb25zLnNraXBJbnRlcnBvbGF0aW9uKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmludGVycG9sYXRpb24pIHRoaXMuaW50ZXJwb2xhdG9yLmluaXQoX29iamVjdFNwcmVhZCQyKF9vYmplY3RTcHJlYWQkMih7fSwgb3B0aW9ucyksIHtcbiAgICAgICAgICBpbnRlcnBvbGF0aW9uOiBfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbiksIG9wdGlvbnMuaW50ZXJwb2xhdGlvbilcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgc2tpcE9uVmFyaWFibGVzID0gdHlwZW9mIHJlcyA9PT0gJ3N0cmluZycgJiYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbi5za2lwT25WYXJpYWJsZXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaW50ZXJwb2xhdGlvbi5za2lwT25WYXJpYWJsZXMgOiB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5za2lwT25WYXJpYWJsZXMpO1xuICAgICAgICB2YXIgbmVzdEJlZjtcblxuICAgICAgICBpZiAoc2tpcE9uVmFyaWFibGVzKSB7XG4gICAgICAgICAgdmFyIG5iID0gcmVzLm1hdGNoKHRoaXMuaW50ZXJwb2xhdG9yLm5lc3RpbmdSZWdleHApO1xuICAgICAgICAgIG5lc3RCZWYgPSBuYiAmJiBuYi5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiB0eXBlb2Ygb3B0aW9ucy5yZXBsYWNlICE9PSAnc3RyaW5nJyA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzKSBkYXRhID0gX29iamVjdFNwcmVhZCQyKF9vYmplY3RTcHJlYWQkMih7fSwgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyksIGRhdGEpO1xuICAgICAgICByZXMgPSB0aGlzLmludGVycG9sYXRvci5pbnRlcnBvbGF0ZShyZXMsIGRhdGEsIG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICB2YXIgbmEgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgICAgdmFyIG5lc3RBZnQgPSBuYSAmJiBuYS5sZW5ndGg7XG4gICAgICAgICAgaWYgKG5lc3RCZWYgPCBuZXN0QWZ0KSBvcHRpb25zLm5lc3QgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm5lc3QgIT09IGZhbHNlKSByZXMgPSB0aGlzLmludGVycG9sYXRvci5uZXN0KHJlcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGFzdEtleSAmJiBsYXN0S2V5WzBdID09PSBhcmdzWzBdICYmICFvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgICAgICAgIF90aGlzMy5sb2dnZXIud2FybihcIkl0IHNlZW1zIHlvdSBhcmUgbmVzdGluZyByZWN1cnNpdmVseSBrZXk6IFwiLmNvbmNhdChhcmdzWzBdLCBcIiBpbiBrZXk6IFwiKS5jb25jYXQoa2V5WzBdKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfdGhpczMudHJhbnNsYXRlLmFwcGx5KF90aGlzMywgYXJncy5jb25jYXQoW2tleV0pKTtcbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLmludGVycG9sYXRpb24pIHRoaXMuaW50ZXJwb2xhdG9yLnJlc2V0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3N0UHJvY2VzcyA9IG9wdGlvbnMucG9zdFByb2Nlc3MgfHwgdGhpcy5vcHRpb25zLnBvc3RQcm9jZXNzO1xuICAgICAgdmFyIHBvc3RQcm9jZXNzb3JOYW1lcyA9IHR5cGVvZiBwb3N0UHJvY2VzcyA9PT0gJ3N0cmluZycgPyBbcG9zdFByb2Nlc3NdIDogcG9zdFByb2Nlc3M7XG5cbiAgICAgIGlmIChyZXMgIT09IHVuZGVmaW5lZCAmJiByZXMgIT09IG51bGwgJiYgcG9zdFByb2Nlc3Nvck5hbWVzICYmIHBvc3RQcm9jZXNzb3JOYW1lcy5sZW5ndGggJiYgb3B0aW9ucy5hcHBseVBvc3RQcm9jZXNzb3IgIT09IGZhbHNlKSB7XG4gICAgICAgIHJlcyA9IHBvc3RQcm9jZXNzb3IuaGFuZGxlKHBvc3RQcm9jZXNzb3JOYW1lcywgcmVzLCBrZXksIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMucG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQgPyBfb2JqZWN0U3ByZWFkJDIoe1xuICAgICAgICAgIGkxOG5SZXNvbHZlZDogcmVzb2x2ZWRcbiAgICAgICAgfSwgb3B0aW9ucykgOiBvcHRpb25zLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzb2x2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKGtleXMpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgZm91bmQ7XG4gICAgICB2YXIgdXNlZEtleTtcbiAgICAgIHZhciBleGFjdFVzZWRLZXk7XG4gICAgICB2YXIgdXNlZExuZztcbiAgICAgIHZhciB1c2VkTlM7XG4gICAgICBpZiAodHlwZW9mIGtleXMgPT09ICdzdHJpbmcnKSBrZXlzID0gW2tleXNdO1xuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChfdGhpczQuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcblxuICAgICAgICB2YXIgZXh0cmFjdGVkID0gX3RoaXM0LmV4dHJhY3RGcm9tS2V5KGssIG9wdGlvbnMpO1xuXG4gICAgICAgIHZhciBrZXkgPSBleHRyYWN0ZWQua2V5O1xuICAgICAgICB1c2VkS2V5ID0ga2V5O1xuICAgICAgICB2YXIgbmFtZXNwYWNlcyA9IGV4dHJhY3RlZC5uYW1lc3BhY2VzO1xuICAgICAgICBpZiAoX3RoaXM0Lm9wdGlvbnMuZmFsbGJhY2tOUykgbmFtZXNwYWNlcyA9IG5hbWVzcGFjZXMuY29uY2F0KF90aGlzNC5vcHRpb25zLmZhbGxiYWNrTlMpO1xuICAgICAgICB2YXIgbmVlZHNQbHVyYWxIYW5kbGluZyA9IG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5jb3VudCAhPT0gJ3N0cmluZyc7XG5cbiAgICAgICAgdmFyIG5lZWRzWmVyb1N1ZmZpeExvb2t1cCA9IG5lZWRzUGx1cmFsSGFuZGxpbmcgJiYgIW9wdGlvbnMub3JkaW5hbCAmJiBvcHRpb25zLmNvdW50ID09PSAwICYmIF90aGlzNC5wbHVyYWxSZXNvbHZlci5zaG91bGRVc2VJbnRsQXBpKCk7XG5cbiAgICAgICAgdmFyIG5lZWRzQ29udGV4dEhhbmRsaW5nID0gb3B0aW9ucy5jb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgKHR5cGVvZiBvcHRpb25zLmNvbnRleHQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmNvbnRleHQgPT09ICdudW1iZXInKSAmJiBvcHRpb25zLmNvbnRleHQgIT09ICcnO1xuICAgICAgICB2YXIgY29kZXMgPSBvcHRpb25zLmxuZ3MgPyBvcHRpb25zLmxuZ3MgOiBfdGhpczQubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkob3B0aW9ucy5sbmcgfHwgX3RoaXM0Lmxhbmd1YWdlLCBvcHRpb25zLmZhbGxiYWNrTG5nKTtcbiAgICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgIGlmIChfdGhpczQuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgICB1c2VkTlMgPSBucztcblxuICAgICAgICAgIGlmICghY2hlY2tlZExvYWRlZEZvcltcIlwiLmNvbmNhdChjb2Rlc1swXSwgXCItXCIpLmNvbmNhdChucyldICYmIF90aGlzNC51dGlscyAmJiBfdGhpczQudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlICYmICFfdGhpczQudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlKHVzZWROUykpIHtcbiAgICAgICAgICAgIGNoZWNrZWRMb2FkZWRGb3JbXCJcIi5jb25jYXQoY29kZXNbMF0sIFwiLVwiKS5jb25jYXQobnMpXSA9IHRydWU7XG5cbiAgICAgICAgICAgIF90aGlzNC5sb2dnZXIud2FybihcImtleSBcXFwiXCIuY29uY2F0KHVzZWRLZXksIFwiXFxcIiBmb3IgbGFuZ3VhZ2VzIFxcXCJcIikuY29uY2F0KGNvZGVzLmpvaW4oJywgJyksIFwiXFxcIiB3b24ndCBnZXQgcmVzb2x2ZWQgYXMgbmFtZXNwYWNlIFxcXCJcIikuY29uY2F0KHVzZWROUywgXCJcXFwiIHdhcyBub3QgeWV0IGxvYWRlZFwiKSwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvZGVzLmZvckVhY2goZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczQuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgICAgIHVzZWRMbmcgPSBjb2RlO1xuICAgICAgICAgICAgdmFyIGZpbmFsS2V5cyA9IFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXM0LmkxOG5Gb3JtYXQgJiYgX3RoaXM0LmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cykge1xuICAgICAgICAgICAgICBfdGhpczQuaTE4bkZvcm1hdC5hZGRMb29rdXBLZXlzKGZpbmFsS2V5cywga2V5LCBjb2RlLCBucywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgcGx1cmFsU3VmZml4O1xuICAgICAgICAgICAgICBpZiAobmVlZHNQbHVyYWxIYW5kbGluZykgcGx1cmFsU3VmZml4ID0gX3RoaXM0LnBsdXJhbFJlc29sdmVyLmdldFN1ZmZpeChjb2RlLCBvcHRpb25zLmNvdW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgdmFyIHplcm9TdWZmaXggPSAnX3plcm8nO1xuXG4gICAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgcGx1cmFsU3VmZml4KTtcblxuICAgICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICAgIGZpbmFsS2V5cy5wdXNoKGtleSArIHplcm9TdWZmaXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChuZWVkc0NvbnRleHRIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0S2V5ID0gXCJcIi5jb25jYXQoa2V5KS5jb25jYXQoX3RoaXM0Lm9wdGlvbnMuY29udGV4dFNlcGFyYXRvcikuY29uY2F0KG9wdGlvbnMuY29udGV4dCk7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNQbHVyYWxIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHBsdXJhbFN1ZmZpeCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHplcm9TdWZmaXgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcG9zc2libGVLZXk7XG5cbiAgICAgICAgICAgIHdoaWxlIChwb3NzaWJsZUtleSA9IGZpbmFsS2V5cy5wb3AoKSkge1xuICAgICAgICAgICAgICBpZiAoIV90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkge1xuICAgICAgICAgICAgICAgIGV4YWN0VXNlZEtleSA9IHBvc3NpYmxlS2V5O1xuICAgICAgICAgICAgICAgIGZvdW5kID0gX3RoaXM0LmdldFJlc291cmNlKGNvZGUsIG5zLCBwb3NzaWJsZUtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlczogZm91bmQsXG4gICAgICAgIHVzZWRLZXk6IHVzZWRLZXksXG4gICAgICAgIGV4YWN0VXNlZEtleTogZXhhY3RVc2VkS2V5LFxuICAgICAgICB1c2VkTG5nOiB1c2VkTG5nLFxuICAgICAgICB1c2VkTlM6IHVzZWROU1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZExvb2t1cFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkTG9va3VwKHJlcykge1xuICAgICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5OdWxsICYmIHJlcyA9PT0gbnVsbCkgJiYgISghdGhpcy5vcHRpb25zLnJldHVybkVtcHR5U3RyaW5nICYmIHJlcyA9PT0gJycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXNvdXJjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXNvdXJjZShjb2RlLCBucywga2V5KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5nZXRSZXNvdXJjZSkgcmV0dXJuIHRoaXMuaTE4bkZvcm1hdC5nZXRSZXNvdXJjZShjb2RlLCBucywga2V5LCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnJlc291cmNlU3RvcmUuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiaGFzRGVmYXVsdFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0RlZmF1bHRWYWx1ZShvcHRpb25zKSB7XG4gICAgICB2YXIgcHJlZml4ID0gJ2RlZmF1bHRWYWx1ZSc7XG5cbiAgICAgIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgb3B0aW9uKSAmJiBwcmVmaXggPT09IG9wdGlvbi5zdWJzdHJpbmcoMCwgcHJlZml4Lmxlbmd0aCkgJiYgdW5kZWZpbmVkICE9PSBvcHRpb25zW29wdGlvbl0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYW5zbGF0b3I7XG59KEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbnZhciBMYW5ndWFnZVV0aWwgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExhbmd1YWdlVXRpbChvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExhbmd1YWdlVXRpbCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3VwcG9ydGVkTG5ncyA9IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzIHx8IGZhbHNlO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2xhbmd1YWdlVXRpbHMnKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMYW5ndWFnZVV0aWwsIFt7XG4gICAga2V5OiBcImdldFNjcmlwdFBhcnRGcm9tQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICAgIGlmIChwLmxlbmd0aCA9PT0gMikgcmV0dXJuIG51bGw7XG4gICAgICBwLnBvcCgpO1xuICAgICAgaWYgKHBbcC5sZW5ndGggLSAxXS50b0xvd2VyQ2FzZSgpID09PSAneCcpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHAuam9pbignLScpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIGNvZGU7XG4gICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShwWzBdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TGFuZ3VhZ2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSB7XG4gICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgdmFyIHNwZWNpYWxDYXNlcyA9IFsnaGFucycsICdoYW50JywgJ2xhdG4nLCAnY3lybCcsICdjYW5zJywgJ21vbmcnLCAnYXJhYiddO1xuICAgICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZykge1xuICAgICAgICAgIHAgPSBwLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChwLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHBbMF0gPSBwWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcFsxXSA9IHBbMV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICBpZiAoc3BlY2lhbENhc2VzLmluZGV4T2YocFsxXS50b0xvd2VyQ2FzZSgpKSA+IC0xKSBwWzFdID0gY2FwaXRhbGl6ZShwWzFdLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHAubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAocFsxXS5sZW5ndGggPT09IDIpIHBbMV0gPSBwWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKHBbMF0gIT09ICdzZ24nICYmIHBbMl0ubGVuZ3RoID09PSAyKSBwWzJdID0gcFsyXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzFdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMV0gPSBjYXBpdGFsaXplKHBbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMl0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsyXSA9IGNhcGl0YWxpemUocFsyXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwLmpvaW4oJy0nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGVhbkNvZGUgfHwgdGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZyA/IGNvZGUudG9Mb3dlckNhc2UoKSA6IGNvZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU3VwcG9ydGVkQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N1cHBvcnRlZENvZGUoY29kZSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkID09PSAnbGFuZ3VhZ2VPbmx5JyB8fCB0aGlzLm9wdGlvbnMubm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzKSB7XG4gICAgICAgIGNvZGUgPSB0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIXRoaXMuc3VwcG9ydGVkTG5ncyB8fCAhdGhpcy5zdXBwb3J0ZWRMbmdzLmxlbmd0aCB8fCB0aGlzLnN1cHBvcnRlZExuZ3MuaW5kZXhPZihjb2RlKSA+IC0xO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRCZXN0TWF0Y2hGcm9tQ29kZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QmVzdE1hdGNoRnJvbUNvZGVzKGNvZGVzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIWNvZGVzKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIGNvZGVzLmZvckVhY2goZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGNsZWFuZWRMbmcgPSBfdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSk7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MgfHwgX3RoaXMuaXNTdXBwb3J0ZWRDb2RlKGNsZWFuZWRMbmcpKSBmb3VuZCA9IGNsZWFuZWRMbmc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFmb3VuZCAmJiB0aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncykge1xuICAgICAgICBjb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG5cbiAgICAgICAgICB2YXIgbG5nT25seSA9IF90aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuXG4gICAgICAgICAgaWYgKF90aGlzLmlzU3VwcG9ydGVkQ29kZShsbmdPbmx5KSkgcmV0dXJuIGZvdW5kID0gbG5nT25seTtcbiAgICAgICAgICBmb3VuZCA9IF90aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncy5maW5kKGZ1bmN0aW9uIChzdXBwb3J0ZWRMbmcpIHtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcuaW5kZXhPZihsbmdPbmx5KSA9PT0gMCkgcmV0dXJuIHN1cHBvcnRlZExuZztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZm91bmQpIGZvdW5kID0gdGhpcy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZylbMF07XG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZhbGxiYWNrQ29kZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmFsbGJhY2tDb2RlcyhmYWxsYmFja3MsIGNvZGUpIHtcbiAgICAgIGlmICghZmFsbGJhY2tzKSByZXR1cm4gW107XG4gICAgICBpZiAodHlwZW9mIGZhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykgZmFsbGJhY2tzID0gZmFsbGJhY2tzKGNvZGUpO1xuICAgICAgaWYgKHR5cGVvZiBmYWxsYmFja3MgPT09ICdzdHJpbmcnKSBmYWxsYmFja3MgPSBbZmFsbGJhY2tzXTtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KGZhbGxiYWNrcykgPT09ICdbb2JqZWN0IEFycmF5XScpIHJldHVybiBmYWxsYmFja3M7XG4gICAgICBpZiAoIWNvZGUpIHJldHVybiBmYWxsYmFja3NbXCJkZWZhdWx0XCJdIHx8IFtdO1xuICAgICAgdmFyIGZvdW5kID0gZmFsbGJhY2tzW2NvZGVdO1xuICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSldO1xuICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSldO1xuICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKV07XG4gICAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1tcImRlZmF1bHRcIl07XG4gICAgICByZXR1cm4gZm91bmQgfHwgW107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvUmVzb2x2ZUhpZXJhcmNoeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1Jlc29sdmVIaWVyYXJjaHkoY29kZSwgZmFsbGJhY2tDb2RlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGZhbGxiYWNrQ29kZXMgPSB0aGlzLmdldEZhbGxiYWNrQ29kZXMoZmFsbGJhY2tDb2RlIHx8IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyB8fCBbXSwgY29kZSk7XG4gICAgICB2YXIgY29kZXMgPSBbXTtcblxuICAgICAgdmFyIGFkZENvZGUgPSBmdW5jdGlvbiBhZGRDb2RlKGMpIHtcbiAgICAgICAgaWYgKCFjKSByZXR1cm47XG5cbiAgICAgICAgaWYgKF90aGlzMi5pc1N1cHBvcnRlZENvZGUoYykpIHtcbiAgICAgICAgICBjb2Rlcy5wdXNoKGMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5sb2dnZXIud2FybihcInJlamVjdGluZyBsYW5ndWFnZSBjb2RlIG5vdCBmb3VuZCBpbiBzdXBwb3J0ZWRMbmdzOiBcIi5jb25jYXQoYykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnbGFuZ3VhZ2VPbmx5JykgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2xhbmd1YWdlT25seScgJiYgdGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICBhZGRDb2RlKHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpKTtcbiAgICAgIH1cblxuICAgICAgZmFsbGJhY2tDb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChmYykge1xuICAgICAgICBpZiAoY29kZXMuaW5kZXhPZihmYykgPCAwKSBhZGRDb2RlKF90aGlzMi5mb3JtYXRMYW5ndWFnZUNvZGUoZmMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvZGVzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMYW5ndWFnZVV0aWw7XG59KCk7XG5cbnZhciBzZXRzID0gW3tcbiAgbG5nczogWydhY2gnLCAnYWsnLCAnYW0nLCAnYXJuJywgJ2JyJywgJ2ZpbCcsICdndW4nLCAnbG4nLCAnbWZlJywgJ21nJywgJ21pJywgJ29jJywgJ3B0JywgJ3B0LUJSJywgJ3RnJywgJ3RsJywgJ3RpJywgJ3RyJywgJ3V6JywgJ3dhJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxXG59LCB7XG4gIGxuZ3M6IFsnYWYnLCAnYW4nLCAnYXN0JywgJ2F6JywgJ2JnJywgJ2JuJywgJ2NhJywgJ2RhJywgJ2RlJywgJ2RldicsICdlbCcsICdlbicsICdlbycsICdlcycsICdldCcsICdldScsICdmaScsICdmbycsICdmdXInLCAnZnknLCAnZ2wnLCAnZ3UnLCAnaGEnLCAnaGknLCAnaHUnLCAnaHknLCAnaWEnLCAnaXQnLCAna2snLCAna24nLCAna3UnLCAnbGInLCAnbWFpJywgJ21sJywgJ21uJywgJ21yJywgJ25haCcsICduYXAnLCAnbmInLCAnbmUnLCAnbmwnLCAnbm4nLCAnbm8nLCAnbnNvJywgJ3BhJywgJ3BhcCcsICdwbXMnLCAncHMnLCAncHQtUFQnLCAncm0nLCAnc2NvJywgJ3NlJywgJ3NpJywgJ3NvJywgJ3NvbicsICdzcScsICdzdicsICdzdycsICd0YScsICd0ZScsICd0aycsICd1cicsICd5byddLFxuICBucjogWzEsIDJdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ2F5JywgJ2JvJywgJ2NnZycsICdmYScsICdodCcsICdpZCcsICdqYScsICdqYm8nLCAna2EnLCAna20nLCAna28nLCAna3knLCAnbG8nLCAnbXMnLCAnc2FoJywgJ3N1JywgJ3RoJywgJ3R0JywgJ3VnJywgJ3ZpJywgJ3dvJywgJ3poJ10sXG4gIG5yOiBbMV0sXG4gIGZjOiAzXG59LCB7XG4gIGxuZ3M6IFsnYmUnLCAnYnMnLCAnY25yJywgJ2R6JywgJ2hyJywgJ3J1JywgJ3NyJywgJ3VrJ10sXG4gIG5yOiBbMSwgMiwgNV0sXG4gIGZjOiA0XG59LCB7XG4gIGxuZ3M6IFsnYXInXSxcbiAgbnI6IFswLCAxLCAyLCAzLCAxMSwgMTAwXSxcbiAgZmM6IDVcbn0sIHtcbiAgbG5nczogWydjcycsICdzayddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogNlxufSwge1xuICBsbmdzOiBbJ2NzYicsICdwbCddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogN1xufSwge1xuICBsbmdzOiBbJ2N5J10sXG4gIG5yOiBbMSwgMiwgMywgOF0sXG4gIGZjOiA4XG59LCB7XG4gIGxuZ3M6IFsnZnInXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDlcbn0sIHtcbiAgbG5nczogWydnYSddLFxuICBucjogWzEsIDIsIDMsIDcsIDExXSxcbiAgZmM6IDEwXG59LCB7XG4gIGxuZ3M6IFsnZ2QnXSxcbiAgbnI6IFsxLCAyLCAzLCAyMF0sXG4gIGZjOiAxMVxufSwge1xuICBsbmdzOiBbJ2lzJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxMlxufSwge1xuICBsbmdzOiBbJ2p2J10sXG4gIG5yOiBbMCwgMV0sXG4gIGZjOiAxM1xufSwge1xuICBsbmdzOiBbJ2t3J10sXG4gIG5yOiBbMSwgMiwgMywgNF0sXG4gIGZjOiAxNFxufSwge1xuICBsbmdzOiBbJ2x0J10sXG4gIG5yOiBbMSwgMiwgMTBdLFxuICBmYzogMTVcbn0sIHtcbiAgbG5nczogWydsdiddLFxuICBucjogWzEsIDIsIDBdLFxuICBmYzogMTZcbn0sIHtcbiAgbG5nczogWydtayddLFxuICBucjogWzEsIDJdLFxuICBmYzogMTdcbn0sIHtcbiAgbG5nczogWydtbmsnXSxcbiAgbnI6IFswLCAxLCAyXSxcbiAgZmM6IDE4XG59LCB7XG4gIGxuZ3M6IFsnbXQnXSxcbiAgbnI6IFsxLCAyLCAxMSwgMjBdLFxuICBmYzogMTlcbn0sIHtcbiAgbG5nczogWydvciddLFxuICBucjogWzIsIDFdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ3JvJ10sXG4gIG5yOiBbMSwgMiwgMjBdLFxuICBmYzogMjBcbn0sIHtcbiAgbG5nczogWydzbCddLFxuICBucjogWzUsIDEsIDIsIDNdLFxuICBmYzogMjFcbn0sIHtcbiAgbG5nczogWydoZScsICdpdyddLFxuICBucjogWzEsIDIsIDIwLCAyMV0sXG4gIGZjOiAyMlxufV07XG52YXIgX3J1bGVzUGx1cmFsc1R5cGVzID0ge1xuICAxOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPiAxKTtcbiAgfSxcbiAgMjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICE9IDEpO1xuICB9LFxuICAzOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgNDogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDU6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiBuID09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1KTtcbiAgfSxcbiAgNjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA+PSAyICYmIG4gPD0gNCA/IDEgOiAyKTtcbiAgfSxcbiAgNzogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiAlIDEwID49IDIgJiYgbiAlIDEwIDw9IDQgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgODogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IG4gIT0gOCAmJiBuICE9IDExID8gMiA6IDMpO1xuICB9LFxuICA5OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPj0gMik7XG4gIH0sXG4gIDEwOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA8IDcgPyAyIDogbiA8IDExID8gMyA6IDQpO1xuICB9LFxuICAxMTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgfHwgbiA9PSAxMSA/IDAgOiBuID09IDIgfHwgbiA9PSAxMiA/IDEgOiBuID4gMiAmJiBuIDwgMjAgPyAyIDogMyk7XG4gIH0sXG4gIDEyOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCAhPSAxIHx8IG4gJSAxMDAgPT0gMTEpO1xuICB9LFxuICAxMzogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICE9PSAwKTtcbiAgfSxcbiAgMTQ6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuID09IDMgPyAyIDogMyk7XG4gIH0sXG4gIDE1OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgMTY6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiAlIDEwID09IDEgJiYgbiAlIDEwMCAhPSAxMSA/IDAgOiBuICE9PSAwID8gMSA6IDIpO1xuICB9LFxuICAxNzogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgfHwgbiAlIDEwID09IDEgJiYgbiAlIDEwMCAhPSAxMSA/IDAgOiAxKTtcbiAgfSxcbiAgMTg6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiAyKTtcbiAgfSxcbiAgMTk6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMSAmJiBuICUgMTAwIDwgMTEgPyAxIDogbiAlIDEwMCA+IDEwICYmIG4gJSAxMDAgPCAyMCA/IDIgOiAzKTtcbiAgfSxcbiAgMjA6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMCAmJiBuICUgMTAwIDwgMjAgPyAxIDogMik7XG4gIH0sXG4gIDIxOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMDAgPT0gMSA/IDEgOiBuICUgMTAwID09IDIgPyAyIDogbiAlIDEwMCA9PSAzIHx8IG4gJSAxMDAgPT0gNCA/IDMgOiAwKTtcbiAgfSxcbiAgMjI6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiAobiA8IDAgfHwgbiA+IDEwKSAmJiBuICUgMTAgPT0gMCA/IDIgOiAzKTtcbiAgfVxufTtcbnZhciBkZXByZWNhdGVkSnNvblZlcnNpb25zID0gWyd2MScsICd2MicsICd2MyddO1xudmFyIHN1ZmZpeGVzT3JkZXIgPSB7XG4gIHplcm86IDAsXG4gIG9uZTogMSxcbiAgdHdvOiAyLFxuICBmZXc6IDMsXG4gIG1hbnk6IDQsXG4gIG90aGVyOiA1XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVSdWxlcygpIHtcbiAgdmFyIHJ1bGVzID0ge307XG4gIHNldHMuZm9yRWFjaChmdW5jdGlvbiAoc2V0KSB7XG4gICAgc2V0LmxuZ3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgcnVsZXNbbF0gPSB7XG4gICAgICAgIG51bWJlcnM6IHNldC5ucixcbiAgICAgICAgcGx1cmFsczogX3J1bGVzUGx1cmFsc1R5cGVzW3NldC5mY11cbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcnVsZXM7XG59XG5cbnZhciBQbHVyYWxSZXNvbHZlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1cmFsUmVzb2x2ZXIobGFuZ3VhZ2VVdGlscykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbHVyYWxSZXNvbHZlcik7XG5cbiAgICB0aGlzLmxhbmd1YWdlVXRpbHMgPSBsYW5ndWFnZVV0aWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgncGx1cmFsUmVzb2x2ZXInKTtcblxuICAgIGlmICgoIXRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiB8fCB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2NCcpICYmICh0eXBlb2YgSW50bCA9PT0gJ3VuZGVmaW5lZCcgfHwgIUludGwuUGx1cmFsUnVsZXMpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPSAndjMnO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ1lvdXIgZW52aXJvbm1lbnQgc2VlbXMgbm90IHRvIGJlIEludGwgQVBJIGNvbXBhdGlibGUsIHVzZSBhbiBJbnRsLlBsdXJhbFJ1bGVzIHBvbHlmaWxsLiBXaWxsIGZhbGxiYWNrIHRvIHRoZSBjb21wYXRpYmlsaXR5SlNPTiB2MyBmb3JtYXQgaGFuZGxpbmcuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IGNyZWF0ZVJ1bGVzKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGx1cmFsUmVzb2x2ZXIsIFt7XG4gICAga2V5OiBcImFkZFJ1bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShsbmcsIG9iaikge1xuICAgICAgdGhpcy5ydWxlc1tsbmddID0gb2JqO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSdWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUoY29kZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gbmV3IEludGwuUGx1cmFsUnVsZXMoY29kZSwge1xuICAgICAgICAgICAgdHlwZTogb3B0aW9ucy5vcmRpbmFsID8gJ29yZGluYWwnIDogJ2NhcmRpbmFsJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzW2NvZGVdIHx8IHRoaXMucnVsZXNbdGhpcy5sYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmVlZHNQbHVyYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmVlZHNQbHVyYWwoY29kZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgICByZXR1cm4gcnVsZSAmJiBydWxlLnJlc29sdmVkT3B0aW9ucygpLnBsdXJhbENhdGVnb3JpZXMubGVuZ3RoID4gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJ1bGUgJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA+IDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBsdXJhbEZvcm1zT2ZLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGx1cmFsRm9ybXNPZktleShjb2RlLCBrZXkpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmdldFN1ZmZpeGVzKGNvZGUsIG9wdGlvbnMpLm1hcChmdW5jdGlvbiAoc3VmZml4KSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXkpLmNvbmNhdChzdWZmaXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFN1ZmZpeGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1ZmZpeGVzKGNvZGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBydWxlID0gdGhpcy5nZXRSdWxlKGNvZGUsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5zb3J0KGZ1bmN0aW9uIChwbHVyYWxDYXRlZ29yeTEsIHBsdXJhbENhdGVnb3J5Mikge1xuICAgICAgICAgIHJldHVybiBzdWZmaXhlc09yZGVyW3BsdXJhbENhdGVnb3J5MV0gLSBzdWZmaXhlc09yZGVyW3BsdXJhbENhdGVnb3J5Ml07XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAocGx1cmFsQ2F0ZWdvcnkpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoX3RoaXMub3B0aW9ucy5wcmVwZW5kKS5jb25jYXQocGx1cmFsQ2F0ZWdvcnkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJ1bGUubnVtYmVycy5tYXAoZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0U3VmZml4KGNvZGUsIG51bWJlciwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U3VmZml4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1ZmZpeChjb2RlLCBjb3VudCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGlzLm9wdGlvbnMucHJlcGVuZCkuY29uY2F0KHJ1bGUuc2VsZWN0KGNvdW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUocnVsZSwgY291bnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZ2dlci53YXJuKFwibm8gcGx1cmFsIHJ1bGUgZm91bmQgZm9yOiBcIi5jb25jYXQoY29kZSkpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTdWZmaXhSZXRyb0NvbXBhdGlibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3VmZml4UmV0cm9Db21wYXRpYmxlKHJ1bGUsIGNvdW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGlkeCA9IHJ1bGUubm9BYnMgPyBydWxlLnBsdXJhbHMoY291bnQpIDogcnVsZS5wbHVyYWxzKE1hdGguYWJzKGNvdW50KSk7XG4gICAgICB2YXIgc3VmZml4ID0gcnVsZS5udW1iZXJzW2lkeF07XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXggJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA9PT0gMiAmJiBydWxlLm51bWJlcnNbMF0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN1ZmZpeCA9PT0gMikge1xuICAgICAgICAgIHN1ZmZpeCA9ICdwbHVyYWwnO1xuICAgICAgICB9IGVsc2UgaWYgKHN1ZmZpeCA9PT0gMSkge1xuICAgICAgICAgIHN1ZmZpeCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXR1cm5TdWZmaXggPSBmdW5jdGlvbiByZXR1cm5TdWZmaXgoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5wcmVwZW5kICYmIHN1ZmZpeC50b1N0cmluZygpID8gX3RoaXMyLm9wdGlvbnMucHJlcGVuZCArIHN1ZmZpeC50b1N0cmluZygpIDogc3VmZml4LnRvU3RyaW5nKCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OID09PSAndjEnKSB7XG4gICAgICAgIGlmIChzdWZmaXggPT09IDEpIHJldHVybiAnJztcbiAgICAgICAgaWYgKHR5cGVvZiBzdWZmaXggPT09ICdudW1iZXInKSByZXR1cm4gXCJfcGx1cmFsX1wiLmNvbmNhdChzdWZmaXgudG9TdHJpbmcoKSk7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OID09PSAndjInKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4ICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wcmVwZW5kICYmIGlkeC50b1N0cmluZygpID8gdGhpcy5vcHRpb25zLnByZXBlbmQgKyBpZHgudG9TdHJpbmcoKSA6IGlkeC50b1N0cmluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRVc2VJbnRsQXBpXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUludGxBcGkoKSB7XG4gICAgICByZXR1cm4gIWRlcHJlY2F0ZWRKc29uVmVyc2lvbnMuaW5jbHVkZXModGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGx1cmFsUmVzb2x2ZXI7XG59KCk7XG5cbmZ1bmN0aW9uIG93bktleXMkMyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMyh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgSW50ZXJwb2xhdG9yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbnRlcnBvbGF0b3IoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludGVycG9sYXRvcik7XG5cbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdpbnRlcnBvbGF0b3InKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5mb3JtYXQgPSBvcHRpb25zLmludGVycG9sYXRpb24gJiYgb3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbml0KG9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEludGVycG9sYXRvciwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLmludGVycG9sYXRpb24pIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgICAgZXNjYXBlVmFsdWU6IHRydWVcbiAgICAgIH07XG4gICAgICB2YXIgaU9wdHMgPSBvcHRpb25zLmludGVycG9sYXRpb247XG4gICAgICB0aGlzLmVzY2FwZSA9IGlPcHRzLmVzY2FwZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlIDogZXNjYXBlO1xuICAgICAgdGhpcy5lc2NhcGVWYWx1ZSA9IGlPcHRzLmVzY2FwZVZhbHVlICE9PSB1bmRlZmluZWQgPyBpT3B0cy5lc2NhcGVWYWx1ZSA6IHRydWU7XG4gICAgICB0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgPSBpT3B0cy51c2VSYXdWYWx1ZVRvRXNjYXBlICE9PSB1bmRlZmluZWQgPyBpT3B0cy51c2VSYXdWYWx1ZVRvRXNjYXBlIDogZmFsc2U7XG4gICAgICB0aGlzLnByZWZpeCA9IGlPcHRzLnByZWZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLnByZWZpeCkgOiBpT3B0cy5wcmVmaXhFc2NhcGVkIHx8ICd7eyc7XG4gICAgICB0aGlzLnN1ZmZpeCA9IGlPcHRzLnN1ZmZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLnN1ZmZpeCkgOiBpT3B0cy5zdWZmaXhFc2NhcGVkIHx8ICd9fSc7XG4gICAgICB0aGlzLmZvcm1hdFNlcGFyYXRvciA9IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA/IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA6IGlPcHRzLmZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gICAgICB0aGlzLnVuZXNjYXBlUHJlZml4ID0gaU9wdHMudW5lc2NhcGVTdWZmaXggPyAnJyA6IGlPcHRzLnVuZXNjYXBlUHJlZml4IHx8ICctJztcbiAgICAgIHRoaXMudW5lc2NhcGVTdWZmaXggPSB0aGlzLnVuZXNjYXBlUHJlZml4ID8gJycgOiBpT3B0cy51bmVzY2FwZVN1ZmZpeCB8fCAnJztcbiAgICAgIHRoaXMubmVzdGluZ1ByZWZpeCA9IGlPcHRzLm5lc3RpbmdQcmVmaXggPyByZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nUHJlZml4KSA6IGlPcHRzLm5lc3RpbmdQcmVmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCckdCgnKTtcbiAgICAgIHRoaXMubmVzdGluZ1N1ZmZpeCA9IGlPcHRzLm5lc3RpbmdTdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nU3VmZml4KSA6IGlPcHRzLm5lc3RpbmdTdWZmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCcpJyk7XG4gICAgICB0aGlzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yID0gaU9wdHMubmVzdGluZ09wdGlvbnNTZXBhcmF0b3IgPyBpT3B0cy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvciA6IGlPcHRzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yIHx8ICcsJztcbiAgICAgIHRoaXMubWF4UmVwbGFjZXMgPSBpT3B0cy5tYXhSZXBsYWNlcyA/IGlPcHRzLm1heFJlcGxhY2VzIDogMTAwMDtcbiAgICAgIHRoaXMuYWx3YXlzRm9ybWF0ID0gaU9wdHMuYWx3YXlzRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBpT3B0cy5hbHdheXNGb3JtYXQgOiBmYWxzZTtcbiAgICAgIHRoaXMucmVzZXRSZWdFeHAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zKSB0aGlzLmluaXQodGhpcy5vcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRSZWdFeHBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRSZWdFeHAoKSB7XG4gICAgICB2YXIgcmVnZXhwU3RyID0gXCJcIi5jb25jYXQodGhpcy5wcmVmaXgsIFwiKC4rPylcIikuY29uY2F0KHRoaXMuc3VmZml4KTtcbiAgICAgIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChyZWdleHBTdHIsICdnJyk7XG4gICAgICB2YXIgcmVnZXhwVW5lc2NhcGVTdHIgPSBcIlwiLmNvbmNhdCh0aGlzLnByZWZpeCkuY29uY2F0KHRoaXMudW5lc2NhcGVQcmVmaXgsIFwiKC4rPylcIikuY29uY2F0KHRoaXMudW5lc2NhcGVTdWZmaXgpLmNvbmNhdCh0aGlzLnN1ZmZpeCk7XG4gICAgICB0aGlzLnJlZ2V4cFVuZXNjYXBlID0gbmV3IFJlZ0V4cChyZWdleHBVbmVzY2FwZVN0ciwgJ2cnKTtcbiAgICAgIHZhciBuZXN0aW5nUmVnZXhwU3RyID0gXCJcIi5jb25jYXQodGhpcy5uZXN0aW5nUHJlZml4LCBcIiguKz8pXCIpLmNvbmNhdCh0aGlzLm5lc3RpbmdTdWZmaXgpO1xuICAgICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gbmV3IFJlZ0V4cChuZXN0aW5nUmVnZXhwU3RyLCAnZycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbnRlcnBvbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdHIsIGRhdGEsIGxuZywgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1hdGNoO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIHJlcGxhY2VzO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMgfHwge307XG5cbiAgICAgIGZ1bmN0aW9uIHJlZ2V4U2FmZSh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9cXCQvZywgJyQkJCQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhbmRsZUZvcm1hdCA9IGZ1bmN0aW9uIGhhbmRsZUZvcm1hdChrZXkpIHtcbiAgICAgICAgaWYgKGtleS5pbmRleE9mKF90aGlzLmZvcm1hdFNlcGFyYXRvcikgPCAwKSB7XG4gICAgICAgICAgdmFyIHBhdGggPSBnZXRQYXRoV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXkpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5hbHdheXNGb3JtYXQgPyBfdGhpcy5mb3JtYXQocGF0aCwgdW5kZWZpbmVkLCBsbmcsIF9vYmplY3RTcHJlYWQkMyhfb2JqZWN0U3ByZWFkJDMoX29iamVjdFNwcmVhZCQzKHt9LCBvcHRpb25zKSwgZGF0YSksIHt9LCB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9ua2V5OiBrZXlcbiAgICAgICAgICB9KSkgOiBwYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHAgPSBrZXkuc3BsaXQoX3RoaXMuZm9ybWF0U2VwYXJhdG9yKTtcbiAgICAgICAgdmFyIGsgPSBwLnNoaWZ0KCkudHJpbSgpO1xuICAgICAgICB2YXIgZiA9IHAuam9pbihfdGhpcy5mb3JtYXRTZXBhcmF0b3IpLnRyaW0oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdChnZXRQYXRoV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrKSwgZiwgbG5nLCBfb2JqZWN0U3ByZWFkJDMoX29iamVjdFNwcmVhZCQzKF9vYmplY3RTcHJlYWQkMyh7fSwgb3B0aW9ucyksIGRhdGEpLCB7fSwge1xuICAgICAgICAgIGludGVycG9sYXRpb25rZXk6IGtcbiAgICAgICAgfSkpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgICAgdmFyIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5taXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgfHwgdGhpcy5vcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjtcbiAgICAgIHZhciBza2lwT25WYXJpYWJsZXMgPSBvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzIDogdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzO1xuICAgICAgdmFyIHRvZG9zID0gW3tcbiAgICAgICAgcmVnZXg6IHRoaXMucmVnZXhwVW5lc2NhcGUsXG4gICAgICAgIHNhZmVWYWx1ZTogZnVuY3Rpb24gc2FmZVZhbHVlKHZhbCkge1xuICAgICAgICAgIHJldHVybiByZWdleFNhZmUodmFsKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICByZWdleDogdGhpcy5yZWdleHAsXG4gICAgICAgIHNhZmVWYWx1ZTogZnVuY3Rpb24gc2FmZVZhbHVlKHZhbCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5lc2NhcGVWYWx1ZSA/IHJlZ2V4U2FmZShfdGhpcy5lc2NhcGUodmFsKSkgOiByZWdleFNhZmUodmFsKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgICB0b2Rvcy5mb3JFYWNoKGZ1bmN0aW9uICh0b2RvKSB7XG4gICAgICAgIHJlcGxhY2VzID0gMDtcblxuICAgICAgICB3aGlsZSAobWF0Y2ggPSB0b2RvLnJlZ2V4LmV4ZWMoc3RyKSkge1xuICAgICAgICAgIHZhciBtYXRjaGVkVmFyID0gbWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgIHZhbHVlID0gaGFuZGxlRm9ybWF0KG1hdGNoZWRWYXIpO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHZhciB0ZW1wID0gbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyKHN0ciwgbWF0Y2gsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICB2YWx1ZSA9IHR5cGVvZiB0ZW1wID09PSAnc3RyaW5nJyA/IHRlbXAgOiAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KG1hdGNoZWRWYXIpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNraXBPblZhcmlhYmxlcykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzLmxvZ2dlci53YXJuKFwibWlzc2VkIHRvIHBhc3MgaW4gdmFyaWFibGUgXCIuY29uY2F0KG1hdGNoZWRWYXIsIFwiIGZvciBpbnRlcnBvbGF0aW5nIFwiKS5jb25jYXQoc3RyKSk7XG5cbiAgICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgIV90aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbWFrZVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNhZmVWYWx1ZSA9IHRvZG8uc2FmZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShtYXRjaFswXSwgc2FmZVZhbHVlKTtcblxuICAgICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ICs9IHNhZmVWYWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB0b2RvLnJlZ2V4Lmxhc3RJbmRleCAtPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXBsYWNlcysrO1xuXG4gICAgICAgICAgaWYgKHJlcGxhY2VzID49IF90aGlzLm1heFJlcGxhY2VzKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZXN0KHN0ciwgZmMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIHZhciBjbG9uZWRPcHRpb25zID0gX29iamVjdFNwcmVhZCQzKHt9LCBvcHRpb25zKTtcblxuICAgICAgY2xvbmVkT3B0aW9ucy5hcHBseVBvc3RQcm9jZXNzb3IgPSBmYWxzZTtcbiAgICAgIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlSGFzT3B0aW9ucyhrZXksIGluaGVyaXRlZE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHNlcCA9IHRoaXMubmVzdGluZ09wdGlvbnNTZXBhcmF0b3I7XG4gICAgICAgIGlmIChrZXkuaW5kZXhPZihzZXApIDwgMCkgcmV0dXJuIGtleTtcbiAgICAgICAgdmFyIGMgPSBrZXkuc3BsaXQobmV3IFJlZ0V4cChcIlwiLmNvbmNhdChzZXAsIFwiWyBdKntcIikpKTtcbiAgICAgICAgdmFyIG9wdGlvbnNTdHJpbmcgPSBcIntcIi5jb25jYXQoY1sxXSk7XG4gICAgICAgIGtleSA9IGNbMF07XG4gICAgICAgIG9wdGlvbnNTdHJpbmcgPSB0aGlzLmludGVycG9sYXRlKG9wdGlvbnNTdHJpbmcsIGNsb25lZE9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zU3RyaW5nID0gb3B0aW9uc1N0cmluZy5yZXBsYWNlKC8nL2csICdcIicpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvbmVkT3B0aW9ucyA9IEpTT04ucGFyc2Uob3B0aW9uc1N0cmluZyk7XG4gICAgICAgICAgaWYgKGluaGVyaXRlZE9wdGlvbnMpIGNsb25lZE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkJDMoX29iamVjdFNwcmVhZCQzKHt9LCBpbmhlcml0ZWRPcHRpb25zKSwgY2xvbmVkT3B0aW9ucyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiZmFpbGVkIHBhcnNpbmcgb3B0aW9ucyBzdHJpbmcgaW4gbmVzdGluZyBmb3Iga2V5IFwiLmNvbmNhdChrZXkpLCBlKTtcbiAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoa2V5KS5jb25jYXQoc2VwKS5jb25jYXQob3B0aW9uc1N0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgY2xvbmVkT3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChtYXRjaCA9IHRoaXMubmVzdGluZ1JlZ2V4cC5leGVjKHN0cikpIHtcbiAgICAgICAgdmFyIGZvcm1hdHRlcnMgPSBbXTtcbiAgICAgICAgdmFyIGRvUmVkdWNlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG1hdGNoWzBdLmluZGV4T2YodGhpcy5mb3JtYXRTZXBhcmF0b3IpICE9PSAtMSAmJiAhL3suKn0vLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgdmFyIHIgPSBtYXRjaFsxXS5zcGxpdCh0aGlzLmZvcm1hdFNlcGFyYXRvcikubWFwKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS50cmltKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbWF0Y2hbMV0gPSByLnNoaWZ0KCk7XG4gICAgICAgICAgZm9ybWF0dGVycyA9IHI7XG4gICAgICAgICAgZG9SZWR1Y2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSBmYyhoYW5kbGVIYXNPcHRpb25zLmNhbGwodGhpcywgbWF0Y2hbMV0udHJpbSgpLCBjbG9uZWRPcHRpb25zKSwgY2xvbmVkT3B0aW9ucyk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiBtYXRjaFswXSA9PT0gc3RyICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHZhbHVlID0gbWFrZVN0cmluZyh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJtaXNzZWQgdG8gcmVzb2x2ZSBcIi5jb25jYXQobWF0Y2hbMV0sIFwiIGZvciBuZXN0aW5nIFwiKS5jb25jYXQoc3RyKSk7XG4gICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb1JlZHVjZSkge1xuICAgICAgICAgIHZhbHVlID0gZm9ybWF0dGVycy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuZm9ybWF0KHYsIGYsIG9wdGlvbnMubG5nLCBfb2JqZWN0U3ByZWFkJDMoX29iamVjdFNwcmVhZCQzKHt9LCBvcHRpb25zKSwge30sIHtcbiAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvbmtleTogbWF0Y2hbMV0udHJpbSgpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSwgdmFsdWUudHJpbSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG1hdGNoWzBdLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMucmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEludGVycG9sYXRvcjtcbn0oKTtcblxuZnVuY3Rpb24gb3duS2V5cyQ0KG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQ0KHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMkNChPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzJDQoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIHBhcnNlRm9ybWF0U3RyKGZvcm1hdFN0cikge1xuICB2YXIgZm9ybWF0TmFtZSA9IGZvcm1hdFN0ci50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgdmFyIGZvcm1hdE9wdGlvbnMgPSB7fTtcblxuICBpZiAoZm9ybWF0U3RyLmluZGV4T2YoJygnKSA+IC0xKSB7XG4gICAgdmFyIHAgPSBmb3JtYXRTdHIuc3BsaXQoJygnKTtcbiAgICBmb3JtYXROYW1lID0gcFswXS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICB2YXIgb3B0U3RyID0gcFsxXS5zdWJzdHJpbmcoMCwgcFsxXS5sZW5ndGggLSAxKTtcblxuICAgIGlmIChmb3JtYXROYW1lID09PSAnY3VycmVuY3knICYmIG9wdFN0ci5pbmRleE9mKCc6JykgPCAwKSB7XG4gICAgICBpZiAoIWZvcm1hdE9wdGlvbnMuY3VycmVuY3kpIGZvcm1hdE9wdGlvbnMuY3VycmVuY3kgPSBvcHRTdHIudHJpbSgpO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0TmFtZSA9PT0gJ3JlbGF0aXZldGltZScgJiYgb3B0U3RyLmluZGV4T2YoJzonKSA8IDApIHtcbiAgICAgIGlmICghZm9ybWF0T3B0aW9ucy5yYW5nZSkgZm9ybWF0T3B0aW9ucy5yYW5nZSA9IG9wdFN0ci50cmltKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvcHRzID0gb3B0U3RyLnNwbGl0KCc7Jyk7XG4gICAgICBvcHRzLmZvckVhY2goZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICBpZiAoIW9wdCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBfb3B0JHNwbGl0ID0gb3B0LnNwbGl0KCc6JyksXG4gICAgICAgICAgICBfb3B0JHNwbGl0MiA9IF90b0FycmF5KF9vcHQkc3BsaXQpLFxuICAgICAgICAgICAga2V5ID0gX29wdCRzcGxpdDJbMF0sXG4gICAgICAgICAgICByZXN0ID0gX29wdCRzcGxpdDIuc2xpY2UoMSk7XG5cbiAgICAgICAgdmFyIHZhbCA9IHJlc3Quam9pbignOicpO1xuICAgICAgICBpZiAodmFsLnRyaW0oKSA9PT0gJ2ZhbHNlJykgZm9ybWF0T3B0aW9uc1trZXkudHJpbSgpXSA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsLnRyaW0oKSA9PT0gJ3RydWUnKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpc05hTih2YWwudHJpbSgpKSkgZm9ybWF0T3B0aW9uc1trZXkudHJpbSgpXSA9IHBhcnNlSW50KHZhbC50cmltKCksIDEwKTtcbiAgICAgICAgaWYgKCFmb3JtYXRPcHRpb25zW2tleS50cmltKCldKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gdmFsLnRyaW0oKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0TmFtZTogZm9ybWF0TmFtZSxcbiAgICBmb3JtYXRPcHRpb25zOiBmb3JtYXRPcHRpb25zXG4gIH07XG59XG5cbnZhciBGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvcm1hdHRlcigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybWF0dGVyKTtcblxuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2Zvcm1hdHRlcicpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5mb3JtYXRzID0ge1xuICAgICAgbnVtYmVyOiBmdW5jdGlvbiBudW1iZXIodmFsLCBsbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsbmcsIG9wdGlvbnMpLmZvcm1hdCh2YWwpO1xuICAgICAgfSxcbiAgICAgIGN1cnJlbmN5OiBmdW5jdGlvbiBjdXJyZW5jeSh2YWwsIGxuZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxuZywgX29iamVjdFNwcmVhZCQ0KF9vYmplY3RTcHJlYWQkNCh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICAgICAgc3R5bGU6ICdjdXJyZW5jeSdcbiAgICAgICAgfSkpLmZvcm1hdCh2YWwpO1xuICAgICAgfSxcbiAgICAgIGRhdGV0aW1lOiBmdW5jdGlvbiBkYXRldGltZSh2YWwsIGxuZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG5nLCBfb2JqZWN0U3ByZWFkJDQoe30sIG9wdGlvbnMpKS5mb3JtYXQodmFsKTtcbiAgICAgIH0sXG4gICAgICByZWxhdGl2ZXRpbWU6IGZ1bmN0aW9uIHJlbGF0aXZldGltZSh2YWwsIGxuZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxuZywgX29iamVjdFNwcmVhZCQ0KHt9LCBvcHRpb25zKSkuZm9ybWF0KHZhbCwgb3B0aW9ucy5yYW5nZSB8fCAnZGF5Jyk7XG4gICAgICB9LFxuICAgICAgbGlzdDogZnVuY3Rpb24gbGlzdCh2YWwsIGxuZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuTGlzdEZvcm1hdChsbmcsIF9vYmplY3RTcHJlYWQkNCh7fSwgb3B0aW9ucykpLmZvcm1hdCh2YWwpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5pbml0KG9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZvcm1hdHRlciwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KHNlcnZpY2VzKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7fVxuICAgICAgfTtcbiAgICAgIHZhciBpT3B0cyA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbjtcbiAgICAgIHRoaXMuZm9ybWF0U2VwYXJhdG9yID0gaU9wdHMuZm9ybWF0U2VwYXJhdG9yID8gaU9wdHMuZm9ybWF0U2VwYXJhdG9yIDogaU9wdHMuZm9ybWF0U2VwYXJhdG9yIHx8ICcsJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChuYW1lLCBmYykge1xuICAgICAgdGhpcy5mb3JtYXRzW25hbWUudG9Mb3dlckNhc2UoKS50cmltKCldID0gZmM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIF9mb3JtYXQsIGxuZywgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGZvcm1hdHMgPSBfZm9ybWF0LnNwbGl0KHRoaXMuZm9ybWF0U2VwYXJhdG9yKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGZvcm1hdHMucmVkdWNlKGZ1bmN0aW9uIChtZW0sIGYpIHtcbiAgICAgICAgdmFyIF9wYXJzZUZvcm1hdFN0ciA9IHBhcnNlRm9ybWF0U3RyKGYpLFxuICAgICAgICAgICAgZm9ybWF0TmFtZSA9IF9wYXJzZUZvcm1hdFN0ci5mb3JtYXROYW1lLFxuICAgICAgICAgICAgZm9ybWF0T3B0aW9ucyA9IF9wYXJzZUZvcm1hdFN0ci5mb3JtYXRPcHRpb25zO1xuXG4gICAgICAgIGlmIChfdGhpcy5mb3JtYXRzW2Zvcm1hdE5hbWVdKSB7XG4gICAgICAgICAgdmFyIGZvcm1hdHRlZCA9IG1lbTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgdmFsT3B0aW9ucyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXMgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXNbb3B0aW9ucy5pbnRlcnBvbGF0aW9ua2V5XSB8fCB7fTtcbiAgICAgICAgICAgIHZhciBsID0gdmFsT3B0aW9ucy5sb2NhbGUgfHwgdmFsT3B0aW9ucy5sbmcgfHwgb3B0aW9ucy5sb2NhbGUgfHwgb3B0aW9ucy5sbmcgfHwgbG5nO1xuICAgICAgICAgICAgZm9ybWF0dGVkID0gX3RoaXMuZm9ybWF0c1tmb3JtYXROYW1lXShtZW0sIGwsIF9vYmplY3RTcHJlYWQkNChfb2JqZWN0U3ByZWFkJDQoX29iamVjdFNwcmVhZCQ0KHt9LCBmb3JtYXRPcHRpb25zKSwgb3B0aW9ucyksIHZhbE9wdGlvbnMpKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMubG9nZ2VyLndhcm4oZXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMubG9nZ2VyLndhcm4oXCJ0aGVyZSB3YXMgbm8gZm9ybWF0IGZ1bmN0aW9uIGZvciBcIi5jb25jYXQoZm9ybWF0TmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lbTtcbiAgICAgIH0sIHZhbHVlKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZvcm1hdHRlcjtcbn0oKTtcblxuZnVuY3Rpb24gb3duS2V5cyQ1KG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQ1KHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMkNShPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzJDUoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlciQyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0JDIoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0JDIoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiByZW1vdmUoYXJyLCB3aGF0KSB7XG4gIHZhciBmb3VuZCA9IGFyci5pbmRleE9mKHdoYXQpO1xuXG4gIHdoaWxlIChmb3VuZCAhPT0gLTEpIHtcbiAgICBhcnIuc3BsaWNlKGZvdW5kLCAxKTtcbiAgICBmb3VuZCA9IGFyci5pbmRleE9mKHdoYXQpO1xuICB9XG59XG5cbnZhciBDb25uZWN0b3IgPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoQ29ubmVjdG9yLCBfRXZlbnRFbWl0dGVyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyJDIoQ29ubmVjdG9yKTtcblxuICBmdW5jdGlvbiBDb25uZWN0b3IoYmFja2VuZCwgc3RvcmUsIHNlcnZpY2VzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3Rvcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKGlzSUUxMCkge1xuICAgICAgRXZlbnRFbWl0dGVyLmNhbGwoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIH1cblxuICAgIF90aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuICAgIF90aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgX3RoaXMuc2VydmljZXMgPSBzZXJ2aWNlcztcbiAgICBfdGhpcy5sYW5ndWFnZVV0aWxzID0gc2VydmljZXMubGFuZ3VhZ2VVdGlscztcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBfdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnYmFja2VuZENvbm5lY3RvcicpO1xuICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgX3RoaXMucXVldWUgPSBbXTtcblxuICAgIGlmIChfdGhpcy5iYWNrZW5kICYmIF90aGlzLmJhY2tlbmQuaW5pdCkge1xuICAgICAgX3RoaXMuYmFja2VuZC5pbml0KHNlcnZpY2VzLCBvcHRpb25zLmJhY2tlbmQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb25uZWN0b3IsIFt7XG4gICAga2V5OiBcInF1ZXVlTG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBxdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0b0xvYWQgPSBbXTtcbiAgICAgIHZhciBwZW5kaW5nID0gW107XG4gICAgICB2YXIgdG9Mb2FkTGFuZ3VhZ2VzID0gW107XG4gICAgICB2YXIgdG9Mb2FkTmFtZXNwYWNlcyA9IFtdO1xuICAgICAgbGFuZ3VhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGxuZykge1xuICAgICAgICB2YXIgaGFzQWxsTmFtZXNwYWNlcyA9IHRydWU7XG4gICAgICAgIG5hbWVzcGFjZXMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IFwiXCIuY29uY2F0KGxuZywgXCJ8XCIpLmNvbmNhdChucyk7XG5cbiAgICAgICAgICBpZiAoIW9wdGlvbnMucmVsb2FkICYmIF90aGlzMi5zdG9yZS5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkge1xuICAgICAgICAgICAgX3RoaXMyLnN0YXRlW25hbWVdID0gMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5zdGF0ZVtuYW1lXSA8IDApIDsgZWxzZSBpZiAoX3RoaXMyLnN0YXRlW25hbWVdID09PSAxKSB7XG4gICAgICAgICAgICBpZiAocGVuZGluZy5pbmRleE9mKG5hbWUpIDwgMCkgcGVuZGluZy5wdXNoKG5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczIuc3RhdGVbbmFtZV0gPSAxO1xuICAgICAgICAgICAgaGFzQWxsTmFtZXNwYWNlcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBlbmRpbmcuaW5kZXhPZihuYW1lKSA8IDApIHBlbmRpbmcucHVzaChuYW1lKTtcbiAgICAgICAgICAgIGlmICh0b0xvYWQuaW5kZXhPZihuYW1lKSA8IDApIHRvTG9hZC5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRvTG9hZE5hbWVzcGFjZXMuaW5kZXhPZihucykgPCAwKSB0b0xvYWROYW1lc3BhY2VzLnB1c2gobnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaGFzQWxsTmFtZXNwYWNlcykgdG9Mb2FkTGFuZ3VhZ2VzLnB1c2gobG5nKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodG9Mb2FkLmxlbmd0aCB8fCBwZW5kaW5nLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnF1ZXVlLnB1c2goe1xuICAgICAgICAgIHBlbmRpbmc6IHBlbmRpbmcsXG4gICAgICAgICAgbG9hZGVkOiB7fSxcbiAgICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9Mb2FkOiB0b0xvYWQsXG4gICAgICAgIHBlbmRpbmc6IHBlbmRpbmcsXG4gICAgICAgIHRvTG9hZExhbmd1YWdlczogdG9Mb2FkTGFuZ3VhZ2VzLFxuICAgICAgICB0b0xvYWROYW1lc3BhY2VzOiB0b0xvYWROYW1lc3BhY2VzXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZGVkKG5hbWUsIGVyciwgZGF0YSkge1xuICAgICAgdmFyIHMgPSBuYW1lLnNwbGl0KCd8Jyk7XG4gICAgICB2YXIgbG5nID0gc1swXTtcbiAgICAgIHZhciBucyA9IHNbMV07XG4gICAgICBpZiAoZXJyKSB0aGlzLmVtaXQoJ2ZhaWxlZExvYWRpbmcnLCBsbmcsIG5zLCBlcnIpO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRlW25hbWVdID0gZXJyID8gLTEgOiAyO1xuICAgICAgdmFyIGxvYWRlZCA9IHt9O1xuICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChxKSB7XG4gICAgICAgIHB1c2hQYXRoKHEubG9hZGVkLCBbbG5nXSwgbnMpO1xuICAgICAgICByZW1vdmUocS5wZW5kaW5nLCBuYW1lKTtcbiAgICAgICAgaWYgKGVycikgcS5lcnJvcnMucHVzaChlcnIpO1xuXG4gICAgICAgIGlmIChxLnBlbmRpbmcubGVuZ3RoID09PSAwICYmICFxLmRvbmUpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhxLmxvYWRlZCkuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRbbF0pIGxvYWRlZFtsXSA9IFtdO1xuXG4gICAgICAgICAgICBpZiAocS5sb2FkZWRbbF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHEubG9hZGVkW2xdLmZvckVhY2goZnVuY3Rpb24gKG5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvYWRlZFtsXS5pbmRleE9mKG5zKSA8IDApIGxvYWRlZFtsXS5wdXNoKG5zKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcS5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChxLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHEuY2FsbGJhY2socS5lcnJvcnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxLmNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdCgnbG9hZGVkJywgbG9hZGVkKTtcbiAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihmdW5jdGlvbiAocSkge1xuICAgICAgICByZXR1cm4gIXEuZG9uZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWQobG5nLCBucywgZmNOYW1lKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHRyaWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICAgICAgdmFyIHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDM1MDtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKCFsbmcubGVuZ3RoKSByZXR1cm4gY2FsbGJhY2sobnVsbCwge30pO1xuICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZFtmY05hbWVdKGxuZywgbnMsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgaWYgKGVyciAmJiBkYXRhICYmIHRyaWVkIDwgNSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMzLnJlYWQuY2FsbChfdGhpczMsIGxuZywgbnMsIGZjTmFtZSwgdHJpZWQgKyAxLCB3YWl0ICogMiwgY2FsbGJhY2spO1xuICAgICAgICAgIH0sIHdhaXQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGVyciwgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJlcGFyZUxvYWRpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICghdGhpcy5iYWNrZW5kKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ05vIGJhY2tlbmQgd2FzIGFkZGVkIHZpYSBpMThuZXh0LnVzZS4gV2lsbCBub3QgbG9hZCByZXNvdXJjZXMuJyk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxhbmd1YWdlcyA9PT0gJ3N0cmluZycpIGxhbmd1YWdlcyA9IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobGFuZ3VhZ2VzKTtcbiAgICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycpIG5hbWVzcGFjZXMgPSBbbmFtZXNwYWNlc107XG4gICAgICB2YXIgdG9Mb2FkID0gdGhpcy5xdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjayk7XG5cbiAgICAgIGlmICghdG9Mb2FkLnRvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0b0xvYWQucGVuZGluZy5sZW5ndGgpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB0b0xvYWQudG9Mb2FkLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgX3RoaXM0LmxvYWRPbmUobmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7fSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7XG4gICAgICAgIHJlbG9hZDogdHJ1ZVxuICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkT25lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRPbmUobmFtZSkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBwcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICAgICAgdmFyIHMgPSBuYW1lLnNwbGl0KCd8Jyk7XG4gICAgICB2YXIgbG5nID0gc1swXTtcbiAgICAgIHZhciBucyA9IHNbMV07XG4gICAgICB0aGlzLnJlYWQobG5nLCBucywgJ3JlYWQnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICBpZiAoZXJyKSBfdGhpczUubG9nZ2VyLndhcm4oXCJcIi5jb25jYXQocHJlZml4LCBcImxvYWRpbmcgbmFtZXNwYWNlIFwiKS5jb25jYXQobnMsIFwiIGZvciBsYW5ndWFnZSBcIikuY29uY2F0KGxuZywgXCIgZmFpbGVkXCIpLCBlcnIpO1xuICAgICAgICBpZiAoIWVyciAmJiBkYXRhKSBfdGhpczUubG9nZ2VyLmxvZyhcIlwiLmNvbmNhdChwcmVmaXgsIFwibG9hZGVkIG5hbWVzcGFjZSBcIikuY29uY2F0KG5zLCBcIiBmb3IgbGFuZ3VhZ2UgXCIpLmNvbmNhdChsbmcpLCBkYXRhKTtcblxuICAgICAgICBfdGhpczUubG9hZGVkKG5hbWUsIGVyciwgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2F2ZU1pc3NpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZU1pc3NpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgaXNVcGRhdGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7fTtcblxuICAgICAgaWYgKHRoaXMuc2VydmljZXMudXRpbHMgJiYgdGhpcy5zZXJ2aWNlcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UgJiYgIXRoaXMuc2VydmljZXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihcImRpZCBub3Qgc2F2ZSBrZXkgXFxcIlwiLmNvbmNhdChrZXksIFwiXFxcIiBhcyB0aGUgbmFtZXNwYWNlIFxcXCJcIikuY29uY2F0KG5hbWVzcGFjZSwgXCJcXFwiIHdhcyBub3QgeWV0IGxvYWRlZFwiKSwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCB8fCBrZXkgPT09IG51bGwgfHwga2V5ID09PSAnJykgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5iYWNrZW5kICYmIHRoaXMuYmFja2VuZC5jcmVhdGUpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kLmNyZWF0ZShsYW5ndWFnZXMsIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlLCBudWxsLCBfb2JqZWN0U3ByZWFkJDUoX29iamVjdFNwcmVhZCQ1KHt9LCBvcHRpb25zKSwge30sIHtcbiAgICAgICAgICBpc1VwZGF0ZTogaXNVcGRhdGVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWxhbmd1YWdlcyB8fCAhbGFuZ3VhZ2VzWzBdKSByZXR1cm47XG4gICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlKGxhbmd1YWdlc1swXSwgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb25uZWN0b3I7XG59KEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIGdldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgaW5pdEltbWVkaWF0ZTogdHJ1ZSxcbiAgICBuczogWyd0cmFuc2xhdGlvbiddLFxuICAgIGRlZmF1bHROUzogWyd0cmFuc2xhdGlvbiddLFxuICAgIGZhbGxiYWNrTG5nOiBbJ2RldiddLFxuICAgIGZhbGxiYWNrTlM6IGZhbHNlLFxuICAgIHN1cHBvcnRlZExuZ3M6IGZhbHNlLFxuICAgIG5vbkV4cGxpY2l0U3VwcG9ydGVkTG5nczogZmFsc2UsXG4gICAgbG9hZDogJ2FsbCcsXG4gICAgcHJlbG9hZDogZmFsc2UsXG4gICAgc2ltcGxpZnlQbHVyYWxTdWZmaXg6IHRydWUsXG4gICAga2V5U2VwYXJhdG9yOiAnLicsXG4gICAgbnNTZXBhcmF0b3I6ICc6JyxcbiAgICBwbHVyYWxTZXBhcmF0b3I6ICdfJyxcbiAgICBjb250ZXh0U2VwYXJhdG9yOiAnXycsXG4gICAgcGFydGlhbEJ1bmRsZWRMYW5ndWFnZXM6IGZhbHNlLFxuICAgIHNhdmVNaXNzaW5nOiBmYWxzZSxcbiAgICB1cGRhdGVNaXNzaW5nOiBmYWxzZSxcbiAgICBzYXZlTWlzc2luZ1RvOiAnZmFsbGJhY2snLFxuICAgIHNhdmVNaXNzaW5nUGx1cmFsczogdHJ1ZSxcbiAgICBtaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gICAgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyOiBmYWxzZSxcbiAgICBwb3N0UHJvY2VzczogZmFsc2UsXG4gICAgcG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQ6IGZhbHNlLFxuICAgIHJldHVybk51bGw6IHRydWUsXG4gICAgcmV0dXJuRW1wdHlTdHJpbmc6IHRydWUsXG4gICAgcmV0dXJuT2JqZWN0czogZmFsc2UsXG4gICAgam9pbkFycmF5czogZmFsc2UsXG4gICAgcmV0dXJuZWRPYmplY3RIYW5kbGVyOiBmYWxzZSxcbiAgICBwYXJzZU1pc3NpbmdLZXlIYW5kbGVyOiBmYWxzZSxcbiAgICBhcHBlbmROYW1lc3BhY2VUb01pc3NpbmdLZXk6IGZhbHNlLFxuICAgIGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlOiBmYWxzZSxcbiAgICBvdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlKGFyZ3MpIHtcbiAgICAgIHZhciByZXQgPSB7fTtcbiAgICAgIGlmIChfdHlwZW9mKGFyZ3NbMV0pID09PSAnb2JqZWN0JykgcmV0ID0gYXJnc1sxXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycpIHJldC5kZWZhdWx0VmFsdWUgPSBhcmdzWzFdO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdID09PSAnc3RyaW5nJykgcmV0LnREZXNjcmlwdGlvbiA9IGFyZ3NbMl07XG5cbiAgICAgIGlmIChfdHlwZW9mKGFyZ3NbMl0pID09PSAnb2JqZWN0JyB8fCBfdHlwZW9mKGFyZ3NbM10pID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3NbM10gfHwgYXJnc1syXTtcbiAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0W2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgZXNjYXBlVmFsdWU6IHRydWUsXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgX2Zvcm1hdCwgbG5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBwcmVmaXg6ICd7eycsXG4gICAgICBzdWZmaXg6ICd9fScsXG4gICAgICBmb3JtYXRTZXBhcmF0b3I6ICcsJyxcbiAgICAgIHVuZXNjYXBlUHJlZml4OiAnLScsXG4gICAgICBuZXN0aW5nUHJlZml4OiAnJHQoJyxcbiAgICAgIG5lc3RpbmdTdWZmaXg6ICcpJyxcbiAgICAgIG5lc3RpbmdPcHRpb25zU2VwYXJhdG9yOiAnLCcsXG4gICAgICBtYXhSZXBsYWNlczogMTAwMCxcbiAgICAgIHNraXBPblZhcmlhYmxlczogdHJ1ZVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMubnMgPT09ICdzdHJpbmcnKSBvcHRpb25zLm5zID0gW29wdGlvbnMubnNdO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuZmFsbGJhY2tMbmcgPT09ICdzdHJpbmcnKSBvcHRpb25zLmZhbGxiYWNrTG5nID0gW29wdGlvbnMuZmFsbGJhY2tMbmddO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuZmFsbGJhY2tOUyA9PT0gJ3N0cmluZycpIG9wdGlvbnMuZmFsbGJhY2tOUyA9IFtvcHRpb25zLmZhbGxiYWNrTlNdO1xuXG4gIGlmIChvcHRpb25zLnN1cHBvcnRlZExuZ3MgJiYgb3B0aW9ucy5zdXBwb3J0ZWRMbmdzLmluZGV4T2YoJ2NpbW9kZScpIDwgMCkge1xuICAgIG9wdGlvbnMuc3VwcG9ydGVkTG5ncyA9IG9wdGlvbnMuc3VwcG9ydGVkTG5ncy5jb25jYXQoWydjaW1vZGUnXSk7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gb3duS2V5cyQ2KG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCQ2KHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMkNihPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzJDYoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlciQzKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0JDMoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0JDMoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gYmluZE1lbWJlckZ1bmN0aW9ucyhpbnN0KSB7XG4gIHZhciBtZW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3QpKTtcbiAgbWVtcy5mb3JFYWNoKGZ1bmN0aW9uIChtZW0pIHtcbiAgICBpZiAodHlwZW9mIGluc3RbbWVtXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5zdFttZW1dID0gaW5zdFttZW1dLmJpbmQoaW5zdCk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIEkxOG4gPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoSTE4biwgX0V2ZW50RW1pdHRlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlciQzKEkxOG4pO1xuXG4gIGZ1bmN0aW9uIEkxOG4oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEkxOG4pO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcblxuICAgIGlmIChpc0lFMTApIHtcbiAgICAgIEV2ZW50RW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICBfdGhpcy5vcHRpb25zID0gdHJhbnNmb3JtT3B0aW9ucyhvcHRpb25zKTtcbiAgICBfdGhpcy5zZXJ2aWNlcyA9IHt9O1xuICAgIF90aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgX3RoaXMubW9kdWxlcyA9IHtcbiAgICAgIGV4dGVybmFsOiBbXVxuICAgIH07XG4gICAgYmluZE1lbWJlckZ1bmN0aW9ucyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG5cbiAgICBpZiAoY2FsbGJhY2sgJiYgIV90aGlzLmlzSW5pdGlhbGl6ZWQgJiYgIW9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmluaXRJbW1lZGlhdGUpIHtcbiAgICAgICAgX3RoaXMuaW5pdChvcHRpb25zLCBjYWxsYmFjayk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5pbml0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJMThuLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLmRlZmF1bHROUyAmJiBvcHRpb25zLm5zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBvcHRpb25zLmRlZmF1bHROUyA9IG9wdGlvbnMubnM7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5ucy5pbmRleE9mKCd0cmFuc2xhdGlvbicpIDwgMCkge1xuICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdE5TID0gb3B0aW9ucy5uc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGVmT3B0cyA9IGdldCgpO1xuICAgICAgdGhpcy5vcHRpb25zID0gX29iamVjdFNwcmVhZCQ2KF9vYmplY3RTcHJlYWQkNihfb2JqZWN0U3ByZWFkJDYoe30sIGRlZk9wdHMpLCB0aGlzLm9wdGlvbnMpLCB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJICE9PSAndjEnKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uID0gX29iamVjdFNwcmVhZCQ2KF9vYmplY3RTcHJlYWQkNih7fSwgZGVmT3B0cy5pbnRlcnBvbGF0aW9uKSwgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudXNlckRlZmluZWRLZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMubnNTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudXNlckRlZmluZWROc1NlcGFyYXRvciA9IG9wdGlvbnMubnNTZXBhcmF0b3I7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzT25EZW1hbmQoQ2xhc3NPck9iamVjdCkge1xuICAgICAgICBpZiAoIUNsYXNzT3JPYmplY3QpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAodHlwZW9mIENsYXNzT3JPYmplY3QgPT09ICdmdW5jdGlvbicpIHJldHVybiBuZXcgQ2xhc3NPck9iamVjdCgpO1xuICAgICAgICByZXR1cm4gQ2xhc3NPck9iamVjdDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgICBpZiAodGhpcy5tb2R1bGVzLmxvZ2dlcikge1xuICAgICAgICAgIGJhc2VMb2dnZXIuaW5pdChjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5sb2dnZXIpLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VMb2dnZXIuaW5pdChudWxsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZvcm1hdHRlcjtcblxuICAgICAgICBpZiAodGhpcy5tb2R1bGVzLmZvcm1hdHRlcikge1xuICAgICAgICAgIGZvcm1hdHRlciA9IHRoaXMubW9kdWxlcy5mb3JtYXR0ZXI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEludGwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZm9ybWF0dGVyID0gRm9ybWF0dGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGx1ID0gbmV3IExhbmd1YWdlVXRpbCh0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLnN0b3JlID0gbmV3IFJlc291cmNlU3RvcmUodGhpcy5vcHRpb25zLnJlc291cmNlcywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdmFyIHMgPSB0aGlzLnNlcnZpY2VzO1xuICAgICAgICBzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgICAgIHMucmVzb3VyY2VTdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIHMubGFuZ3VhZ2VVdGlscyA9IGx1O1xuICAgICAgICBzLnBsdXJhbFJlc29sdmVyID0gbmV3IFBsdXJhbFJlc29sdmVyKGx1LCB7XG4gICAgICAgICAgcHJlcGVuZDogdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcixcbiAgICAgICAgICBjb21wYXRpYmlsaXR5SlNPTjogdGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OLFxuICAgICAgICAgIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZvcm1hdHRlciAmJiAoIXRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCB8fCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgPT09IGRlZk9wdHMuaW50ZXJwb2xhdGlvbi5mb3JtYXQpKSB7XG4gICAgICAgICAgcy5mb3JtYXR0ZXIgPSBjcmVhdGVDbGFzc09uRGVtYW5kKGZvcm1hdHRlcik7XG4gICAgICAgICAgcy5mb3JtYXR0ZXIuaW5pdChzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCA9IHMuZm9ybWF0dGVyLmZvcm1hdC5iaW5kKHMuZm9ybWF0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHMuaW50ZXJwb2xhdG9yID0gbmV3IEludGVycG9sYXRvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgICBzLnV0aWxzID0ge1xuICAgICAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogdGhpcy5oYXNMb2FkZWROYW1lc3BhY2UuYmluZCh0aGlzKVxuICAgICAgICB9O1xuICAgICAgICBzLmJhY2tlbmRDb25uZWN0b3IgPSBuZXcgQ29ubmVjdG9yKGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmJhY2tlbmQpLCBzLnJlc291cmNlU3RvcmUsIHMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHMuYmFja2VuZENvbm5lY3Rvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5lbWl0LmFwcGx5KF90aGlzMiwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpIHtcbiAgICAgICAgICBzLmxhbmd1YWdlRGV0ZWN0b3IgPSBjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yKTtcbiAgICAgICAgICBzLmxhbmd1YWdlRGV0ZWN0b3IuaW5pdChzLCB0aGlzLm9wdGlvbnMuZGV0ZWN0aW9uLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubW9kdWxlcy5pMThuRm9ybWF0KSB7XG4gICAgICAgICAgcy5pMThuRm9ybWF0ID0gY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCk7XG4gICAgICAgICAgaWYgKHMuaTE4bkZvcm1hdC5pbml0KSBzLmkxOG5Gb3JtYXQuaW5pdCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKHRoaXMuc2VydmljZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5lbWl0LmFwcGx5KF90aGlzMiwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmV4dGVybmFsLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICBpZiAobS5pbml0KSBtLmluaXQoX3RoaXMyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZm9ybWF0ID0gdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0O1xuICAgICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nICYmICF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMub3B0aW9ucy5sbmcpIHtcbiAgICAgICAgdmFyIGNvZGVzID0gdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nKTtcbiAgICAgICAgaWYgKGNvZGVzLmxlbmd0aCA+IDAgJiYgY29kZXNbMF0gIT09ICdkZXYnKSB0aGlzLm9wdGlvbnMubG5nID0gY29kZXNbMF07XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLm9wdGlvbnMubG5nKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2luaXQ6IG5vIGxhbmd1YWdlRGV0ZWN0b3IgaXMgdXNlZCBhbmQgbm8gbG5nIGlzIGRlZmluZWQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlQXBpID0gWydnZXRSZXNvdXJjZScsICdoYXNSZXNvdXJjZUJ1bmRsZScsICdnZXRSZXNvdXJjZUJ1bmRsZScsICdnZXREYXRhQnlMYW5ndWFnZSddO1xuICAgICAgc3RvcmVBcGkuZm9yRWFjaChmdW5jdGlvbiAoZmNOYW1lKSB7XG4gICAgICAgIF90aGlzMltmY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfdGhpczIkc3RvcmU7XG5cbiAgICAgICAgICByZXR1cm4gKF90aGlzMiRzdG9yZSA9IF90aGlzMi5zdG9yZSlbZmNOYW1lXS5hcHBseShfdGhpczIkc3RvcmUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHZhciBzdG9yZUFwaUNoYWluZWQgPSBbJ2FkZFJlc291cmNlJywgJ2FkZFJlc291cmNlcycsICdhZGRSZXNvdXJjZUJ1bmRsZScsICdyZW1vdmVSZXNvdXJjZUJ1bmRsZSddO1xuICAgICAgc3RvcmVBcGlDaGFpbmVkLmZvckVhY2goZnVuY3Rpb24gKGZjTmFtZSkge1xuICAgICAgICBfdGhpczJbZmNOYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyJHN0b3JlMjtcblxuICAgICAgICAgIChfdGhpczIkc3RvcmUyID0gX3RoaXMyLnN0b3JlKVtmY05hbWVdLmFwcGx5KF90aGlzMiRzdG9yZTIsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICByZXR1cm4gX3RoaXMyO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuXG4gICAgICB2YXIgbG9hZCA9IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICAgIHZhciBmaW5pc2ggPSBmdW5jdGlvbiBmaW5pc2goZXJyLCB0KSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5pc0luaXRpYWxpemVkICYmICFfdGhpczIuaW5pdGlhbGl6ZWRTdG9yZU9uY2UpIF90aGlzMi5sb2dnZXIud2FybignaW5pdDogaTE4bmV4dCBpcyBhbHJlYWR5IGluaXRpYWxpemVkLiBZb3Ugc2hvdWxkIGNhbGwgaW5pdCBqdXN0IG9uY2UhJyk7XG4gICAgICAgICAgX3RoaXMyLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmICghX3RoaXMyLm9wdGlvbnMuaXNDbG9uZSkgX3RoaXMyLmxvZ2dlci5sb2coJ2luaXRpYWxpemVkJywgX3RoaXMyLm9wdGlvbnMpO1xuXG4gICAgICAgICAgX3RoaXMyLmVtaXQoJ2luaXRpYWxpemVkJywgX3RoaXMyLm9wdGlvbnMpO1xuXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0KTtcbiAgICAgICAgICBjYWxsYmFjayhlcnIsIHQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChfdGhpczIubGFuZ3VhZ2VzICYmIF90aGlzMi5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScgJiYgIV90aGlzMi5pc0luaXRpYWxpemVkKSByZXR1cm4gZmluaXNoKG51bGwsIF90aGlzMi50LmJpbmQoX3RoaXMyKSk7XG5cbiAgICAgICAgX3RoaXMyLmNoYW5nZUxhbmd1YWdlKF90aGlzMi5vcHRpb25zLmxuZywgZmluaXNoKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzb3VyY2VzIHx8ICF0aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgICBsb2FkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KGxvYWQsIDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRSZXNvdXJjZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZFJlc291cmNlcyhsYW5ndWFnZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbm9vcDtcbiAgICAgIHZhciB1c2VkQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHZhciB1c2VkTG5nID0gdHlwZW9mIGxhbmd1YWdlID09PSAnc3RyaW5nJyA/IGxhbmd1YWdlIDogdGhpcy5sYW5ndWFnZTtcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2UgPT09ICdmdW5jdGlvbicpIHVzZWRDYWxsYmFjayA9IGxhbmd1YWdlO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXNvdXJjZXMgfHwgdGhpcy5vcHRpb25zLnBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzKSB7XG4gICAgICAgIGlmICh1c2VkTG5nICYmIHVzZWRMbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHJldHVybiB1c2VkQ2FsbGJhY2soKTtcbiAgICAgICAgdmFyIHRvTG9hZCA9IFtdO1xuXG4gICAgICAgIHZhciBhcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobG5nKSB7XG4gICAgICAgICAgaWYgKCFsbmcpIHJldHVybjtcblxuICAgICAgICAgIHZhciBsbmdzID0gX3RoaXMzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxuZyk7XG5cbiAgICAgICAgICBsbmdzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIGlmICh0b0xvYWQuaW5kZXhPZihsKSA8IDApIHRvTG9hZC5wdXNoKGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdXNlZExuZykge1xuICAgICAgICAgIHZhciBmYWxsYmFja3MgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgICAgIGZhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwZW5kKGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwcGVuZCh1c2VkTG5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJlbG9hZCkge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBlbmQobCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IubG9hZCh0b0xvYWQsIHRoaXMub3B0aW9ucy5ucywgdXNlZENhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZWRDYWxsYmFjayhudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVsb2FkUmVzb3VyY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbG9hZFJlc291cmNlcyhsbmdzLCBucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICBpZiAoIWxuZ3MpIGxuZ3MgPSB0aGlzLmxhbmd1YWdlcztcbiAgICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLm5zO1xuICAgICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuICAgICAgdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLnJlbG9hZChsbmdzLCBucywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVzZShtb2R1bGUpIHtcbiAgICAgIGlmICghbW9kdWxlKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgcGFzc2luZyBhbiB1bmRlZmluZWQgbW9kdWxlISBQbGVhc2UgY2hlY2sgdGhlIG9iamVjdCB5b3UgYXJlIHBhc3NpbmcgdG8gaTE4bmV4dC51c2UoKScpO1xuICAgICAgaWYgKCFtb2R1bGUudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHBhc3NpbmcgYSB3cm9uZyBtb2R1bGUhIFBsZWFzZSBjaGVjayB0aGUgb2JqZWN0IHlvdSBhcmUgcGFzc2luZyB0byBpMThuZXh0LnVzZSgpJyk7XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5iYWNrZW5kID0gbW9kdWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdsb2dnZXInIHx8IG1vZHVsZS5sb2cgJiYgbW9kdWxlLndhcm4gJiYgbW9kdWxlLmVycm9yKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5sb2dnZXIgPSBtb2R1bGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2xhbmd1YWdlRGV0ZWN0b3InKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yID0gbW9kdWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdpMThuRm9ybWF0Jykge1xuICAgICAgICB0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCA9IG1vZHVsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAncG9zdFByb2Nlc3NvcicpIHtcbiAgICAgICAgcG9zdFByb2Nlc3Nvci5hZGRQb3N0UHJvY2Vzc29yKG1vZHVsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2Zvcm1hdHRlcicpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmZvcm1hdHRlciA9IG1vZHVsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAnM3JkUGFydHknKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5leHRlcm5hbC5wdXNoKG1vZHVsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGFuZ2VMYW5ndWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VMYW5ndWFnZShsbmcsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IGxuZztcbiAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICB0aGlzLmVtaXQoJ2xhbmd1YWdlQ2hhbmdpbmcnLCBsbmcpO1xuXG4gICAgICB2YXIgc2V0TG5nUHJvcHMgPSBmdW5jdGlvbiBzZXRMbmdQcm9wcyhsKSB7XG4gICAgICAgIF90aGlzNC5sYW5ndWFnZSA9IGw7XG4gICAgICAgIF90aGlzNC5sYW5ndWFnZXMgPSBfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobCk7XG4gICAgICAgIF90aGlzNC5yZXNvbHZlZExhbmd1YWdlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoWydjaW1vZGUnLCAnZGV2J10uaW5kZXhPZihsKSA+IC0xKSByZXR1cm47XG5cbiAgICAgICAgZm9yICh2YXIgbGkgPSAwOyBsaSA8IF90aGlzNC5sYW5ndWFnZXMubGVuZ3RoOyBsaSsrKSB7XG4gICAgICAgICAgdmFyIGxuZ0luTG5ncyA9IF90aGlzNC5sYW5ndWFnZXNbbGldO1xuICAgICAgICAgIGlmIChbJ2NpbW9kZScsICdkZXYnXS5pbmRleE9mKGxuZ0luTG5ncykgPiAtMSkgY29udGludWU7XG5cbiAgICAgICAgICBpZiAoX3RoaXM0LnN0b3JlLmhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyhsbmdJbkxuZ3MpKSB7XG4gICAgICAgICAgICBfdGhpczQucmVzb2x2ZWRMYW5ndWFnZSA9IGxuZ0luTG5ncztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbiBkb25lKGVyciwgbCkge1xuICAgICAgICBpZiAobCkge1xuICAgICAgICAgIHNldExuZ1Byb3BzKGwpO1xuXG4gICAgICAgICAgX3RoaXM0LnRyYW5zbGF0b3IuY2hhbmdlTGFuZ3VhZ2UobCk7XG5cbiAgICAgICAgICBfdGhpczQuaXNMYW5ndWFnZUNoYW5naW5nVG8gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBfdGhpczQuZW1pdCgnbGFuZ3VhZ2VDaGFuZ2VkJywgbCk7XG5cbiAgICAgICAgICBfdGhpczQubG9nZ2VyLmxvZygnbGFuZ3VhZ2VDaGFuZ2VkJywgbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM0LmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC50LmFwcGx5KF90aGlzNCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC50LmFwcGx5KF90aGlzNCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgc2V0TG5nID0gZnVuY3Rpb24gc2V0TG5nKGxuZ3MpIHtcbiAgICAgICAgaWYgKCFsbmcgJiYgIWxuZ3MgJiYgX3RoaXM0LnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IpIGxuZ3MgPSBbXTtcbiAgICAgICAgdmFyIGwgPSB0eXBlb2YgbG5ncyA9PT0gJ3N0cmluZycgPyBsbmdzIDogX3RoaXM0LnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0QmVzdE1hdGNoRnJvbUNvZGVzKGxuZ3MpO1xuXG4gICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgaWYgKCFfdGhpczQubGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHNldExuZ1Byb3BzKGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghX3RoaXM0LnRyYW5zbGF0b3IubGFuZ3VhZ2UpIF90aGlzNC50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuICAgICAgICAgIGlmIChfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvcikgX3RoaXM0LnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuY2FjaGVVc2VyTGFuZ3VhZ2UobCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczQubG9hZFJlc291cmNlcyhsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgZG9uZShlcnIsIGwpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghbG5nICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiAhdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmFzeW5jKSB7XG4gICAgICAgIHNldExuZyh0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KCkpO1xuICAgICAgfSBlbHNlIGlmICghbG5nICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdChzZXRMbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0TG5nKGxuZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Rml4ZWRUXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpeGVkVChsbmcsIG5zLCBrZXlQcmVmaXgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgZml4ZWRUID0gZnVuY3Rpb24gZml4ZWRUKGtleSwgb3B0cykge1xuICAgICAgICB2YXIgb3B0aW9ucztcblxuICAgICAgICBpZiAoX3R5cGVvZihvcHRzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICAgICAgcmVzdFtfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcHRpb25zID0gX3RoaXM1Lm9wdGlvbnMub3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIoW2tleSwgb3B0c10uY29uY2F0KHJlc3QpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gX29iamVjdFNwcmVhZCQ2KHt9LCBvcHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMubG5nID0gb3B0aW9ucy5sbmcgfHwgZml4ZWRULmxuZztcbiAgICAgICAgb3B0aW9ucy5sbmdzID0gb3B0aW9ucy5sbmdzIHx8IGZpeGVkVC5sbmdzO1xuICAgICAgICBvcHRpb25zLm5zID0gb3B0aW9ucy5ucyB8fCBmaXhlZFQubnM7XG4gICAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBfdGhpczUub3B0aW9ucy5rZXlTZXBhcmF0b3IgfHwgJy4nO1xuICAgICAgICB2YXIgcmVzdWx0S2V5ID0ga2V5UHJlZml4ID8gXCJcIi5jb25jYXQoa2V5UHJlZml4KS5jb25jYXQoa2V5U2VwYXJhdG9yKS5jb25jYXQoa2V5KSA6IGtleTtcbiAgICAgICAgcmV0dXJuIF90aGlzNS50KHJlc3VsdEtleSwgb3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZW9mIGxuZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZml4ZWRULmxuZyA9IGxuZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpeGVkVC5sbmdzID0gbG5nO1xuICAgICAgfVxuXG4gICAgICBmaXhlZFQubnMgPSBucztcbiAgICAgIGZpeGVkVC5rZXlQcmVmaXggPSBrZXlQcmVmaXg7XG4gICAgICByZXR1cm4gZml4ZWRUO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHQoKSB7XG4gICAgICB2YXIgX3RoaXMkdHJhbnNsYXRvcjtcblxuICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvciAmJiAoX3RoaXMkdHJhbnNsYXRvciA9IHRoaXMudHJhbnNsYXRvcikudHJhbnNsYXRlLmFwcGx5KF90aGlzJHRyYW5zbGF0b3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4aXN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGlzdHMoKSB7XG4gICAgICB2YXIgX3RoaXMkdHJhbnNsYXRvcjI7XG5cbiAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0b3IgJiYgKF90aGlzJHRyYW5zbGF0b3IyID0gdGhpcy50cmFuc2xhdG9yKS5leGlzdHMuYXBwbHkoX3RoaXMkdHJhbnNsYXRvcjIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldERlZmF1bHROYW1lc3BhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVmYXVsdE5hbWVzcGFjZShucykge1xuICAgICAgdGhpcy5vcHRpb25zLmRlZmF1bHROUyA9IG5zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYXNMb2FkZWROYW1lc3BhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzTG9hZGVkTmFtZXNwYWNlKG5zKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdoYXNMb2FkZWROYW1lc3BhY2U6IGkxOG5leHQgd2FzIG5vdCBpbml0aWFsaXplZCcsIHRoaXMubGFuZ3VhZ2VzKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubGFuZ3VhZ2VzIHx8ICF0aGlzLmxhbmd1YWdlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignaGFzTG9hZGVkTmFtZXNwYWNlOiBpMThuLmxhbmd1YWdlcyB3ZXJlIHVuZGVmaW5lZCBvciBlbXB0eScsIHRoaXMubGFuZ3VhZ2VzKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbG5nID0gdGhpcy5yZXNvbHZlZExhbmd1YWdlIHx8IHRoaXMubGFuZ3VhZ2VzWzBdO1xuICAgICAgdmFyIGZhbGxiYWNrTG5nID0gdGhpcy5vcHRpb25zID8gdGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nIDogZmFsc2U7XG4gICAgICB2YXIgbGFzdExuZyA9IHRoaXMubGFuZ3VhZ2VzW3RoaXMubGFuZ3VhZ2VzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxuZy50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuIHRydWU7XG5cbiAgICAgIHZhciBsb2FkTm90UGVuZGluZyA9IGZ1bmN0aW9uIGxvYWROb3RQZW5kaW5nKGwsIG4pIHtcbiAgICAgICAgdmFyIGxvYWRTdGF0ZSA9IF90aGlzNi5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLnN0YXRlW1wiXCIuY29uY2F0KGwsIFwifFwiKS5jb25jYXQobildO1xuXG4gICAgICAgIHJldHVybiBsb2FkU3RhdGUgPT09IC0xIHx8IGxvYWRTdGF0ZSA9PT0gMjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zLnByZWNoZWNrKSB7XG4gICAgICAgIHZhciBwcmVSZXN1bHQgPSBvcHRpb25zLnByZWNoZWNrKHRoaXMsIGxvYWROb3RQZW5kaW5nKTtcbiAgICAgICAgaWYgKHByZVJlc3VsdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHJlUmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoIXRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5iYWNrZW5kKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChsb2FkTm90UGVuZGluZyhsbmcsIG5zKSAmJiAoIWZhbGxiYWNrTG5nIHx8IGxvYWROb3RQZW5kaW5nKGxhc3RMbmcsIG5zKSkpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkTmFtZXNwYWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTmFtZXNwYWNlcyhucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5ucykge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbnMgPT09ICdzdHJpbmcnKSBucyA9IFtuc107XG4gICAgICBucy5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIGlmIChfdGhpczcub3B0aW9ucy5ucy5pbmRleE9mKG4pIDwgMCkgX3RoaXM3Lm9wdGlvbnMubnMucHVzaChuKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2FkUmVzb3VyY2VzKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZExhbmd1YWdlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTGFuZ3VhZ2VzKGxuZ3MsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgaWYgKHR5cGVvZiBsbmdzID09PSAnc3RyaW5nJykgbG5ncyA9IFtsbmdzXTtcbiAgICAgIHZhciBwcmVsb2FkZWQgPSB0aGlzLm9wdGlvbnMucHJlbG9hZCB8fCBbXTtcbiAgICAgIHZhciBuZXdMbmdzID0gbG5ncy5maWx0ZXIoZnVuY3Rpb24gKGxuZykge1xuICAgICAgICByZXR1cm4gcHJlbG9hZGVkLmluZGV4T2YobG5nKSA8IDA7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFuZXdMbmdzLmxlbmd0aCkge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vcHRpb25zLnByZWxvYWQgPSBwcmVsb2FkZWQuY29uY2F0KG5ld0xuZ3MpO1xuICAgICAgdGhpcy5sb2FkUmVzb3VyY2VzKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpcihsbmcpIHtcbiAgICAgIGlmICghbG5nKSBsbmcgPSB0aGlzLnJlc29sdmVkTGFuZ3VhZ2UgfHwgKHRoaXMubGFuZ3VhZ2VzICYmIHRoaXMubGFuZ3VhZ2VzLmxlbmd0aCA+IDAgPyB0aGlzLmxhbmd1YWdlc1swXSA6IHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgaWYgKCFsbmcpIHJldHVybiAncnRsJztcbiAgICAgIHZhciBydGxMbmdzID0gWydhcicsICdzaHUnLCAnc3FyJywgJ3NzaCcsICd4YWEnLCAneWhkJywgJ3l1ZCcsICdhYW8nLCAnYWJoJywgJ2FidicsICdhY20nLCAnYWNxJywgJ2FjdycsICdhY3gnLCAnYWN5JywgJ2FkZicsICdhZHMnLCAnYWViJywgJ2FlYycsICdhZmInLCAnYWpwJywgJ2FwYycsICdhcGQnLCAnYXJiJywgJ2FycScsICdhcnMnLCAnYXJ5JywgJ2FyeicsICdhdXonLCAnYXZsJywgJ2F5aCcsICdheWwnLCAnYXluJywgJ2F5cCcsICdiYnonLCAncGdhJywgJ2hlJywgJ2l3JywgJ3BzJywgJ3BidCcsICdwYnUnLCAncHN0JywgJ3BycCcsICdwcmQnLCAndWcnLCAndXInLCAneWRkJywgJ3lkcycsICd5aWgnLCAnamknLCAneWknLCAnaGJvJywgJ21lbicsICd4bW4nLCAnZmEnLCAnanByJywgJ3BlbycsICdwZXMnLCAncHJzJywgJ2R2JywgJ3NhbScsICdja2InXTtcbiAgICAgIHJldHVybiBydGxMbmdzLmluZGV4T2YodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGxuZykpID4gLTEgfHwgbG5nLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignLWFyYWInKSA+IDEgPyAncnRsJyA6ICdsdHInO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbG9uZUluc3RhbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lSW5zdGFuY2UoKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuXG4gICAgICB2YXIgbWVyZ2VkT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQkNihfb2JqZWN0U3ByZWFkJDYoX29iamVjdFNwcmVhZCQ2KHt9LCB0aGlzLm9wdGlvbnMpLCBvcHRpb25zKSwge1xuICAgICAgICBpc0Nsb25lOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgdmFyIGNsb25lID0gbmV3IEkxOG4obWVyZ2VkT3B0aW9ucyk7XG4gICAgICB2YXIgbWVtYmVyc1RvQ29weSA9IFsnc3RvcmUnLCAnc2VydmljZXMnLCAnbGFuZ3VhZ2UnXTtcbiAgICAgIG1lbWJlcnNUb0NvcHkuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICBjbG9uZVttXSA9IF90aGlzOFttXTtcbiAgICAgIH0pO1xuICAgICAgY2xvbmUuc2VydmljZXMgPSBfb2JqZWN0U3ByZWFkJDYoe30sIHRoaXMuc2VydmljZXMpO1xuICAgICAgY2xvbmUuc2VydmljZXMudXRpbHMgPSB7XG4gICAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogY2xvbmUuaGFzTG9hZGVkTmFtZXNwYWNlLmJpbmQoY2xvbmUpXG4gICAgICB9O1xuICAgICAgY2xvbmUudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKGNsb25lLnNlcnZpY2VzLCBjbG9uZS5vcHRpb25zKTtcbiAgICAgIGNsb25lLnRyYW5zbGF0b3Iub24oJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvbmUuZW1pdC5hcHBseShjbG9uZSwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZS5pbml0KG1lcmdlZE9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIGNsb25lLnRyYW5zbGF0b3Iub3B0aW9ucyA9IGNsb25lLm9wdGlvbnM7XG4gICAgICBjbG9uZS50cmFuc2xhdG9yLmJhY2tlbmRDb25uZWN0b3Iuc2VydmljZXMudXRpbHMgPSB7XG4gICAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogY2xvbmUuaGFzTG9hZGVkTmFtZXNwYWNlLmJpbmQoY2xvbmUpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICBzdG9yZTogdGhpcy5zdG9yZSxcbiAgICAgICAgbGFuZ3VhZ2U6IHRoaXMubGFuZ3VhZ2UsXG4gICAgICAgIGxhbmd1YWdlczogdGhpcy5sYW5ndWFnZXMsXG4gICAgICAgIHJlc29sdmVkTGFuZ3VhZ2U6IHRoaXMucmVzb2x2ZWRMYW5ndWFnZVxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSTE4bjtcbn0oRXZlbnRFbWl0dGVyKTtcblxuX2RlZmluZVByb3BlcnR5KEkxOG4sIFwiY3JlYXRlSW5zdGFuY2VcIiwgZnVuY3Rpb24gKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbmV3IEkxOG4ob3B0aW9ucywgY2FsbGJhY2spO1xufSk7XG5cbnZhciBpbnN0YW5jZSA9IEkxOG4uY3JlYXRlSW5zdGFuY2UoKTtcbmluc3RhbmNlLmNyZWF0ZUluc3RhbmNlID0gSTE4bi5jcmVhdGVJbnN0YW5jZTtcblxudmFyIGNyZWF0ZUluc3RhbmNlID0gaW5zdGFuY2UuY3JlYXRlSW5zdGFuY2U7XG52YXIgaW5pdCA9IGluc3RhbmNlLmluaXQ7XG52YXIgbG9hZFJlc291cmNlcyA9IGluc3RhbmNlLmxvYWRSZXNvdXJjZXM7XG52YXIgcmVsb2FkUmVzb3VyY2VzID0gaW5zdGFuY2UucmVsb2FkUmVzb3VyY2VzO1xudmFyIHVzZSA9IGluc3RhbmNlLnVzZTtcbnZhciBjaGFuZ2VMYW5ndWFnZSA9IGluc3RhbmNlLmNoYW5nZUxhbmd1YWdlO1xudmFyIGdldEZpeGVkVCA9IGluc3RhbmNlLmdldEZpeGVkVDtcbnZhciB0ID0gaW5zdGFuY2UudDtcbnZhciBleGlzdHMgPSBpbnN0YW5jZS5leGlzdHM7XG52YXIgc2V0RGVmYXVsdE5hbWVzcGFjZSA9IGluc3RhbmNlLnNldERlZmF1bHROYW1lc3BhY2U7XG52YXIgaGFzTG9hZGVkTmFtZXNwYWNlID0gaW5zdGFuY2UuaGFzTG9hZGVkTmFtZXNwYWNlO1xudmFyIGxvYWROYW1lc3BhY2VzID0gaW5zdGFuY2UubG9hZE5hbWVzcGFjZXM7XG52YXIgbG9hZExhbmd1YWdlcyA9IGluc3RhbmNlLmxvYWRMYW5ndWFnZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuZXhwb3J0IHsgY2hhbmdlTGFuZ3VhZ2UsIGNyZWF0ZUluc3RhbmNlLCBleGlzdHMsIGdldEZpeGVkVCwgaGFzTG9hZGVkTmFtZXNwYWNlLCBpbml0LCBsb2FkTGFuZ3VhZ2VzLCBsb2FkTmFtZXNwYWNlcywgbG9hZFJlc291cmNlcywgcmVsb2FkUmVzb3VyY2VzLCBzZXREZWZhdWx0TmFtZXNwYWNlLCB0LCB1c2UgfTtcbiIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmZ1bmN0aW9uIF90b0FycmF5KHIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKHIpIHx8IGl0ZXJhYmxlVG9BcnJheShyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cbmV4cG9ydCB7IF90b0FycmF5IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KHIpIHtcbiAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBudWxsICE9IHJbU3ltYm9sLml0ZXJhdG9yXSB8fCBudWxsICE9IHJbXCJAQGl0ZXJhdG9yXCJdKSByZXR1cm4gQXJyYXkuZnJvbShyKTtcbn1cbmV4cG9ydCB7IF9pdGVyYWJsZVRvQXJyYXkgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5cbnZhciBhcnIgPSBbXTtcbnZhciBlYWNoID0gYXJyLmZvckVhY2g7XG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5mdW5jdGlvbiBkZWZhdWx0cyhvYmopIHtcbiAgZWFjaC5jYWxsKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgZmllbGRDb250ZW50UmVnRXhwID0gL15bXFx1MDAwOVxcdTAwMjAtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl0rJC87XG5cbnZhciBzZXJpYWxpemVDb29raWUgPSBmdW5jdGlvbiBzZXJpYWxpemVDb29raWUobmFtZSwgdmFsLCBvcHRpb25zKSB7XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuICBvcHQucGF0aCA9IG9wdC5wYXRoIHx8ICcvJztcbiAgdmFyIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCk7XG4gIHZhciBzdHIgPSBuYW1lICsgJz0nICsgdmFsdWU7XG5cbiAgaWYgKG9wdC5tYXhBZ2UgPiAwKSB7XG4gICAgdmFyIG1heEFnZSA9IG9wdC5tYXhBZ2UgLSAwO1xuICAgIGlmIChpc05hTihtYXhBZ2UpKSB0aHJvdyBuZXcgRXJyb3IoJ21heEFnZSBzaG91bGQgYmUgYSBOdW1iZXInKTtcbiAgICBzdHIgKz0gJzsgTWF4LUFnZT0nICsgTWF0aC5mbG9vcihtYXhBZ2UpO1xuICB9XG5cbiAgaWYgKG9wdC5kb21haW4pIHtcbiAgICBpZiAoIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KG9wdC5kb21haW4pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZG9tYWluIGlzIGludmFsaWQnKTtcbiAgICB9XG5cbiAgICBzdHIgKz0gJzsgRG9tYWluPScgKyBvcHQuZG9tYWluO1xuICB9XG5cbiAgaWYgKG9wdC5wYXRoKSB7XG4gICAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChvcHQucGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBwYXRoIGlzIGludmFsaWQnKTtcbiAgICB9XG5cbiAgICBzdHIgKz0gJzsgUGF0aD0nICsgb3B0LnBhdGg7XG4gIH1cblxuICBpZiAob3B0LmV4cGlyZXMpIHtcbiAgICBpZiAodHlwZW9mIG9wdC5leHBpcmVzLnRvVVRDU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZXhwaXJlcyBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IEV4cGlyZXM9JyArIG9wdC5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XG4gIH1cblxuICBpZiAob3B0Lmh0dHBPbmx5KSBzdHIgKz0gJzsgSHR0cE9ubHknO1xuICBpZiAob3B0LnNlY3VyZSkgc3RyICs9ICc7IFNlY3VyZSc7XG5cbiAgaWYgKG9wdC5zYW1lU2l0ZSkge1xuICAgIHZhciBzYW1lU2l0ZSA9IHR5cGVvZiBvcHQuc2FtZVNpdGUgPT09ICdzdHJpbmcnID8gb3B0LnNhbWVTaXRlLnRvTG93ZXJDYXNlKCkgOiBvcHQuc2FtZVNpdGU7XG5cbiAgICBzd2l0Y2ggKHNhbWVTaXRlKSB7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHN0ciArPSAnOyBTYW1lU2l0ZT1TdHJpY3QnO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbGF4JzpcbiAgICAgICAgc3RyICs9ICc7IFNhbWVTaXRlPUxheCc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzdHJpY3QnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9U3RyaWN0JztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICBzdHIgKz0gJzsgU2FtZVNpdGU9Tm9uZSc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gc2FtZVNpdGUgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG52YXIgY29va2llID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCB2YWx1ZSwgbWludXRlcywgZG9tYWluKSB7XG4gICAgdmFyIGNvb2tpZU9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHtcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIHNhbWVTaXRlOiAnc3RyaWN0J1xuICAgIH07XG5cbiAgICBpZiAobWludXRlcykge1xuICAgICAgY29va2llT3B0aW9ucy5leHBpcmVzID0gbmV3IERhdGUoKTtcbiAgICAgIGNvb2tpZU9wdGlvbnMuZXhwaXJlcy5zZXRUaW1lKGNvb2tpZU9wdGlvbnMuZXhwaXJlcy5nZXRUaW1lKCkgKyBtaW51dGVzICogNjAgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBpZiAoZG9tYWluKSBjb29raWVPcHRpb25zLmRvbWFpbiA9IGRvbWFpbjtcbiAgICBkb2N1bWVudC5jb29raWUgPSBzZXJpYWxpemVDb29raWUobmFtZSwgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSwgY29va2llT3B0aW9ucyk7XG4gIH0sXG4gIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgIHZhciBuYW1lRVEgPSBuYW1lICsgJz0nO1xuICAgIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjYVtpXTtcblxuICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEsIGMubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGMuaW5kZXhPZihuYW1lRVEpID09PSAwKSByZXR1cm4gYy5zdWJzdHJpbmcobmFtZUVRLmxlbmd0aCwgYy5sZW5ndGgpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgdGhpcy5jcmVhdGUobmFtZSwgJycsIC0xKTtcbiAgfVxufTtcbnZhciBjb29raWUkMSA9IHtcbiAgbmFtZTogJ2Nvb2tpZScsXG4gIGxvb2t1cDogZnVuY3Rpb24gbG9va3VwKG9wdGlvbnMpIHtcbiAgICB2YXIgZm91bmQ7XG5cbiAgICBpZiAob3B0aW9ucy5sb29rdXBDb29raWUgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIGMgPSBjb29raWUucmVhZChvcHRpb25zLmxvb2t1cENvb2tpZSk7XG4gICAgICBpZiAoYykgZm91bmQgPSBjO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfSxcbiAgY2FjaGVVc2VyTGFuZ3VhZ2U6IGZ1bmN0aW9uIGNhY2hlVXNlckxhbmd1YWdlKGxuZywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmxvb2t1cENvb2tpZSAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb29raWUuY3JlYXRlKG9wdGlvbnMubG9va3VwQ29va2llLCBsbmcsIG9wdGlvbnMuY29va2llTWludXRlcywgb3B0aW9ucy5jb29raWVEb21haW4sIG9wdGlvbnMuY29va2llT3B0aW9ucyk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcXVlcnlzdHJpbmcgPSB7XG4gIG5hbWU6ICdxdWVyeXN0cmluZycsXG4gIGxvb2t1cDogZnVuY3Rpb24gbG9va3VwKG9wdGlvbnMpIHtcbiAgICB2YXIgZm91bmQ7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBxdWVyeSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpO1xuICAgICAgdmFyIHBhcmFtcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwb3MgPSBwYXJhbXNbaV0uaW5kZXhPZignPScpO1xuXG4gICAgICAgIGlmIChwb3MgPiAwKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHBhcmFtc1tpXS5zdWJzdHJpbmcoMCwgcG9zKTtcblxuICAgICAgICAgIGlmIChrZXkgPT09IG9wdGlvbnMubG9va3VwUXVlcnlzdHJpbmcpIHtcbiAgICAgICAgICAgIGZvdW5kID0gcGFyYW1zW2ldLnN1YnN0cmluZyhwb3MgKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbn07XG5cbnZhciBoYXNMb2NhbFN0b3JhZ2VTdXBwb3J0ID0gbnVsbDtcblxudmFyIGxvY2FsU3RvcmFnZUF2YWlsYWJsZSA9IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZUF2YWlsYWJsZSgpIHtcbiAgaWYgKGhhc0xvY2FsU3RvcmFnZVN1cHBvcnQgIT09IG51bGwpIHJldHVybiBoYXNMb2NhbFN0b3JhZ2VTdXBwb3J0O1xuXG4gIHRyeSB7XG4gICAgaGFzTG9jYWxTdG9yYWdlU3VwcG9ydCA9IHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmxvY2FsU3RvcmFnZSAhPT0gbnVsbDtcbiAgICB2YXIgdGVzdEtleSA9ICdpMThuZXh0LnRyYW5zbGF0ZS5ib28nO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0ZXN0S2V5LCAnZm9vJyk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRlc3RLZXkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGFzTG9jYWxTdG9yYWdlU3VwcG9ydCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGhhc0xvY2FsU3RvcmFnZVN1cHBvcnQ7XG59O1xuXG52YXIgbG9jYWxTdG9yYWdlID0ge1xuICBuYW1lOiAnbG9jYWxTdG9yYWdlJyxcbiAgbG9va3VwOiBmdW5jdGlvbiBsb29rdXAob3B0aW9ucykge1xuICAgIHZhciBmb3VuZDtcblxuICAgIGlmIChvcHRpb25zLmxvb2t1cExvY2FsU3RvcmFnZSAmJiBsb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSkge1xuICAgICAgdmFyIGxuZyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShvcHRpb25zLmxvb2t1cExvY2FsU3RvcmFnZSk7XG4gICAgICBpZiAobG5nKSBmb3VuZCA9IGxuZztcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH0sXG4gIGNhY2hlVXNlckxhbmd1YWdlOiBmdW5jdGlvbiBjYWNoZVVzZXJMYW5ndWFnZShsbmcsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5sb29rdXBMb2NhbFN0b3JhZ2UgJiYgbG9jYWxTdG9yYWdlQXZhaWxhYmxlKCkpIHtcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShvcHRpb25zLmxvb2t1cExvY2FsU3RvcmFnZSwgbG5nKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBoYXNTZXNzaW9uU3RvcmFnZVN1cHBvcnQgPSBudWxsO1xuXG52YXIgc2Vzc2lvblN0b3JhZ2VBdmFpbGFibGUgPSBmdW5jdGlvbiBzZXNzaW9uU3RvcmFnZUF2YWlsYWJsZSgpIHtcbiAgaWYgKGhhc1Nlc3Npb25TdG9yYWdlU3VwcG9ydCAhPT0gbnVsbCkgcmV0dXJuIGhhc1Nlc3Npb25TdG9yYWdlU3VwcG9ydDtcblxuICB0cnkge1xuICAgIGhhc1Nlc3Npb25TdG9yYWdlU3VwcG9ydCA9IHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnNlc3Npb25TdG9yYWdlICE9PSBudWxsO1xuICAgIHZhciB0ZXN0S2V5ID0gJ2kxOG5leHQudHJhbnNsYXRlLmJvbyc7XG4gICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0odGVzdEtleSwgJ2ZvbycpO1xuICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHRlc3RLZXkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGFzU2Vzc2lvblN0b3JhZ2VTdXBwb3J0ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaGFzU2Vzc2lvblN0b3JhZ2VTdXBwb3J0O1xufTtcblxudmFyIHNlc3Npb25TdG9yYWdlID0ge1xuICBuYW1lOiAnc2Vzc2lvblN0b3JhZ2UnLFxuICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChvcHRpb25zKSB7XG4gICAgdmFyIGZvdW5kO1xuXG4gICAgaWYgKG9wdGlvbnMubG9va3VwU2Vzc2lvblN0b3JhZ2UgJiYgc2Vzc2lvblN0b3JhZ2VBdmFpbGFibGUoKSkge1xuICAgICAgdmFyIGxuZyA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKG9wdGlvbnMubG9va3VwU2Vzc2lvblN0b3JhZ2UpO1xuICAgICAgaWYgKGxuZykgZm91bmQgPSBsbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xuICB9LFxuICBjYWNoZVVzZXJMYW5ndWFnZTogZnVuY3Rpb24gY2FjaGVVc2VyTGFuZ3VhZ2UobG5nLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMubG9va3VwU2Vzc2lvblN0b3JhZ2UgJiYgc2Vzc2lvblN0b3JhZ2VBdmFpbGFibGUoKSkge1xuICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0ob3B0aW9ucy5sb29rdXBTZXNzaW9uU3RvcmFnZSwgbG5nKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBuYXZpZ2F0b3IkMSA9IHtcbiAgbmFtZTogJ25hdmlnYXRvcicsXG4gIGxvb2t1cDogZnVuY3Rpb24gbG9va3VwKG9wdGlvbnMpIHtcbiAgICB2YXIgZm91bmQgPSBbXTtcblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKG5hdmlnYXRvci5sYW5ndWFnZXMpIHtcbiAgICAgICAgLy8gY2hyb21lIG9ubHk7IG5vdCBhbiBhcnJheSwgc28gY2FuJ3QgdXNlIC5wdXNoLmFwcGx5IGluc3RlYWQgb2YgaXRlcmF0aW5nXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmF2aWdhdG9yLmxhbmd1YWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGZvdW5kLnB1c2gobmF2aWdhdG9yLmxhbmd1YWdlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UpIHtcbiAgICAgICAgZm91bmQucHVzaChuYXZpZ2F0b3IudXNlckxhbmd1YWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hdmlnYXRvci5sYW5ndWFnZSkge1xuICAgICAgICBmb3VuZC5wdXNoKG5hdmlnYXRvci5sYW5ndWFnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kLmxlbmd0aCA+IDAgPyBmb3VuZCA6IHVuZGVmaW5lZDtcbiAgfVxufTtcblxudmFyIGh0bWxUYWcgPSB7XG4gIG5hbWU6ICdodG1sVGFnJyxcbiAgbG9va3VwOiBmdW5jdGlvbiBsb29rdXAob3B0aW9ucykge1xuICAgIHZhciBmb3VuZDtcbiAgICB2YXIgaHRtbFRhZyA9IG9wdGlvbnMuaHRtbFRhZyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IG51bGwpO1xuXG4gICAgaWYgKGh0bWxUYWcgJiYgdHlwZW9mIGh0bWxUYWcuZ2V0QXR0cmlidXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmb3VuZCA9IGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdsYW5nJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG59O1xuXG52YXIgcGF0aCA9IHtcbiAgbmFtZTogJ3BhdGgnLFxuICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChvcHRpb25zKSB7XG4gICAgdmFyIGZvdW5kO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgbGFuZ3VhZ2UgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUubWF0Y2goL1xcLyhbYS16QS1aLV0qKS9nKTtcblxuICAgICAgaWYgKGxhbmd1YWdlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxvb2t1cEZyb21QYXRoSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZVtvcHRpb25zLmxvb2t1cEZyb21QYXRoSW5kZXhdICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3VuZCA9IGxhbmd1YWdlW29wdGlvbnMubG9va3VwRnJvbVBhdGhJbmRleF0ucmVwbGFjZSgnLycsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3VuZCA9IGxhbmd1YWdlWzBdLnJlcGxhY2UoJy8nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbn07XG5cbnZhciBzdWJkb21haW4gPSB7XG4gIG5hbWU6ICdzdWJkb21haW4nLFxuICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChvcHRpb25zKSB7XG4gICAgdmFyIGZvdW5kO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgbGFuZ3VhZ2UgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5tYXRjaCgvKD86aHR0cFtzXSpcXDpcXC9cXC8pKiguKj8pXFwuKD89W15cXC9dKlxcLi57Miw1fSkvZ2kpO1xuXG4gICAgICBpZiAobGFuZ3VhZ2UgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9va3VwRnJvbVN1YmRvbWFpbkluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGZvdW5kID0gbGFuZ3VhZ2Vbb3B0aW9ucy5sb29rdXBGcm9tU3ViZG9tYWluSW5kZXhdLnJlcGxhY2UoJ2h0dHA6Ly8nLCAnJykucmVwbGFjZSgnaHR0cHM6Ly8nLCAnJykucmVwbGFjZSgnLicsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3VuZCA9IGxhbmd1YWdlWzBdLnJlcGxhY2UoJ2h0dHA6Ly8nLCAnJykucmVwbGFjZSgnaHR0cHM6Ly8nLCAnJykucmVwbGFjZSgnLicsICcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdHMoKSB7XG4gIHJldHVybiB7XG4gICAgb3JkZXI6IFsncXVlcnlzdHJpbmcnLCAnY29va2llJywgJ2xvY2FsU3RvcmFnZScsICdzZXNzaW9uU3RvcmFnZScsICduYXZpZ2F0b3InLCAnaHRtbFRhZyddLFxuICAgIGxvb2t1cFF1ZXJ5c3RyaW5nOiAnbG5nJyxcbiAgICBsb29rdXBDb29raWU6ICdpMThuZXh0JyxcbiAgICBsb29rdXBMb2NhbFN0b3JhZ2U6ICdpMThuZXh0TG5nJyxcbiAgICBsb29rdXBTZXNzaW9uU3RvcmFnZTogJ2kxOG5leHRMbmcnLFxuICAgIC8vIGNhY2hlIHVzZXIgbGFuZ3VhZ2VcbiAgICBjYWNoZXM6IFsnbG9jYWxTdG9yYWdlJ10sXG4gICAgZXhjbHVkZUNhY2hlRm9yOiBbJ2NpbW9kZSddIC8vY29va2llTWludXRlczogMTAsXG4gICAgLy9jb29raWVEb21haW46ICdteURvbWFpbidcblxuICB9O1xufVxuXG52YXIgQnJvd3NlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJyb3dzZXIoc2VydmljZXMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3Nlcik7XG5cbiAgICB0aGlzLnR5cGUgPSAnbGFuZ3VhZ2VEZXRlY3Rvcic7XG4gICAgdGhpcy5kZXRlY3RvcnMgPSB7fTtcbiAgICB0aGlzLmluaXQoc2VydmljZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJyb3dzZXIsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChzZXJ2aWNlcykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGkxOG5PcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHRoaXMuc2VydmljZXMgPSBzZXJ2aWNlcztcbiAgICAgIHRoaXMub3B0aW9ucyA9IGRlZmF1bHRzKG9wdGlvbnMsIHRoaXMub3B0aW9ucyB8fCB7fSwgZ2V0RGVmYXVsdHMoKSk7IC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9va3VwRnJvbVVybEluZGV4KSB0aGlzLm9wdGlvbnMubG9va3VwRnJvbVBhdGhJbmRleCA9IHRoaXMub3B0aW9ucy5sb29rdXBGcm9tVXJsSW5kZXg7XG4gICAgICB0aGlzLmkxOG5PcHRpb25zID0gaTE4bk9wdGlvbnM7XG4gICAgICB0aGlzLmFkZERldGVjdG9yKGNvb2tpZSQxKTtcbiAgICAgIHRoaXMuYWRkRGV0ZWN0b3IocXVlcnlzdHJpbmcpO1xuICAgICAgdGhpcy5hZGREZXRlY3Rvcihsb2NhbFN0b3JhZ2UpO1xuICAgICAgdGhpcy5hZGREZXRlY3RvcihzZXNzaW9uU3RvcmFnZSk7XG4gICAgICB0aGlzLmFkZERldGVjdG9yKG5hdmlnYXRvciQxKTtcbiAgICAgIHRoaXMuYWRkRGV0ZWN0b3IoaHRtbFRhZyk7XG4gICAgICB0aGlzLmFkZERldGVjdG9yKHBhdGgpO1xuICAgICAgdGhpcy5hZGREZXRlY3RvcihzdWJkb21haW4pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGREZXRlY3RvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGREZXRlY3RvcihkZXRlY3Rvcikge1xuICAgICAgdGhpcy5kZXRlY3RvcnNbZGV0ZWN0b3IubmFtZV0gPSBkZXRlY3RvcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGV0ZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGVjdChkZXRlY3Rpb25PcmRlcikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCFkZXRlY3Rpb25PcmRlcikgZGV0ZWN0aW9uT3JkZXIgPSB0aGlzLm9wdGlvbnMub3JkZXI7XG4gICAgICB2YXIgZGV0ZWN0ZWQgPSBbXTtcbiAgICAgIGRldGVjdGlvbk9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGRldGVjdG9yTmFtZSkge1xuICAgICAgICBpZiAoX3RoaXMuZGV0ZWN0b3JzW2RldGVjdG9yTmFtZV0pIHtcbiAgICAgICAgICB2YXIgbG9va3VwID0gX3RoaXMuZGV0ZWN0b3JzW2RldGVjdG9yTmFtZV0ubG9va3VwKF90aGlzLm9wdGlvbnMpO1xuXG4gICAgICAgICAgaWYgKGxvb2t1cCAmJiB0eXBlb2YgbG9va3VwID09PSAnc3RyaW5nJykgbG9va3VwID0gW2xvb2t1cF07XG4gICAgICAgICAgaWYgKGxvb2t1cCkgZGV0ZWN0ZWQgPSBkZXRlY3RlZC5jb25jYXQobG9va3VwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLmdldEJlc3RNYXRjaEZyb21Db2RlcykgcmV0dXJuIGRldGVjdGVkOyAvLyBuZXcgaTE4bmV4dCB2MTkuNS4wXG5cbiAgICAgIHJldHVybiBkZXRlY3RlZC5sZW5ndGggPiAwID8gZGV0ZWN0ZWRbMF0gOiBudWxsOyAvLyBhIGxpdHRsZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhY2hlVXNlckxhbmd1YWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhY2hlVXNlckxhbmd1YWdlKGxuZywgY2FjaGVzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCFjYWNoZXMpIGNhY2hlcyA9IHRoaXMub3B0aW9ucy5jYWNoZXM7XG4gICAgICBpZiAoIWNhY2hlcykgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leGNsdWRlQ2FjaGVGb3IgJiYgdGhpcy5vcHRpb25zLmV4Y2x1ZGVDYWNoZUZvci5pbmRleE9mKGxuZykgPiAtMSkgcmV0dXJuO1xuICAgICAgY2FjaGVzLmZvckVhY2goZnVuY3Rpb24gKGNhY2hlTmFtZSkge1xuICAgICAgICBpZiAoX3RoaXMyLmRldGVjdG9yc1tjYWNoZU5hbWVdKSBfdGhpczIuZGV0ZWN0b3JzW2NhY2hlTmFtZV0uY2FjaGVVc2VyTGFuZ3VhZ2UobG5nLCBfdGhpczIub3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnJvd3Nlcjtcbn0oKTtcblxuQnJvd3Nlci50eXBlID0gJ2xhbmd1YWdlRGV0ZWN0b3InO1xuXG5leHBvcnQgeyBCcm93c2VyIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cblxudmFyIGFyciA9IFtdO1xudmFyIGVhY2ggPSBhcnIuZm9yRWFjaDtcbnZhciBzbGljZSA9IGFyci5zbGljZTtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0cyhvYmopIHtcbiAgZWFjaC5jYWxsKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzWE1MSHR0cFJlcXVlc3QoKSB7XG4gIHJldHVybiB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFhNTEh0dHBSZXF1ZXN0KSkgPT09ICdvYmplY3QnO1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UobWF5YmVQcm9taXNlKSB7XG4gIHJldHVybiAhIW1heWJlUHJvbWlzZSAmJiB0eXBlb2YgbWF5YmVQcm9taXNlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUHJvbWlzZShtYXliZVByb21pc2UpIHtcbiAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2UpKSB7XG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlKTtcbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCB7IGRlZmF1bHRzLCBoYXNYTUxIdHRwUmVxdWVzdCB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0ICogYXMgZmV0Y2hOb2RlIGZyb20gJy4vZ2V0RmV0Y2guY2pzJztcbnZhciBmZXRjaEFwaTtcblxuaWYgKHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmZldGNoKSB7XG4gICAgZmV0Y2hBcGkgPSBnbG9iYWwuZmV0Y2g7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmZldGNoKSB7XG4gICAgZmV0Y2hBcGkgPSB3aW5kb3cuZmV0Y2g7XG4gIH1cbn1cblxudmFyIFhtbEh0dHBSZXF1ZXN0QXBpO1xuXG5pZiAoaGFzWE1MSHR0cFJlcXVlc3QpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5YTUxIdHRwUmVxdWVzdCkge1xuICAgIFhtbEh0dHBSZXF1ZXN0QXBpID0gZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5YTUxIdHRwUmVxdWVzdCkge1xuICAgIFhtbEh0dHBSZXF1ZXN0QXBpID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0O1xuICB9XG59XG5cbnZhciBBY3RpdmVYT2JqZWN0QXBpO1xuXG5pZiAodHlwZW9mIEFjdGl2ZVhPYmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5BY3RpdmVYT2JqZWN0KSB7XG4gICAgQWN0aXZlWE9iamVjdEFwaSA9IGdsb2JhbC5BY3RpdmVYT2JqZWN0O1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7XG4gICAgQWN0aXZlWE9iamVjdEFwaSA9IHdpbmRvdy5BY3RpdmVYT2JqZWN0O1xuICB9XG59XG5cbmlmICghZmV0Y2hBcGkgJiYgZmV0Y2hOb2RlICYmICFYbWxIdHRwUmVxdWVzdEFwaSAmJiAhQWN0aXZlWE9iamVjdEFwaSkgZmV0Y2hBcGkgPSBmZXRjaE5vZGUuZGVmYXVsdCB8fCBmZXRjaE5vZGU7XG5pZiAodHlwZW9mIGZldGNoQXBpICE9PSAnZnVuY3Rpb24nKSBmZXRjaEFwaSA9IHVuZGVmaW5lZDtcblxudmFyIGFkZFF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gYWRkUXVlcnlTdHJpbmcodXJsLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyAmJiBfdHlwZW9mKHBhcmFtcykgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHF1ZXJ5U3RyaW5nID0gJyc7XG5cbiAgICBmb3IgKHZhciBwYXJhbU5hbWUgaW4gcGFyYW1zKSB7XG4gICAgICBxdWVyeVN0cmluZyArPSAnJicgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1OYW1lKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNbcGFyYW1OYW1lXSk7XG4gICAgfVxuXG4gICAgaWYgKCFxdWVyeVN0cmluZykgcmV0dXJuIHVybDtcbiAgICB1cmwgPSB1cmwgKyAodXJsLmluZGV4T2YoJz8nKSAhPT0gLTEgPyAnJicgOiAnPycpICsgcXVlcnlTdHJpbmcuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcblxudmFyIHJlcXVlc3RXaXRoRmV0Y2ggPSBmdW5jdGlvbiByZXF1ZXN0V2l0aEZldGNoKG9wdGlvbnMsIHVybCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgaWYgKG9wdGlvbnMucXVlcnlTdHJpbmdQYXJhbXMpIHtcbiAgICB1cmwgPSBhZGRRdWVyeVN0cmluZyh1cmwsIG9wdGlvbnMucXVlcnlTdHJpbmdQYXJhbXMpO1xuICB9XG5cbiAgdmFyIGhlYWRlcnMgPSBkZWZhdWx0cyh7fSwgdHlwZW9mIG9wdGlvbnMuY3VzdG9tSGVhZGVycyA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuY3VzdG9tSGVhZGVycygpIDogb3B0aW9ucy5jdXN0b21IZWFkZXJzKTtcbiAgaWYgKHBheWxvYWQpIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICBmZXRjaEFwaSh1cmwsIGRlZmF1bHRzKHtcbiAgICBtZXRob2Q6IHBheWxvYWQgPyAnUE9TVCcgOiAnR0VUJyxcbiAgICBib2R5OiBwYXlsb2FkID8gb3B0aW9ucy5zdHJpbmdpZnkocGF5bG9hZCkgOiB1bmRlZmluZWQsXG4gICAgaGVhZGVyczogaGVhZGVyc1xuICB9LCB0eXBlb2Ygb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMucmVxdWVzdE9wdGlvbnMocGF5bG9hZCkgOiBvcHRpb25zLnJlcXVlc3RPcHRpb25zKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSByZXR1cm4gY2FsbGJhY2socmVzcG9uc2Uuc3RhdHVzVGV4dCB8fCAnRXJyb3InLCB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c1xuICAgIH0pO1xuICAgIHJlc3BvbnNlLnRleHQoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICB9KS5jYXRjaChjYWxsYmFjayk7XG4gIH0pLmNhdGNoKGNhbGxiYWNrKTtcbn07XG5cbnZhciByZXF1ZXN0V2l0aFhtbEh0dHBSZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdFdpdGhYbWxIdHRwUmVxdWVzdChvcHRpb25zLCB1cmwsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gIGlmIChwYXlsb2FkICYmIF90eXBlb2YocGF5bG9hZCkgPT09ICdvYmplY3QnKSB7XG4gICAgcGF5bG9hZCA9IGFkZFF1ZXJ5U3RyaW5nKCcnLCBwYXlsb2FkKS5zbGljZSgxKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLnF1ZXJ5U3RyaW5nUGFyYW1zKSB7XG4gICAgdXJsID0gYWRkUXVlcnlTdHJpbmcodXJsLCBvcHRpb25zLnF1ZXJ5U3RyaW5nUGFyYW1zKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIHg7XG5cbiAgICBpZiAoWG1sSHR0cFJlcXVlc3RBcGkpIHtcbiAgICAgIHggPSBuZXcgWG1sSHR0cFJlcXVlc3RBcGkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IG5ldyBBY3RpdmVYT2JqZWN0QXBpKCdNU1hNTDIuWE1MSFRUUC4zLjAnKTtcbiAgICB9XG5cbiAgICB4Lm9wZW4ocGF5bG9hZCA/ICdQT1NUJyA6ICdHRVQnLCB1cmwsIDEpO1xuXG4gICAgaWYgKCFvcHRpb25zLmNyb3NzRG9tYWluKSB7XG4gICAgICB4LnNldFJlcXVlc3RIZWFkZXIoJ1gtUmVxdWVzdGVkLVdpdGgnLCAnWE1MSHR0cFJlcXVlc3QnKTtcbiAgICB9XG5cbiAgICB4LndpdGhDcmVkZW50aWFscyA9ICEhb3B0aW9ucy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgICBpZiAocGF5bG9hZCkge1xuICAgICAgeC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHgub3ZlcnJpZGVNaW1lVHlwZSkge1xuICAgICAgeC5vdmVycmlkZU1pbWVUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgfVxuXG4gICAgdmFyIGggPSBvcHRpb25zLmN1c3RvbUhlYWRlcnM7XG4gICAgaCA9IHR5cGVvZiBoID09PSAnZnVuY3Rpb24nID8gaCgpIDogaDtcblxuICAgIGlmIChoKSB7XG4gICAgICBmb3IgKHZhciBpIGluIGgpIHtcbiAgICAgICAgeC5zZXRSZXF1ZXN0SGVhZGVyKGksIGhbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHgub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgeC5yZWFkeVN0YXRlID4gMyAmJiBjYWxsYmFjayh4LnN0YXR1cyA+PSA0MDAgPyB4LnN0YXR1c1RleHQgOiBudWxsLCB7XG4gICAgICAgIHN0YXR1czogeC5zdGF0dXMsXG4gICAgICAgIGRhdGE6IHgucmVzcG9uc2VUZXh0XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgeC5zZW5kKHBheWxvYWQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhlKTtcbiAgfVxufTtcblxudmFyIHJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KG9wdGlvbnMsIHVybCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBwYXlsb2FkO1xuICAgIHBheWxvYWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGlmIChmZXRjaEFwaSkge1xuICAgIHJldHVybiByZXF1ZXN0V2l0aEZldGNoKG9wdGlvbnMsIHVybCwgcGF5bG9hZCwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKGhhc1hNTEh0dHBSZXF1ZXN0IHx8IHR5cGVvZiBBY3RpdmVYT2JqZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHJlcXVlc3RXaXRoWG1sSHR0cFJlcXVlc3Qob3B0aW9ucywgdXJsLCBwYXlsb2FkLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBkZWZhdWx0cywgbWFrZVByb21pc2UgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJy4vcmVxdWVzdC5qcyc7XG5cbnZhciBnZXREZWZhdWx0cyA9IGZ1bmN0aW9uIGdldERlZmF1bHRzKCkge1xuICByZXR1cm4ge1xuICAgIGxvYWRQYXRoOiAnL2xvY2FsZXMve3tsbmd9fS97e25zfX0uanNvbicsXG4gICAgYWRkUGF0aDogJy9sb2NhbGVzL2FkZC97e2xuZ319L3t7bnN9fScsXG4gICAgYWxsb3dNdWx0aUxvYWRpbmc6IGZhbHNlLFxuICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShkYXRhKSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnksXG4gICAgcGFyc2VQYXlsb2FkOiBmdW5jdGlvbiBwYXJzZVBheWxvYWQobmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpIHtcbiAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgZmFsbGJhY2tWYWx1ZSB8fCAnJyk7XG4gICAgfSxcbiAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgIHJlbG9hZEludGVydmFsOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IGZhbHNlIDogNjAgKiA2MCAqIDEwMDAsXG4gICAgY3VzdG9tSGVhZGVyczoge30sXG4gICAgcXVlcnlTdHJpbmdQYXJhbXM6IHt9LFxuICAgIGNyb3NzRG9tYWluOiBmYWxzZSxcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgIG92ZXJyaWRlTWltZVR5cGU6IGZhbHNlLFxuICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgIGNhY2hlOiAnZGVmYXVsdCdcbiAgICB9XG4gIH07XG59O1xuXG52YXIgQmFja2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFja2VuZChzZXJ2aWNlcykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgYWxsT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFja2VuZCk7XG5cbiAgICB0aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmFsbE9wdGlvbnMgPSBhbGxPcHRpb25zO1xuICAgIHRoaXMudHlwZSA9ICdiYWNrZW5kJztcbiAgICB0aGlzLmluaXQoc2VydmljZXMsIG9wdGlvbnMsIGFsbE9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhY2tlbmQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChzZXJ2aWNlcykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGFsbE9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgdGhpcy5zZXJ2aWNlcyA9IHNlcnZpY2VzO1xuICAgICAgdGhpcy5vcHRpb25zID0gZGVmYXVsdHMob3B0aW9ucywgdGhpcy5vcHRpb25zIHx8IHt9LCBnZXREZWZhdWx0cygpKTtcbiAgICAgIHRoaXMuYWxsT3B0aW9ucyA9IGFsbE9wdGlvbnM7XG5cbiAgICAgIGlmICh0aGlzLnNlcnZpY2VzICYmIHRoaXMub3B0aW9ucy5yZWxvYWRJbnRlcnZhbCkge1xuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbG9hZCgpO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMucmVsb2FkSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkTXVsdGlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZE11bHRpKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX3JlYWRBbnkobGFuZ3VhZ2VzLCBsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG5hbWVzcGFjZXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVhZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKGxhbmd1YWdlLCBuYW1lc3BhY2UsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9yZWFkQW55KFtsYW5ndWFnZV0sIGxhbmd1YWdlLCBbbmFtZXNwYWNlXSwgbmFtZXNwYWNlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9yZWFkQW55XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWFkQW55KGxhbmd1YWdlcywgbG9hZFVybExhbmd1YWdlcywgbmFtZXNwYWNlcywgbG9hZFVybE5hbWVzcGFjZXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGxvYWRQYXRoID0gdGhpcy5vcHRpb25zLmxvYWRQYXRoO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5sb2FkUGF0aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsb2FkUGF0aCA9IHRoaXMub3B0aW9ucy5sb2FkUGF0aChsYW5ndWFnZXMsIG5hbWVzcGFjZXMpO1xuICAgICAgfVxuXG4gICAgICBsb2FkUGF0aCA9IG1ha2VQcm9taXNlKGxvYWRQYXRoKTtcbiAgICAgIGxvYWRQYXRoLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkTG9hZFBhdGgpIHtcbiAgICAgICAgdmFyIHVybCA9IF90aGlzMi5zZXJ2aWNlcy5pbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUocmVzb2x2ZWRMb2FkUGF0aCwge1xuICAgICAgICAgIGxuZzogbGFuZ3VhZ2VzLmpvaW4oJysnKSxcbiAgICAgICAgICBuczogbmFtZXNwYWNlcy5qb2luKCcrJylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMyLmxvYWRVcmwodXJsLCBjYWxsYmFjaywgbG9hZFVybExhbmd1YWdlcywgbG9hZFVybE5hbWVzcGFjZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRVcmxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZFVybCh1cmwsIGNhbGxiYWNrLCBsYW5ndWFnZXMsIG5hbWVzcGFjZXMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLm9wdGlvbnMucmVxdWVzdCh0aGlzLm9wdGlvbnMsIHVybCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKHJlcyAmJiAocmVzLnN0YXR1cyA+PSA1MDAgJiYgcmVzLnN0YXR1cyA8IDYwMCB8fCAhcmVzLnN0YXR1cykpIHJldHVybiBjYWxsYmFjaygnZmFpbGVkIGxvYWRpbmcgJyArIHVybCArICc7IHN0YXR1cyBjb2RlOiAnICsgcmVzLnN0YXR1cywgdHJ1ZSk7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1cyA+PSA0MDAgJiYgcmVzLnN0YXR1cyA8IDUwMCkgcmV0dXJuIGNhbGxiYWNrKCdmYWlsZWQgbG9hZGluZyAnICsgdXJsICsgJzsgc3RhdHVzIGNvZGU6ICcgKyByZXMuc3RhdHVzLCBmYWxzZSk7XG4gICAgICAgIGlmICghcmVzICYmIGVyciAmJiBlcnIubWVzc2FnZSAmJiBlcnIubWVzc2FnZS5pbmRleE9mKCdGYWlsZWQgdG8gZmV0Y2gnKSA+IC0xKSByZXR1cm4gY2FsbGJhY2soJ2ZhaWxlZCBsb2FkaW5nICcgKyB1cmwgKyAnOiAnICsgZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBmYWxzZSk7XG4gICAgICAgIHZhciByZXQsIHBhcnNlRXJyO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXMuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldCA9IF90aGlzMy5vcHRpb25zLnBhcnNlKHJlcy5kYXRhLCBsYW5ndWFnZXMsIG5hbWVzcGFjZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXQgPSByZXMuZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwYXJzZUVyciA9ICdmYWlsZWQgcGFyc2luZyAnICsgdXJsICsgJyB0byBqc29uJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZUVycikgcmV0dXJuIGNhbGxiYWNrKHBhcnNlRXJyLCBmYWxzZSk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJldCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShsYW5ndWFnZXMsIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFkZFBhdGgpIHJldHVybjtcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzID09PSAnc3RyaW5nJykgbGFuZ3VhZ2VzID0gW2xhbmd1YWdlc107XG4gICAgICB2YXIgcGF5bG9hZCA9IHRoaXMub3B0aW9ucy5wYXJzZVBheWxvYWQobmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICAgICAgdmFyIGZpbmlzaGVkID0gMDtcbiAgICAgIHZhciBkYXRhQXJyYXkgPSBbXTtcbiAgICAgIHZhciByZXNBcnJheSA9IFtdO1xuICAgICAgbGFuZ3VhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGxuZykge1xuICAgICAgICB2YXIgYWRkUGF0aCA9IF90aGlzNC5vcHRpb25zLmFkZFBhdGg7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpczQub3B0aW9ucy5hZGRQYXRoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYWRkUGF0aCA9IF90aGlzNC5vcHRpb25zLmFkZFBhdGgobG5nLCBuYW1lc3BhY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVybCA9IF90aGlzNC5zZXJ2aWNlcy5pbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUoYWRkUGF0aCwge1xuICAgICAgICAgIGxuZzogbG5nLFxuICAgICAgICAgIG5zOiBuYW1lc3BhY2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXM0Lm9wdGlvbnMucmVxdWVzdChfdGhpczQub3B0aW9ucywgdXJsLCBwYXlsb2FkLCBmdW5jdGlvbiAoZGF0YSwgcmVzKSB7XG4gICAgICAgICAgZmluaXNoZWQgKz0gMTtcbiAgICAgICAgICBkYXRhQXJyYXkucHVzaChkYXRhKTtcbiAgICAgICAgICByZXNBcnJheS5wdXNoKHJlcyk7XG5cbiAgICAgICAgICBpZiAoZmluaXNoZWQgPT09IGxhbmd1YWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZGF0YUFycmF5LCByZXNBcnJheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRzZXJ2aWNlcyA9IHRoaXMuc2VydmljZXMsXG4gICAgICAgICAgYmFja2VuZENvbm5lY3RvciA9IF90aGlzJHNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IsXG4gICAgICAgICAgbGFuZ3VhZ2VVdGlscyA9IF90aGlzJHNlcnZpY2VzLmxhbmd1YWdlVXRpbHMsXG4gICAgICAgICAgbG9nZ2VyID0gX3RoaXMkc2VydmljZXMubG9nZ2VyO1xuICAgICAgdmFyIGN1cnJlbnRMYW5ndWFnZSA9IGJhY2tlbmRDb25uZWN0b3IubGFuZ3VhZ2U7XG4gICAgICBpZiAoY3VycmVudExhbmd1YWdlICYmIGN1cnJlbnRMYW5ndWFnZS50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuO1xuICAgICAgdmFyIHRvTG9hZCA9IFtdO1xuXG4gICAgICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKGxuZykge1xuICAgICAgICB2YXIgbG5ncyA9IGxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxuZyk7XG4gICAgICAgIGxuZ3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgIGlmICh0b0xvYWQuaW5kZXhPZihsKSA8IDApIHRvTG9hZC5wdXNoKGwpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGFwcGVuZChjdXJyZW50TGFuZ3VhZ2UpO1xuICAgICAgaWYgKHRoaXMuYWxsT3B0aW9ucy5wcmVsb2FkKSB0aGlzLmFsbE9wdGlvbnMucHJlbG9hZC5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgIHJldHVybiBhcHBlbmQobCk7XG4gICAgICB9KTtcbiAgICAgIHRvTG9hZC5mb3JFYWNoKGZ1bmN0aW9uIChsbmcpIHtcbiAgICAgICAgX3RoaXM1LmFsbE9wdGlvbnMubnMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHtcbiAgICAgICAgICBiYWNrZW5kQ29ubmVjdG9yLnJlYWQobG5nLCBucywgJ3JlYWQnLCBudWxsLCBudWxsLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSBsb2dnZXIud2FybihcImxvYWRpbmcgbmFtZXNwYWNlIFwiLmNvbmNhdChucywgXCIgZm9yIGxhbmd1YWdlIFwiKS5jb25jYXQobG5nLCBcIiBmYWlsZWRcIiksIGVycik7XG4gICAgICAgICAgICBpZiAoIWVyciAmJiBkYXRhKSBsb2dnZXIubG9nKFwibG9hZGVkIG5hbWVzcGFjZSBcIi5jb25jYXQobnMsIFwiIGZvciBsYW5ndWFnZSBcIikuY29uY2F0KGxuZyksIGRhdGEpO1xuICAgICAgICAgICAgYmFja2VuZENvbm5lY3Rvci5sb2FkZWQoXCJcIi5jb25jYXQobG5nLCBcInxcIikuY29uY2F0KG5zKSwgZXJyLCBkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFja2VuZDtcbn0oKTtcblxuQmFja2VuZC50eXBlID0gJ2JhY2tlbmQnO1xuZXhwb3J0IGRlZmF1bHQgQmFja2VuZDsiLCJpbXBvcnQgaTE4biBmcm9tICdpMThuZXh0J1xyXG5pbXBvcnQgeyBpbml0UmVhY3RJMThuZXh0IH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcclxuXHJcbmltcG9ydCBMYW5ndWFnZURldGVjdG9yIGZyb20gJ2kxOG5leHQtYnJvd3Nlci1sYW5ndWFnZWRldGVjdG9yJ1xyXG5pbXBvcnQgQmFja2VuZCBmcm9tICdpMThuZXh0LWh0dHAtYmFja2VuZCdcclxuXHJcbmkxOG5cclxuIFxyXG4gIC51c2UoQmFja2VuZClcclxuIFxyXG4gIC51c2UoTGFuZ3VhZ2VEZXRlY3RvcilcclxuICBcclxuICAudXNlKGluaXRSZWFjdEkxOG5leHQpXHJcbiBcclxuICAuaW5pdCh7XHJcbiAgICBmYWxsYmFja0xuZzogJ3J1JyxcclxuICAgIGRlYnVnOiBfX0lTX0RFVl9fLFxyXG5cclxuICAgIGludGVycG9sYXRpb246IHtcclxuICAgICAgZXNjYXBlVmFsdWU6IGZhbHNlLCBcclxuICAgIH1cclxuICB9KTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBpMThuOyIsImltcG9ydCBBcHAgZnJvbSBcImFwcC9BcHBcIjtcclxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XHJcbmltcG9ydCB7IEVycm9yQm91bmRhcnkgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9FcnJvckJvdW5kYXJ5XCI7XHJcbmltcG9ydCB7IFNpZGViYXJQcm92aWRlciB9IGZyb20gXCJhcHAvcHJvdmlkZXJzL1NpZGViYXJQcm92aWRlci91aS9TaWRlYmFyUHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gXCJhcHAvcHJvdmlkZXJzL1RoZW1lUHJvdmlkZXJcIjtcclxuaW1wb3J0IFwiYXBwL3N0eWxlcy9pbmRleC5zY3NzXCI7XHJcbmltcG9ydCBcImxlYWZsZXQvZGlzdC9sZWFmbGV0LmNzc1wiO1xyXG5cclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBcInNoYXJlZC9jb25maWcvaTE4bi9pMThuXCI7XHJcbmltcG9ydCB7IE1vZGFsUHJvdmlkZXIgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9Nb2RhbFByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IFN0b3JlUHJvdmlkZXIgfSBmcm9tIFwiYXBwL3Byb3ZpZGVycy9TdG9yZVByb3ZpZGVyXCI7XHJcblxyXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikgYXMgSFRNTEVsZW1lbnQpO1xyXG5cclxucm9vdC5yZW5kZXIoXHJcbiAgPEVycm9yQm91bmRhcnk+XHJcbiAgICA8QnJvd3NlclJvdXRlcj5cclxuICAgICAgPFN0b3JlUHJvdmlkZXI+XHJcbiAgICAgICAgPFRoZW1lUHJvdmlkZXI+XHJcbiAgICAgICAgICA8TW9kYWxQcm92aWRlcj5cclxuICAgICAgICAgICAgPFNpZGViYXJQcm92aWRlcj5cclxuICAgICAgICAgICAgICA8QXBwIC8+XHJcbiAgICAgICAgICAgIDwvU2lkZWJhclByb3ZpZGVyPlxyXG4gICAgICAgICAgPC9Nb2RhbFByb3ZpZGVyPlxyXG4gICAgICAgIDwvVGhlbWVQcm92aWRlcj5cclxuICAgICAgPC9TdG9yZVByb3ZpZGVyPlxyXG4gICAgPC9Ccm93c2VyUm91dGVyPlxyXG4gIDwvRXJyb3JCb3VuZGFyeT4sXHJcbik7XHJcbiIsImltcG9ydCB7IEZDLCBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuXHJcbmltcG9ydCB7IFN0YXRlU2NoZW1hIH0gZnJvbSBcIi4uL2NvbmZpZy9TdGF0ZVNjaGVtYVwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVJlZHV4U3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL3N0b3JlXCI7XHJcblxyXG5pbnRlcmZhY2UgU3RvcmVQcm92aWRlclByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG4gIGluaXRpYWxTdGF0ZT86IFN0YXRlU2NoZW1hO1xyXG59XHJcblxyXG5jb25zdCBTdG9yZVByb3ZpZGVyOiBGQzxTdG9yZVByb3ZpZGVyUHJvcHM+ID0gKHsgY2hpbGRyZW4sIGluaXRpYWxTdGF0ZSB9KSA9PiB7XHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlUmVkdXhTdG9yZShuYXZpZ2F0ZSwgaW5pdGlhbFN0YXRlKTtcclxuXHJcbiAgcmV0dXJuIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PntjaGlsZHJlbn08L1Byb3ZpZGVyPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0b3JlUHJvdmlkZXI7XHJcbiJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwibG9hZFN0eWxlc2hlZXQiLCJpbnN0YWxsZWRDc3NDaHVua3MiLCJNb2RhbENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiTW9kYWxQcm92aWRlciIsIl9hIiwiY2hpbGRyZW4iLCJfYiIsInVzZVN0YXRlIiwiaXNNb2RhbE9wZW4iLCJzZXRJc01vZGFsT3BlbiIsIl9jIiwibW9kYWxJZCIsInNldE1vZGFsSWQiLCJtZW1vaXplZFZhbHVlIiwidG9nZ2xlTW9kYWxIYW5kbGVyIiwidmFsdWUiLCJwcmV2Iiwic2V0SWQiLCJpZCIsImNsb3NlTW9kYWwiLCJfanN4IiwiUHJvdmlkZXIiLCJfRnJhZ21lbnQiLCJ1c2VNb2RhbCIsInVzZUNvbnRleHQiLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwia2luZE9mIiwiY2FjaGUiLCJjcmVhdGUiLCJ0aGluZyIsInN0ciIsImNhbGwiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwia2luZE9mVGVzdCIsInR5cGUiLCJ0eXBlT2ZUZXN0IiwiaXNBcnJheSIsIkFycmF5IiwiaXNVbmRlZmluZWQiLCJpc0FycmF5QnVmZmVyIiwiaXNTdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ2YWwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIml0ZXJhdG9yIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNSZWFkYWJsZVN0cmVhbSIsImlzUmVxdWVzdCIsImlzUmVzcG9uc2UiLCJpc0hlYWRlcnMiLCJtYXAiLCJmb3JFYWNoIiwib2JqIiwiYWxsT3duS2V5cyIsImkiLCJsIiwibGVuZ3RoIiwia2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW4iLCJrZXkiLCJmaW5kS2V5IiwiX2tleSIsIl9nbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJjb250ZXh0IiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJpc0hUTUxGb3JtIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wIiwiaXNSZWdFeHAiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsInJlZHVjZXIiLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwibmFtZSIsInJldCIsImRlZmluZVByb3BlcnRpZXMiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJBTFBIQV9ESUdJVCIsInRvVXBwZXJDYXNlIiwiaXNBc3luY0ZuIiwiX3NldEltbWVkaWF0ZSIsInNldEltbWVkaWF0ZVN1cHBvcnRlZCIsInNldEltbWVkaWF0ZSIsInBvc3RNZXNzYWdlU3VwcG9ydGVkIiwicG9zdE1lc3NhZ2UiLCJ0b2tlbiIsIk1hdGgiLCJyYW5kb20iLCJjYWxsYmFja3MiLCJhZGRFdmVudExpc3RlbmVyIiwic291cmNlIiwiZGF0YSIsInNoaWZ0IiwiY2IiLCJwdXNoIiwic2V0VGltZW91dCIsImFzYXAiLCJxdWV1ZU1pY3JvdGFzayIsInByb2Nlc3MiLCJuZXh0VGljayIsImlzQnVmZmVyIiwiY29uc3RydWN0b3IiLCJpc0Zvcm1EYXRhIiwia2luZCIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJyZXN1bHQiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzQm9vbGVhbiIsImlzU3RyZWFtIiwicGlwZSIsIm1lcmdlIiwiY2FzZWxlc3MiLCJ0aGlzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJleHRlbmQiLCJhIiwiYiIsInRyaW0iLCJyZXBsYWNlIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImluaGVyaXRzIiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwiZGVmaW5lUHJvcGVydHkiLCJhc3NpZ24iLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsImVuZHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJTdHJpbmciLCJ1bmRlZmluZWQiLCJsYXN0SW5kZXgiLCJpbmRleE9mIiwidG9BcnJheSIsImFyciIsImZvckVhY2hFbnRyeSIsIm5leHQiLCJkb25lIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJoYXNPd25Qcm9wIiwiZnJlZXplTWV0aG9kcyIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInNldCIsIkVycm9yIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVsaW1pdGVyIiwiZGVmaW5lIiwic3BsaXQiLCJ0b0NhbWVsQ2FzZSIsIm0iLCJwMSIsInAyIiwibm9vcCIsInRvRmluaXRlTnVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJnZW5lcmF0ZVN0cmluZyIsInNpemUiLCJhbHBoYWJldCIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJ0b0pTT05PYmplY3QiLCJzdGFjayIsInZpc2l0IiwidGFyZ2V0IiwicmVkdWNlZFZhbHVlIiwiaXNUaGVuYWJsZSIsInRoZW4iLCJjYXRjaCIsIkF4aW9zRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImNvbmZpZyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhdHVzIiwidXRpbHMiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImZyb20iLCJlcnJvciIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsImNhdXNlIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsInBhdGgiLCJkb3RzIiwiY29uY2F0Iiwiam9pbiIsInByZWRpY2F0ZXMiLCJ0ZXN0IiwiZm9ybURhdGEiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwibWV0YVRva2VucyIsImluZGV4ZXMiLCJvcHRpb24iLCJ2aXNpdG9yIiwiZGVmYXVsdFZpc2l0b3IiLCJ1c2VCbG9iIiwiQmxvYiIsImNvbnZlcnRWYWx1ZSIsInRvSVNPU3RyaW5nIiwiQnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInNvbWUiLCJpc0ZsYXRBcnJheSIsImVsIiwiaW5kZXgiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwicG9wIiwiZW5jb2RlIiwiY2hhck1hcCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1hdGNoIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJwYXJhbXMiLCJfcGFpcnMiLCJlbmNvZGVyIiwiX2VuY29kZSIsImJ1aWxkVVJMIiwidXJsIiwic2VyaWFsaXplRm4iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVkUGFyYW1zIiwiaGFzaG1hcmtJbmRleCIsImhhbmRsZXJzIiwidXNlIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzeW5jaHJvbm91cyIsInJ1bldoZW4iLCJlamVjdCIsImNsZWFyIiwiaCIsInNpbGVudEpTT05QYXJzaW5nIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNCcm93c2VyIiwiY2xhc3NlcyIsIlVSTFNlYXJjaFBhcmFtcyIsInByb3RvY29scyIsImhhc0Jyb3dzZXJFbnYiLCJkb2N1bWVudCIsIl9uYXZpZ2F0b3IiLCJuYXZpZ2F0b3IiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwib3JpZ2luIiwibG9jYXRpb24iLCJocmVmIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiaXNMYXN0IiwiYXJyYXlUb09iamVjdCIsImVudHJpZXMiLCJwYXJzZVByb3BQYXRoIiwiZGVmYXVsdHMiLCJ0cmFuc2l0aW9uYWwiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwic2V0Q29udGVudFR5cGUiLCJwbGF0Zm9ybSIsImhlbHBlcnMiLCJpc05vZGUiLCJ0b1VSTEVuY29kZWRGb3JtIiwiZm9ybVNlcmlhbGl6ZXIiLCJfRm9ybURhdGEiLCJlbnYiLCJyYXdWYWx1ZSIsInBhcnNlciIsInBhcnNlIiwiZSIsInN0cmluZ2lmeVNhZmVseSIsInRyYW5zZm9ybVJlc3BvbnNlIiwiSlNPTlJlcXVlc3RlZCIsInJlc3BvbnNlVHlwZSIsInN0cmljdEpTT05QYXJzaW5nIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwiaWdub3JlRHVwbGljYXRlT2YiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwibGluZSIsInN1YnN0cmluZyIsInBhcnNlSGVhZGVycyIsImdldCIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJoYXMiLCJtYXRjaGVyIiwiZGVsZXRlZCIsImRlbGV0ZUhlYWRlciIsIm5vcm1hbGl6ZSIsImZvcm1hdCIsIm5vcm1hbGl6ZWQiLCJ3IiwiY2hhciIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJmaXJzdCIsImNvbXB1dGVkIiwiYWNjZXNzb3IiLCJhY2Nlc3NvcnMiLCJkZWZpbmVBY2Nlc3NvciIsImFjY2Vzc29yTmFtZSIsIm1ldGhvZE5hbWUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJjb25maWd1cmFibGUiLCJidWlsZEFjY2Vzc29ycyIsIm1hcHBlZCIsImhlYWRlclZhbHVlIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzQ2FuY2VsIiwiX19DQU5DRUxfXyIsIkNhbmNlbGVkRXJyb3IiLCJzZXR0bGUiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmxvb3IiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImxpc3RlbmVyIiwiaXNEb3dubG9hZFN0cmVhbSIsImZyZXEiLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwibWluIiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImhlYWQiLCJ0YWlsIiwiY2h1bmtMZW5ndGgiLCJub3ciLCJEYXRlIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsInJvdW5kIiwibGFzdEFyZ3MiLCJ0aW1lciIsInRpbWVzdGFtcCIsInRocmVzaG9sZCIsImludm9rZSIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwiZXZlbnQiLCJwcm9ncmVzc0V2ZW50RGVjb3JhdG9yIiwidGhyb3R0bGVkIiwiYXN5bmNEZWNvcmF0b3IiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50Iiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsInJlcXVlc3RVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJidWlsZEZ1bGxQYXRoIiwiYmFzZVVSTCIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiY29tYmluZVVSTHMiLCJoZWFkZXJzVG9PYmplY3QiLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0TWVzc2FnZSIsIndpdGhDcmVkZW50aWFscyIsIndpdGhYU1JGVG9rZW4iLCJvblVwbG9hZFByb2dyZXNzIiwib25Eb3dubG9hZFByb2dyZXNzIiwiZGVjb21wcmVzcyIsImJlZm9yZVJlZGlyZWN0IiwidHJhbnNwb3J0IiwiaHR0cEFnZW50IiwiaHR0cHNBZ2VudCIsImNhbmNlbFRva2VuIiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJjb25maWdWYWx1ZSIsIm5ld0NvbmZpZyIsImF1dGgiLCJidG9hIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiQm9vbGVhbiIsImlzVVJMU2FtZU9yaWdpbiIsInhzcmZWYWx1ZSIsImNvb2tpZXMiLCJYTUxIdHRwUmVxdWVzdCIsIlByb21pc2UiLCJfY29uZmlnIiwicmVzb2x2ZUNvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJvbkNhbmNlbGVkIiwidXBsb2FkVGhyb3R0bGVkIiwiZG93bmxvYWRUaHJvdHRsZWQiLCJmbHVzaFVwbG9hZCIsImZsdXNoRG93bmxvYWQiLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJlcnIiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInNldFJlcXVlc3RIZWFkZXIiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsInNpZ25hbHMiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwicmVhc29uIiwic3RyZWFtQ2h1bmsiLCJjaHVuayIsImNodW5rU2l6ZSIsImJ5dGVMZW5ndGgiLCJlbmQiLCJwb3MiLCJ0cmFja1N0cmVhbSIsInN0cmVhbSIsIm9uUHJvZ3Jlc3MiLCJvbkZpbmlzaCIsImFzeW5jIiwiaXRlcmFibGUiLCJhc3luY0l0ZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZFN0cmVhbSIsInJlYWRCeXRlcyIsIl9vbkZpbmlzaCIsIlJlYWRhYmxlU3RyZWFtIiwicHVsbCIsImNsb3NlIiwibG9hZGVkQnl0ZXMiLCJlbnF1ZXVlIiwicmV0dXJuIiwiaGlnaFdhdGVyTWFyayIsImlzRmV0Y2hTdXBwb3J0ZWQiLCJmZXRjaCIsIlJlcXVlc3QiLCJSZXNwb25zZSIsImlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQiLCJlbmNvZGVUZXh0IiwiVGV4dEVuY29kZXIiLCJhcnJheUJ1ZmZlciIsInN1cHBvcnRzUmVxdWVzdFN0cmVhbSIsImR1cGxleEFjY2Vzc2VkIiwiaGFzQ29udGVudFR5cGUiLCJib2R5IiwiZHVwbGV4Iiwic3VwcG9ydHNSZXNwb25zZVN0cmVhbSIsInJlc29sdmVycyIsInJlcyIsIl8iLCJrbm93bkFkYXB0ZXJzIiwiaHR0cCIsInhociIsImZldGNoT3B0aW9ucyIsImNvbXBvc2VkU2lnbmFsIiwidG9BYm9ydFNpZ25hbCIsInJlcXVlc3RDb250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsIl9yZXF1ZXN0IiwiZ2V0Qm9keUxlbmd0aCIsInJlc29sdmVCb2R5TGVuZ3RoIiwiY29udGVudFR5cGVIZWFkZXIiLCJmbHVzaCIsImlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQiLCJjcmVkZW50aWFscyIsImlzU3RyZWFtUmVzcG9uc2UiLCJyZXNwb25zZUNvbnRlbnRMZW5ndGgiLCJyZXNwb25zZURhdGEiLCJyZW5kZXJSZWFzb24iLCJpc1Jlc29sdmVkSGFuZGxlIiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwicmVqZWN0ZWRSZWFzb25zIiwicmVhc29ucyIsInN0YXRlIiwicyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJjb25zb2xlIiwid2FybiIsImFzc2VydE9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJkdW1teSIsImJvb2xlYW4iLCJmdW5jdGlvbiIsImNvbnRleHRIZWFkZXJzIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJwcm9taXNlIiwiY2hhaW4iLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInNwbGljZSIsImMiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsIlZFUlNJT04iLCJ0b0Zvcm1EYXRhIiwiQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJjYWxsYmFjayIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJmb3JtVG9KU09OIiwiZ2V0QWRhcHRlciIsImRlZmF1bHQiLCIkYXBpIiwiQXV0aG9yaXphdGlvbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJVU0VSX0xPQ0FMU1RPUkFHRV9LRVkiLCJjcmVhdGVSZWR1eFN0b3JlIiwibmF2aWdhdGUiLCJpbml0aWFsU3RhdGUiLCJyZWR1Y2VycyIsImNvbWJpbmVkUmVkdWNlciIsImtleXNUb1JlbW92ZSIsInJvb3RSZWR1Y2VycyIsInVzZXIiLCJ1c2VyUmVkdWNlciIsImV4dHJhQXJnIiwiYXBpIiwicmVkdWNlck1hbmFnZXIiLCJfX2Fzc2lnbiIsImNvbWJpbmVSZWR1Y2VycyIsImdldFJlZHVjZXJNYXAiLCJyZWR1Y2UiLCJhY3Rpb24iLCJfaSIsImtleXNUb1JlbW92ZV8xIiwiYWRkIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsIm1pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsInRodW5rIiwiZXh0cmFBcmd1bWVudCIsImRldlRvb2xzIiwiX19JU19ERVZfXyIsInByZWxvYWRlZFN0YXRlIiwidXNlQXBwRGlzcGF0Y2giLCJ1c2VEaXNwYXRjaCIsImdldFVzZXJJZCIsImF1dGhEYXRhIiwiZ2V0VXNlckF1dGhvcml6ZWQiLCJhdXRob3JpemVkIiwidXNlclNsaWNlIiwiY3JlYXRlU2xpY2UiLCJsb2dpbiIsInNldEl0ZW0iLCJsb2dvdXQiLCJyZW1vdmVJdGVtIiwidXBkYXRlVXNlciIsInVzZXJBY3Rpb25zIiwiYWN0aW9ucyIsIkxvZ2luRm9ybUFzeW5jIiwibGF6eSIsImxvZ2luQnlVc2VyTmFtZSIsImNyZWF0ZUFzeW5jVGh1bmsiLCJsb2dpbkRhdGEiLCJ0aHVua0FQSSIsImV4dHJhIiwicG9zdCIsInNlbnQiLCJkaXNwYXRjaCIsInJlamVjdFdpdGhWYWx1ZSIsImVycm9yTWVzc2FnZSIsImVycl8xIiwibG9naW5Gb3JtU2xpY2UiLCJpc0xvYWRpbmciLCJzZXRVc2VybmFtZSIsInNldFBhc3N3b3JkIiwic2V0RXJyb3IiLCJleHRyYVJlZHVjZXJzIiwiYnVpbGRlciIsImFkZENhc2UiLCJsb2dpbkZvcm1SZWR1Y2VyIiwiY2xhc3NOYW1lcyIsImNscyIsIm1vZHMiLCJhZGRpdGlvbmFsIiwiX19zcHJlYWRBcnJheSIsIkJ1dHRvbiIsIm1lbW8iLCJvdGhlckNsYXNzZXMiLCJvbkNsaWNrIiwidmFyaWFudHMiLCJjbGFzc05hbWUiLCJmaW5kIiwiaXRlbSIsInNvbWVDbGFzc2VzIiwiX19yZXN0IiwiX2pzeHMiLCJUZXh0IiwidGFnIiwiVGFnIiwiY29sb3IiLCJfZCIsIndlaWdodCIsIl9lIiwiYWxpZ24iLCJ0ZXh0Q2xhc3NOYW1lcyIsIm1haW5DbGFzc2VzIiwidXBwZXJDYXNlIiwibm9DYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsImxvY2FsZSIsIm1lcmdlTnVtYmVycyIsIiQxIiwiTEFOR1VBR0VTIiwidHIiLCJyZWdleHAiLCJheiIsImx0IiwibGFuZyIsImxvd2VyQ2FzZSIsIk5PTl9XT1JEX1JFR0VYUCIsIkNBTUVMX0NBU0VfUkVHRVhQIiwiQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAiLCJyZXBsYWNlbWVudCIsIl9fc2VsZl9fIiwiRiIsIkRPTUV4Y2VwdGlvbiIsInN1cHBvcnQiLCJ2aWV3Q2xhc3NlcyIsIm5vcm1hbGl6ZU5hbWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiSGVhZGVycyIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJvbmxvYWQiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJ2aWV3IiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJfYm9keUZvcm1EYXRhIiwiRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwidGV4dCIsInJlYWRBc1RleHQiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImRlY29kZSIsImpzb24iLCJvbGRWYWx1ZSIsInZhbHVlcyIsIm1ldGhvZHMiLCJpbnB1dCIsInVwY2FzZWQiLCJtb2RlIiwicmVmZXJyZXIiLCJmb3JtIiwiYm9keUluaXQiLCJvayIsImNsb25lIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImluaXQiLCJhYm9ydFhociIsInBhcnRzIiwicG9seWZpbGwiLCJwb255ZmlsbCIsImN0eCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsIl9fZXNNb2R1bGUiLCJuZWVkUXVvdGVzIiwiY3NzTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZU1hcHBpbmciLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYmlnaW50IiwiYm9vbCIsImZ1bmMiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJjYSIsInAiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJ2IiwiZCIsImYiLCJnIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJ6IiwicmEiLCJzYSIsInRhIiwicGEiLCJpc05hTiIsInFhIiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsImZvciIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIkEiLCJNYSIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwiUGEiLCJyZW5kZXIiLCJRYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFiIiwicmIiLCJzYiIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJ0YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwibG9nIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkMiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJNYXAiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJyZXBlYXQiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIk5lIiwiY29udGVudEVkaXRhYmxlIiwiT2UiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJEIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwibiIsInQiLCJKIiwieCIsInUiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJrZSIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsIkdmIiwiSGYiLCJKZiIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkUiLCJHIiwiVmYiLCJIIiwiV2YiLCJYZiIsIllmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCJjaGlsZENvbnRleHRUeXBlcyIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZWZzIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiaW1wbGVtZW50YXRpb24iLCJTZyIsIlRnIiwicSIsInIiLCJ5IiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsIl9jdXJyZW50VmFsdWUiLCJiaCIsImNoaWxkTGFuZXMiLCJjaCIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImludGVybGVhdmVkIiwiaWgiLCJqaCIsImtoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwibGgiLCJtaCIsImV2ZW50VGltZSIsImxhbmUiLCJuaCIsIksiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwidGFnTmFtZSIsInpoIiwiQWgiLCJCaCIsIkwiLCJDaCIsInJldmVhbE9yZGVyIiwiRGgiLCJFaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiRmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiR2giLCJIaCIsIk0iLCJOIiwiTyIsIkloIiwiSmgiLCJLaCIsIkxoIiwiUCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIlVoIiwiVmgiLCJXaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImdldFNuYXBzaG90IiwiYmkiLCJjaSIsIlEiLCJkaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiZGVzdHJveSIsImRlcHMiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJSIiwiQmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiQ2kiLCJkZWZhdWx0UHJvcHMiLCJEaSIsIkVpIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkZpIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHaSIsImNvbnRleHRUeXBlIiwidXBkYXRlciIsIkhpIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiSWkiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIkppIiwiZGlnZXN0IiwiS2kiLCJMaSIsIk1pIiwiV2Vha01hcCIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJSaSIsImNvbXBvbmVudFN0YWNrIiwiU2kiLCJwaW5nQ2FjaGUiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJhaiIsImNvbXBhcmUiLCJiaiIsImNqIiwiZGoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJqaiIsImtqIiwicGVuZGluZ0NvbnRleHQiLCJsaiIsInpqIiwiQWoiLCJCaiIsIkNqIiwibWoiLCJuaiIsIm9qIiwiZmFsbGJhY2siLCJwaiIsInFqIiwic2oiLCJkYXRhc2V0IiwiZGdzdCIsInRqIiwidWoiLCJfcmVhY3RSZXRyeSIsInJqIiwic3VidHJlZUZsYWdzIiwidmoiLCJ3aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWxNb2RlIiwieGoiLCJEaiIsIlMiLCJFaiIsIkZqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlUiLCJLaiIsIldlYWtTZXQiLCJWIiwiTGoiLCJXIiwiTWoiLCJOaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIldqIiwiWCIsIlhqIiwiWWoiLCJaaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiaXNIaWRkZW4iLCJmayIsImdrIiwiZGlzcGxheSIsImhrIiwiaWsiLCJqayIsImtrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJWayIsImxrIiwiY2VpbCIsIm1rIiwibmsiLCJZIiwiWiIsInBrIiwicWsiLCJyayIsInNrIiwidGsiLCJJbmZpbml0eSIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJFayIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJQayIsInRpbWVvdXRIYW5kbGUiLCJRayIsIlJrIiwiU2siLCJUayIsIlVrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiT2oiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiV2siLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJYayIsIllrIiwiJGsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYWwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiYmwiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJmbCIsImdsIiwiaGwiLCJpbCIsInlqIiwiWmsiLCJrbCIsInJlcG9ydEVycm9yIiwibGwiLCJfaW50ZXJuYWxSb290IiwibWwiLCJubCIsIm9sIiwicGwiLCJybCIsInFsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsInNsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidGwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidWwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwidmwiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsInN5bSIsIl9vYmplY3RTcHJlYWQiLCJpMThuSW5zdGFuY2UiLCJkZWZhdWx0T3B0aW9ucyIsImJpbmRJMThuIiwiYmluZEkxOG5TdG9yZSIsInRyYW5zRW1wdHlOb2RlVmFsdWUiLCJ0cmFuc1N1cHBvcnRCYXNpY0h0bWxOb2RlcyIsInRyYW5zV3JhcFRleHROb2RlcyIsInRyYW5zS2VlcEJhc2ljSHRtbE5vZGVzRm9yIiwidXNlU3VzcGVuc2UiLCJJMThuQ29udGV4dCIsImdldERlZmF1bHRzIiwiUmVwb3J0TmFtZXNwYWNlcyIsInVzZWROYW1lc3BhY2VzIiwibmFtZXNwYWNlcyIsIl90aGlzIiwibnMiLCJnZXRJMThuIiwiaW5pdFJlYWN0STE4bmV4dCIsInNldERlZmF1bHRzIiwicmVhY3QiLCJzZXRJMThuIiwiX2NvbnNvbGUiLCJfbGVuIiwiYWxyZWFkeVdhcm5lZCIsIndhcm5PbmNlIiwiX2xlbjIiLCJfa2V5MiIsImxvYWROYW1lc3BhY2VzIiwiaTE4biIsImlzSW5pdGlhbGl6ZWQiLCJvbiIsImluaXRpYWxpemVkIiwib2ZmIiwidXNlVHJhbnNsYXRpb24iLCJpMThuRnJvbVByb3BzIiwiX3JlZiIsImkxOG5Gcm9tQ29udGV4dCIsImRlZmF1bHROU0Zyb21Db250ZXh0IiwiZGVmYXVsdE5TIiwicmVwb3J0TmFtZXNwYWNlcyIsIm5vdFJlYWR5VCIsInJldE5vdFJlYWR5IiwicmVhZHkiLCJ3YWl0IiwiaTE4bk9wdGlvbnMiLCJrZXlQcmVmaXgiLCJhZGRVc2VkTmFtZXNwYWNlcyIsImluaXRpYWxpemVkU3RvcmVPbmNlIiwiZXZlcnkiLCJsYW5ndWFnZXMiLCJsbmciLCJmYWxsYmFja0xuZyIsImxhc3RMbmciLCJsb2FkTm90UGVuZGluZyIsImxvYWRTdGF0ZSIsInNlcnZpY2VzIiwiYmFja2VuZENvbm5lY3RvciIsImJhY2tlbmQiLCJpc0xhbmd1YWdlQ2hhbmdpbmdUbyIsImhhc1Jlc291cmNlQnVuZGxlIiwiaGFzTG9hZGVkTmFtZXNwYWNlIiwiZ2V0VCIsImdldEZpeGVkVCIsIm5zTW9kZSIsIl91c2VTdGF0ZTIiLCJhcnJheVdpdGhIb2xlcyIsIm8iLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlUmVzdCIsInNldFQiLCJib3VuZFJlc2V0IiwiaXNJbml0aWFsIiwid2l0aEJhc2VJY29uIiwiSWNvbiIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcHJvcFR5cGVzIiwiX1N2Z0ljb24iLCJfZXh0ZW5kcyIsIl9kZWZpbmVQcm9wZXJ0eSIsImljb24iLCJvdGhlcnMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInRpdGxlIiwicHJvcHNUb1VzZSIsImZpbGwiLCJwcm9wVHlwZXMiLCJfZGVmYXVsdCIsIlN2Z0ljb24iLCJuZXdPYmoiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9jYW1lbENhc2UiLCJub3ROdWxsT3JVbmRlZiIsIndhbGtDaGlsZHJlbiIsImlkeCIsImF0dHJpYnNNYXAiLCJhdHRyaWJzIiwiX2NoaWxkJGNoaWxkcmVuIiwiZ2NoaWxkcmVuIiwicGFydGlhbCIsIl9uZXh0JHNwbGl0MiIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfbiIsIl9zIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsImV4cGFuZFN0eWxlIiwic3Ryb2tlIiwiX3Byb3BzJGljb24iLCJ2aWV3Qm94IiwiX3Byb3BzJGljb24kYXR0cmlicyIsInN2Z0F0dHJpYnMiLCJjYW1lbENhc2VkQXR0cmlicyIsInZlcnRpY2FsQWxpZ24iLCJob3Jpem9udGFsQ2VudGVyIiwiQ29tcG9uZW50IiwiX3JlZiRyQWxpZ24iLCJyQWxpZ24iLCJfcmVmJHNwYWNlIiwic3BhY2UiLCJqdXN0aWZ5Q29udGVudCIsIkNoaWxkcmVuIiwic3BhY2VyRmllbGQiLCJfSWNvbiIsIl9fc2VsZiIsIl9fc291cmNlIiwiRnJhZ21lbnQiLCJqc3giLCJqc3hzIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiY291bnQiLCJvbmx5IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiYWN0IiwiY2xvbmVFbGVtZW50IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJkb21BUEkiLCJ1cGRhdGUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50IiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciIsImhhc1ZhbHVlIiwiZmV0Y2hBcGkiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydGllcyIsIl9jcmVhdGVDbGFzcyIsInRvUHJvcGVydHlLZXkiLCJ0b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJfYXJyYXlMaWtlVG9BcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIk5PVEhJTkciLCJEUkFGVEFCTEUiLCJEUkFGVF9TVEFURSIsImRpZSIsImlzRHJhZnQiLCJpc0RyYWZ0YWJsZSIsImlzTWFwIiwiaXNTZXQiLCJvYmplY3RDdG9yU3RyaW5nIiwicHJvdG8iLCJDdG9yIiwiRnVuY3Rpb24iLCJlYWNoIiwiaXRlciIsImdldEFyY2h0eXBlIiwiZW50cnkiLCJ0eXBlXyIsInByb3BPck9sZFZhbHVlIiwibGF0ZXN0IiwiY29weV8iLCJiYXNlXyIsInNoYWxsb3dDb3B5Iiwic3RyaWN0IiwiaXNQbGFpbiIsImZyZWV6ZSIsImRlZXAiLCJpc0Zyb3plbiIsImRvbnRNdXRhdGVGcm96ZW5Db2xsZWN0aW9ucyIsImN1cnJlbnRTY29wZSIsInBsdWdpbnMiLCJnZXRQbHVnaW4iLCJwbHVnaW5LZXkiLCJwbHVnaW4iLCJnZXRDdXJyZW50U2NvcGUiLCJ1c2VQYXRjaGVzSW5TY29wZSIsInNjb3BlIiwicGF0Y2hMaXN0ZW5lciIsInBhdGNoZXNfIiwiaW52ZXJzZVBhdGNoZXNfIiwicGF0Y2hMaXN0ZW5lcl8iLCJyZXZva2VTY29wZSIsImxlYXZlU2NvcGUiLCJkcmFmdHNfIiwicmV2b2tlRHJhZnQiLCJwYXJlbnRfIiwiZW50ZXJTY29wZSIsImltbWVyMiIsImltbWVyXyIsImNhbkF1dG9GcmVlemVfIiwidW5maW5hbGl6ZWREcmFmdHNfIiwiZHJhZnQiLCJyZXZva2VfIiwicmV2b2tlZF8iLCJwcm9jZXNzUmVzdWx0IiwiYmFzZURyYWZ0IiwibW9kaWZpZWRfIiwiZmluYWxpemUiLCJtYXliZUZyZWV6ZSIsImdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyIsInJvb3RTY29wZSIsImNoaWxkVmFsdWUiLCJmaW5hbGl6ZVByb3BlcnR5Iiwic2NvcGVfIiwiZmluYWxpemVkXyIsInJlc3VsdEVhY2giLCJpc1NldDIiLCJnZW5lcmF0ZVBhdGNoZXNfIiwicGFyZW50U3RhdGUiLCJ0YXJnZXRPYmplY3QiLCJyb290UGF0aCIsInRhcmdldElzU2V0IiwiYXNzaWduZWRfIiwiYXV0b0ZyZWV6ZV8iLCJvYmplY3RUcmFwcyIsImdldERlc2NyaXB0b3JGcm9tUHJvdG8iLCJkcmFmdF8iLCJyZWFkUHJvcEZyb21Qcm90byIsInBlZWsiLCJwcmVwYXJlQ29weSIsImNyZWF0ZVByb3h5IiwiY3VycmVudDIiLCJjdXJyZW50U3RhdGUiLCJtYXJrQ2hhbmdlZCIsImRlbGV0ZVByb3BlcnR5Iiwib3duZXIiLCJzZXRQcm90b3R5cGVPZiIsImFycmF5VHJhcHMiLCJ1c2VTdHJpY3RTaGFsbG93Q29weV8iLCJwYXJlbnQiLCJwcm94eU1hcF8iLCJwcm94eVNldF8iLCJpc01hbnVhbF8iLCJ0cmFwcyIsInJldm9rZSIsInByb3h5IiwiUHJveHkiLCJyZXZvY2FibGUiLCJjcmVhdGVQcm94eVByb3h5IiwiY3VycmVudEltcGwiLCJjb3B5IiwiaW1tZXIiLCJwcm9kdWNlIiwicmVjaXBlIiwiZGVmYXVsdEJhc2UiLCJiYXNlMiIsImhhc0Vycm9yIiwiaXAiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJwYXRjaGVzIiwiaW52ZXJzZVBhdGNoZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsInVzZVN0cmljdFNoYWxsb3dDb3B5Iiwic2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkiLCJjcmVhdGVEcmFmdCIsImZpbmlzaERyYWZ0IiwiYXBwbHlQYXRjaGVzIiwicGF0Y2giLCJvcCIsImFwcGx5UGF0Y2hlc0ltcGwiLCJhcHBseVBhdGNoZXNfIiwiZW5zdXJlSXNBcnJheSIsIlJlZiIsIldlYWtSZWYiLCJkZXJlZiIsIlVOVEVSTUlOQVRFRCIsIlRFUk1JTkFURUQiLCJjcmVhdGVDYWNoZU5vZGUiLCJ3ZWFrTWFwTWVtb2l6ZSIsImZuTm9kZSIsInJlc3VsdEVxdWFsaXR5Q2hlY2siLCJsYXN0UmVzdWx0IiwicmVzdWx0c0NvdW50IiwibWVtb2l6ZWQiLCJjYWNoZU5vZGUiLCJhcmciLCJvYmplY3RDYWNoZSIsIm9iamVjdE5vZGUiLCJwcmltaXRpdmVDYWNoZSIsInByaW1pdGl2ZU5vZGUiLCJ0ZXJtaW5hdGVkTm9kZSIsImxhc3RSZXN1bHRWYWx1ZSIsImNsZWFyQ2FjaGUiLCJyZXNldFJlc3VsdHNDb3VudCIsImNyZWF0ZVNlbGVjdG9yQ3JlYXRvciIsIm1lbW9pemVPck9wdGlvbnMiLCJtZW1vaXplT3B0aW9uc0Zyb21BcmdzIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yT3B0aW9ucyIsIm1lbW9pemUiLCJtZW1vaXplT3B0aW9ucyIsImNyZWF0ZVNlbGVjdG9yMiIsImNyZWF0ZVNlbGVjdG9yQXJncyIsInJlY29tcHV0YXRpb25zIiwiZGVwZW5kZW5jeVJlY29tcHV0YXRpb25zIiwiZGlyZWN0bHlQYXNzZWRPcHRpb25zIiwicmVzdWx0RnVuYyIsImFzc2VydElzRnVuY3Rpb24iLCJjb21iaW5lZE9wdGlvbnMiLCJhcmdzTWVtb2l6ZSIsImFyZ3NNZW1vaXplT3B0aW9ucyIsImRldk1vZGVDaGVja3MiLCJmaW5hbE1lbW9pemVPcHRpb25zIiwiZmluYWxBcmdzTWVtb2l6ZU9wdGlvbnMiLCJpdGVtVHlwZXMiLCJhc3NlcnRJc0FycmF5T2ZGdW5jdGlvbnMiLCJnZXREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFJlc3VsdEZ1bmMiLCJzZWxlY3RvciIsImlucHV0U2VsZWN0b3JSZXN1bHRzIiwiaW5wdXRTZWxlY3RvckFyZ3MiLCJjb2xsZWN0SW5wdXRTZWxlY3RvclJlc3VsdHMiLCJyZXNldERlcGVuZGVuY3lSZWNvbXB1dGF0aW9ucyIsInJlc2V0UmVjb21wdXRhdGlvbnMiLCJ3aXRoVHlwZXMiLCJjcmVhdGVTZWxlY3RvciIsImNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciIsImlucHV0U2VsZWN0b3JzT2JqZWN0Iiwic2VsZWN0b3JDcmVhdG9yIiwiYXNzZXJ0SXNPYmplY3QiLCJpbnB1dFNlbGVjdG9yS2V5cyIsImNvbXBvc2l0aW9uIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZ2V0U3RhdGUiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJoYXNNYXRjaEZ1bmN0aW9uIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiVHVwbGUiLCJfVHVwbGUiLCJzdXBlciIsInNwZWNpZXMiLCJwcmVwZW5kIiwiZnJlZXplRHJhZnRhYmxlIiwiZW1wbGFjZSIsImhhbmRsZXIiLCJpbnNlcnRlZCIsImJ1aWxkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJpbW11dGFibGVDaGVjayIsInNlcmlhbGl6YWJsZUNoZWNrIiwiYWN0aW9uQ3JlYXRvckNoZWNrIiwibWlkZGxld2FyZUFycmF5IiwiY3JlYXRlUXVldWVXaXRoVGltZXIiLCJub3RpZnkiLCJyQUYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJidWlsZEdldERlZmF1bHRFbmhhbmNlcnMiLCJtaWRkbGV3YXJlRW5oYW5jZXIiLCJhdXRvQmF0Y2giLCJlbmhhbmNlckFycmF5Iiwibm90aWZ5aW5nIiwic2hvdWxkTm90aWZ5QXRFbmRPZlRpY2siLCJub3RpZmljYXRpb25RdWV1ZWQiLCJxdWV1ZUNhbGxiYWNrIiwicXVldWVOb3RpZmljYXRpb24iLCJub3RpZnlMaXN0ZW5lcnMiLCJsaXN0ZW5lcjIiLCJhdXRvQmF0Y2hFbmhhbmNlciIsImVuaGFuY2VycyIsInJvb3RSZWR1Y2VyIiwiZmluYWxNaWRkbGV3YXJlIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJnZXREZWZhdWx0RW5oYW5jZXJzIiwiY29tcG9zZWRFbmhhbmNlciIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiYnVpbGRlckNhbGxiYWNrIiwiYWN0aW9uc01hcCIsImFjdGlvbk1hdGNoZXJzIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImFkZE1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImlzQW55T2YiLCJtYXRjaGVycyIsImNvbW1vblByb3BlcnRpZXMiLCJSZWplY3RXaXRoVmFsdWUiLCJfdHlwZSIsIkZ1bGZpbGxXaXRoTWV0YSIsIm1pbmlTZXJpYWxpemVFcnJvciIsInNpbXBsZUVycm9yIiwicHJvcGVydHkiLCJjcmVhdGVBc3luY1RodW5rMiIsInR5cGVQcmVmaXgiLCJwYXlsb2FkQ3JlYXRvciIsInJlcXVlc3RJZCIsInJlcXVlc3RTdGF0dXMiLCJzZXJpYWxpemVFcnJvciIsInJlamVjdGVkV2l0aFZhbHVlIiwiY29uZGl0aW9uIiwiaWRHZW5lcmF0b3IiLCJuYW5vaWQiLCJhYm9ydENvbnRyb2xsZXIiLCJhYm9ydEhhbmRsZXIiLCJhYm9ydFJlYXNvbiIsImZpbmFsQWN0aW9uIiwiY29uZGl0aW9uUmVzdWx0IiwiYWJvcnRlZFByb21pc2UiLCJnZXRQZW5kaW5nTWV0YSIsInJhY2UiLCJmdWxmaWxsV2l0aFZhbHVlIiwiZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24iLCJ1bndyYXAiLCJ1bndyYXBSZXN1bHQiLCJzZXR0bGVkIiwiYXN5bmNUaHVua1N5bWJvbCIsImdldFR5cGUiLCJhY3Rpb25LZXkiLCJidWlsZENyZWF0ZVNsaWNlIiwiY3JlYXRvcnMiLCJjQVQiLCJhc3luY1RodW5rIiwicmVkdWNlclBhdGgiLCJfcmVkdWNlckRlZmluaXRpb25UeXBlIiwiY2FzZVJlZHVjZXIiLCJwcmVwYXJlZFJlZHVjZXIiLCJwcmVwYXJlIiwiYnVpbGRSZWR1Y2VyQ3JlYXRvcnMiLCJyZWR1Y2VyTmFtZXMiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSIsInNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlIiwiYWN0aW9uQ3JlYXRvcnMiLCJzbGljZU1hdGNoZXJzIiwiY29udGV4dE1ldGhvZHMiLCJyZWR1Y2VyMiIsImV4cG9zZUFjdGlvbiIsIm5hbWUyIiwiZXhwb3NlQ2FzZVJlZHVjZXIiLCJidWlsZFJlZHVjZXIiLCJmaW5hbENhc2VSZWR1Y2VycyIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZmluYWxBY3Rpb25NYXRjaGVycyIsImZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyIiwic00iLCJmcm96ZW5Jbml0aWFsU3RhdGUiLCJjYXNlUmVkdWNlcnMiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjcmVhdGVSZWR1Y2VyIiwicmVkdWNlck5hbWUiLCJyZWR1Y2VyRGVmaW5pdGlvbiIsInJlZHVjZXJEZXRhaWxzIiwiY3JlYXRlTm90YXRpb24iLCJpc0FzeW5jVGh1bmtTbGljZVJlZHVjZXJEZWZpbml0aW9uIiwibWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUiLCJwcmVwYXJlQ2FsbGJhY2siLCJpc0Nhc2VSZWR1Y2VyV2l0aFByZXBhcmVEZWZpbml0aW9uIiwiaGFuZGxlTm9ybWFsUmVkdWNlckRlZmluaXRpb24iLCJoYW5kbGVUaHVua0Nhc2VSZWR1Y2VyRGVmaW5pdGlvbiIsInNlbGVjdFNlbGYiLCJpbmplY3RlZFNlbGVjdG9yQ2FjaGUiLCJfcmVkdWNlciIsIm1ha2VTZWxlY3RvclByb3BzIiwicmVkdWNlclBhdGgyIiwiaW5qZWN0ZWQiLCJzZWxlY3RTbGljZSIsInNsaWNlU3RhdGUiLCJnZXRTZWxlY3RvcnMiLCJzZWxlY3RTdGF0ZSIsInNlbGVjdG9yQ2FjaGUiLCJzZWxlY3RvcnMiLCJ3cmFwU2VsZWN0b3IiLCJpbmplY3RJbnRvIiwiaW5qZWN0YWJsZSIsInBhdGhPcHQiLCJuZXdSZWR1Y2VyUGF0aCIsIndyYXBwZXIiLCJyb290U3RhdGUiLCJ1bndyYXBwZWQiLCJSZWFjdCIsIkNvbnRleHRLZXkiLCJnVCIsImdldENvbnRleHQiLCJjb250ZXh0TWFwIiwicmVhbENvbnRleHQiLCJSZWFjdFJlZHV4Q29udGV4dCIsImNyZWF0ZVJlZHV4Q29udGV4dEhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJyZWZFcXVhbGl0eSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVJlZHV4Q29udGV4dDIiLCJ1c2VTZWxlY3RvcjIiLCJlcXVhbGl0eUZuT3JPcHRpb25zIiwiZXF1YWxpdHlGbiIsInN1YnNjcmlwdGlvbiIsImdldFNlcnZlclN0YXRlIiwic3RhYmlsaXR5Q2hlY2siLCJpZGVudGl0eUZ1bmN0aW9uQ2hlY2siLCJ3cmFwcGVkU2VsZWN0b3IiLCJzZWxlY3RlZFN0YXRlIiwiYWRkTmVzdGVkU3ViIiwidXNlU2VsZWN0b3IiLCJudWxsTGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiaXNSZWFjdE5hdGl2ZSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJQcm92aWRlcl9kZWZhdWx0Iiwic2VydmVyU3RhdGUiLCJjb250ZXh0VmFsdWUiLCJwYXJlbnRTdWIiLCJzdWJzY3JpcHRpb25zQW1vdW50Iiwic2VsZlN1YnNjcmliZWQiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwib25TdGF0ZUNoYW5nZSIsInRyeVN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsInRyeVVuc3Vic2NyaWJlIiwiY2xlYW51cExpc3RlbmVyIiwicmVtb3ZlZCIsIm5vdGlmeU5lc3RlZFN1YnMiLCJnZXRMaXN0ZW5lcnMiLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJDb250ZXh0IiwiY3JlYXRlU3RvcmVIb29rIiwidXNlU3RvcmUyIiwidXNlU3RvcmUiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VEaXNwYXRjaDIiLCJzeW1ib2xfb2JzZXJ2YWJsZV9kZWZhdWx0Iiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsImFjdGlvblR5cGVzX2RlZmF1bHQiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiY3JlYXRlU3RvcmUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJsaXN0ZW5lcklkQ291bnRlciIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwibGlzdGVuZXJJZCIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwib2JzZXJ2ZXJBc09ic2VydmVyIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwiZmluYWxSZWR1Y2VyS2V5cyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbXBvc2UiLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiY3JlYXRlU3RvcmUyIiwibWlkZGxld2FyZUFQSSIsImlzQWN0aW9uIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImRlZiIsImRlZmluaXRpb24iLCJjaHVua0lkIiwibWluaUNzc0YiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwiY2hhcnNldCIsIm5jIiwib25TY3JpcHRDb21wbGV0ZSIsImRvbmVGbnMiLCJzY3JpcHRVcmwiLCJjdXJyZW50U2NyaXB0IiwiZnVsbGhyZWYiLCJleGlzdGluZ0xpbmtUYWdzIiwiZGF0YUhyZWYiLCJyZWwiLCJleGlzdGluZ1N0eWxlVGFncyIsImZpbmRTdHlsZXNoZWV0IiwibGlua1RhZyIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiY3JlYXRlU3R5bGVzaGVldCIsIm1pbmlDc3MiLCJiYXNlVVJJIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaiIsImluc3RhbGxlZENodW5rRGF0YSIsInJlYWxTcmMiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJUaGVtZUNvbnRleHQiLCJMT0NBTF9TVE9SQUdFX1RIRU1FX0tFWSIsInVzZVRoZW1lIiwic3R5bGVQcm9wcyIsImNhbkNsb3NlIiwic2V0Q2FuQ2xvc2UiLCJvblByZXNzRXNjYXBlSGFuZGxlciIsIlBvcnRhbCIsInRvZ2dsZU1vZGFsIiwiQWN0aW9uIiwiQmVmb3JlVW5sb2FkRXZlbnRUeXBlIiwicHJvbXB0QmVmb3JlVW5sb2FkIiwiY3JlYXRlRXZlbnRzIiwiY3JlYXRlUGF0aCIsIl9yZWYkcGF0aG5hbWUiLCJfcmVmJHNlYXJjaCIsIl9yZWYkaGFzaCIsInBhcnNlUGF0aCIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzdWJzdHIiLCJzZWFyY2hJbmRleCIsImludmFyaWFudCIsImNvbmQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIk91dGxldCIsIk91dGxldENvbnRleHQiLCJ1c2VPdXRsZXQiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWYzIiwiYmFzZW5hbWUiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJuYXZpZ2F0aW9uVHlwZSIsIlBvcCIsInN0YXRpYyIsInN0YXRpY1Byb3AiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJub3JtYWxpemVQYXRobmFtZSIsIm5hdmlnYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsInN0cmlwQmFzZW5hbWUiLCJSb3V0ZXMiLCJfcmVmNCIsInJvdXRlcyIsImxvY2F0aW9uQXJnIiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJwYXRobmFtZUJhc2UiLCJyb3V0ZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInN0YXJ0c1dpdGgiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzb3J0Iiwic2NvcmUiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwibWF0Y2hSb3V0ZXMiLCJyZWR1Y2VSaWdodCIsIl9yZW5kZXJNYXRjaGVzIiwiam9pblBhdGhzIiwidXNlUm91dGVzIiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwibG9jYXRpb25QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVzSnNvbiIsImFjdGl2ZVJlZiIsInRvIiwiZ28iLCJyZXNvbHZlVG8iLCJ1c2VSZXNvbHZlZFBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwicmVsYXRpdmVQYXRoIiwiY29tcHV0ZVNjb3JlIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJzZWdtZW50cyIsImluaXRpYWxTY29yZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXR0ZXJuIiwicGFyYW1OYW1lcyIsInJlZ2V4cFNvdXJjZSIsInBhcmFtTmFtZSIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJuZXh0Q2hhciIsInBhdGhzIiwiSGVhZGVyIiwidXNlTmF2aWdhdGUiLCJUb2dnbGVNb2RhbEJ1dHRvbiIsIlNpZGViYXJDb250ZXh0IiwidXNlU2lkZWJhciIsIkxhbmdTd2l0Y2hlciIsImNoYW5nZUxhbmd1YWdlIiwibGFuZ3VhZ2UiLCJfZyIsIl9kZWZzIiwieG1sbnMiLCJjbGlwUGF0aCIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJUaGVtZVN3aXRjaGVyIiwidG9nZ2xlVGhlbWUiLCJpc0RhcmsiLCJEYXJrSWNvbiIsIkxpZ2h0SWNvbiIsIlNpZGViYXJTd2l0Y2hlciIsImlzU2lkZWJhck9wZW4iLCJvcGVuU2lkZWJhckhhbmRsZXIiLCJjaXJjbGVMZWZ0IiwiY2lyY2xlUmlnaHQiLCJBYm91dFBhZ2VBc3luYyIsIk1haW5QYWdlQXN5bmMiLCJNZXNzYWdlc1BhZ2VBc3luYyIsIk5vdEZvdW5kUGFnZUFzeW5jIiwiUHJvZmlsZVBhZ2VBc3luYyIsIlJvdXRlUGF0aHMiLCJSb3V0ZXJDb25maWciLCJNYWluUGFnZSIsImhvbWUiLCJQcm9maWxlUGFnZSIsImZvckF1dGhVc2VyIiwiQWJvdXRQYWdlIiwiaW5mbyIsIk1lc3NhZ2VzUGFnZSIsImJ1YmJsZXMyIiwiTm90Rm91bmRQYWdlIiwid2FybmluZyIsIkxvYWRlciIsIlJvdXRlc0ZvckF1dGhVc2VyIiwiUGFnZUxvYWRlciIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJMaW5rIiwicmVsb2FkRG9jdW1lbnQiLCJyZXN0Iiwiam9pbmVkUGF0aG5hbWUiLCJnZXRUb1BhdGhuYW1lIiwiZW5kc1dpdGhTbGFzaCIsImNyZWF0ZUhyZWYiLCJ1c2VIcmVmIiwiaW50ZXJuYWxPbkNsaWNrIiwiX3RlbXAiLCJyZXBsYWNlUHJvcCIsImlzTW9kaWZpZWRFdmVudCIsInVzZUxpbmtDbGlja0hhbmRsZXIiLCJOYXZMaW5rIiwiX3JlZjUiLCJhcmlhQ3VycmVudFByb3AiLCJjbGFzc05hbWVQcm9wIiwic3R5bGVQcm9wIiwiaXNBY3RpdmUiLCJhcmlhQ3VycmVudCIsIkN1c3RvbUxpbmsiLCJOYXZiYXIiLCJzaG9ydCIsInVzZUxvY2F0aW9uIiwicHJldlBhdGgiLCJTaWRlYmFyIiwiTW9kYWxzIiwiTW9kYWwiLCJMb2dpbkZvcm0iLCJ0aGVtZSIsImNsYXNzTGlzdCIsImFkZFRoZW1lT25Cb2R5IiwiRmxleENvbnRhaW5lciIsImZsZXhEaXJlY3Rpb24iLCJDb250ZW50IiwiQXBwUm91dGVyIiwicmVsb2FkIiwiX3N1cGVyIiwiRXJyb3JCb3VuZGFyeSIsIl9fZXh0ZW5kcyIsIlBhZ2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwiY29uc29sZUxvZ2dlciIsIm91dHB1dCIsIkxvZ2dlciIsImNvbmNyZXRlTG9nZ2VyIiwicHJlZml4IiwibG9nZ2VyIiwiZGVidWciLCJmb3J3YXJkIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJsdmwiLCJkZWJ1Z09ubHkiLCJtb2R1bGVOYW1lIiwiYmFzZUxvZ2dlciIsIkV2ZW50RW1pdHRlciIsIm9ic2VydmVycyIsImV2ZW50cyIsImRlZmVyIiwicmVqIiwibWFrZVN0cmluZyIsImdldExhc3RPZlBhdGgiLCJFbXB0eSIsImNsZWFuS2V5IiwiY2FuTm90VHJhdmVyc2VEZWVwZXIiLCJzZXRQYXRoIiwibmV3VmFsdWUiLCJfZ2V0TGFzdE9mUGF0aCIsImdldFBhdGgiLCJfZ2V0TGFzdE9mUGF0aDMiLCJnZXRQYXRoV2l0aERlZmF1bHRzIiwiZGVmYXVsdERhdGEiLCJkZWVwRXh0ZW5kIiwib3ZlcndyaXRlIiwicmVnZXhFc2NhcGUiLCJfZW50aXR5TWFwIiwiaXNJRTEwIiwib3duS2V5cyQxIiwiX29iamVjdFNwcmVhZCQxIiwiZGVlcEZpbmQiLCJrZXlTZXBhcmF0b3IiLCJtaXgiLCJqb2luZWRQYXRoIiwiUmVzb3VyY2VTdG9yZSIsIl9FdmVudEVtaXR0ZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsInNoYW0iLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJpZ25vcmVKU09OU3RydWN0dXJlIiwic2lsZW50IiwiYWRkTmFtZXNwYWNlcyIsImVtaXQiLCJyZXNvdXJjZXMiLCJhZGRSZXNvdXJjZSIsInBhY2siLCJyZW1vdmVOYW1lc3BhY2VzIiwiZ2V0UmVzb3VyY2UiLCJjb21wYXRpYmlsaXR5QVBJIiwiZ2V0RGF0YUJ5TGFuZ3VhZ2UiLCJwb3N0UHJvY2Vzc29yIiwicHJvY2Vzc29ycyIsImFkZFBvc3RQcm9jZXNzb3IiLCJoYW5kbGUiLCJ0cmFuc2xhdG9yIiwicHJvY2Vzc29yIiwib3duS2V5cyQyIiwiX29iamVjdFNwcmVhZCQyIiwiY2hlY2tlZExvYWRlZEZvciIsIlRyYW5zbGF0b3IiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0JDEiLCJpbnRlcnBvbGF0aW9uIiwicmVzb2x2ZWQiLCJuc1NlcGFyYXRvciIsIndvdWxkQ2hlY2tGb3JOc0luS2V5Iiwic2VlbXNOYXR1cmFsTGFuZ3VhZ2UiLCJ1c2VyRGVmaW5lZEtleVNlcGFyYXRvciIsInVzZXJEZWZpbmVkTnNTZXBhcmF0b3IiLCJwb3NzaWJsZUNoYXJzIiwibWF0Y2hlZCIsImxvb2tzTGlrZU9iamVjdFBhdGgiLCJpbnRlcnBvbGF0b3IiLCJuZXN0aW5nUmVnZXhwIiwibGFzdEtleSIsIl90aGlzMiIsIm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyIiwiX3RoaXMkZXh0cmFjdEZyb21LZXkiLCJleHRyYWN0RnJvbUtleSIsIm5hbWVzcGFjZSIsImFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlIiwicmVzVXNlZEtleSIsInVzZWRLZXkiLCJyZXNFeGFjdFVzZWRLZXkiLCJleGFjdFVzZWRLZXkiLCJyZXNUeXBlIiwiam9pbkFycmF5cyIsImhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0IiwiaTE4bkZvcm1hdCIsImhhbmRsZUFzT2JqZWN0IiwicmV0dXJuT2JqZWN0cyIsInJldHVybmVkT2JqZWN0SGFuZGxlciIsInJlc1R5cGVJc0FycmF5IiwibmV3S2V5VG9Vc2UiLCJkZWVwS2V5IiwidHJhbnNsYXRlIiwiZXh0ZW5kVHJhbnNsYXRpb24iLCJ1c2VkRGVmYXVsdCIsIm5lZWRzUGx1cmFsSGFuZGxpbmciLCJoYXNEZWZhdWx0VmFsdWUiLCJkZWZhdWx0VmFsdWVTdWZmaXgiLCJwbHVyYWxSZXNvbHZlciIsImdldFN1ZmZpeCIsImlzVmFsaWRMb29rdXAiLCJyZXNGb3JNaXNzaW5nIiwibWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5IiwidXBkYXRlTWlzc2luZyIsImxuZ3MiLCJmYWxsYmFja0xuZ3MiLCJsYW5ndWFnZVV0aWxzIiwiZ2V0RmFsbGJhY2tDb2RlcyIsInNhdmVNaXNzaW5nVG8iLCJ0b1Jlc29sdmVIaWVyYXJjaHkiLCJzcGVjaWZpY0RlZmF1bHRWYWx1ZSIsImRlZmF1bHRGb3JNaXNzaW5nIiwibWlzc2luZ0tleUhhbmRsZXIiLCJzYXZlTWlzc2luZyIsInNhdmVNaXNzaW5nUGx1cmFscyIsImdldFN1ZmZpeGVzIiwic3VmZml4IiwiYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5IiwicGFyc2VNaXNzaW5nS2V5SGFuZGxlciIsIl90aGlzMyIsInVzZWRMbmciLCJ1c2VkTlMiLCJza2lwSW50ZXJwb2xhdGlvbiIsIm5lc3RCZWYiLCJza2lwT25WYXJpYWJsZXMiLCJkZWZhdWx0VmFyaWFibGVzIiwiaW50ZXJwb2xhdGUiLCJuZXN0IiwicmVzZXQiLCJwb3N0UHJvY2VzcyIsInBvc3RQcm9jZXNzb3JOYW1lcyIsImFwcGx5UG9zdFByb2Nlc3NvciIsInBvc3RQcm9jZXNzUGFzc1Jlc29sdmVkIiwiaTE4blJlc29sdmVkIiwiZm91bmQiLCJfdGhpczQiLCJleHRyYWN0ZWQiLCJmYWxsYmFja05TIiwibmVlZHNaZXJvU3VmZml4TG9va3VwIiwib3JkaW5hbCIsInNob3VsZFVzZUludGxBcGkiLCJuZWVkc0NvbnRleHRIYW5kbGluZyIsImNvZGVzIiwicG9zc2libGVLZXkiLCJmaW5hbEtleXMiLCJhZGRMb29rdXBLZXlzIiwicGx1cmFsU3VmZml4IiwiemVyb1N1ZmZpeCIsImNvbnRleHRLZXkiLCJjb250ZXh0U2VwYXJhdG9yIiwicmV0dXJuTnVsbCIsInJldHVybkVtcHR5U3RyaW5nIiwicmVzb3VyY2VTdG9yZSIsImNhcGl0YWxpemUiLCJMYW5ndWFnZVV0aWwiLCJzdXBwb3J0ZWRMbmdzIiwiZm9ybWF0TGFuZ3VhZ2VDb2RlIiwic3BlY2lhbENhc2VzIiwibG93ZXJDYXNlTG5nIiwicGFydCIsImNsZWFuQ29kZSIsImxvYWQiLCJub25FeHBsaWNpdFN1cHBvcnRlZExuZ3MiLCJnZXRMYW5ndWFnZVBhcnRGcm9tQ29kZSIsImNsZWFuZWRMbmciLCJpc1N1cHBvcnRlZENvZGUiLCJsbmdPbmx5Iiwic3VwcG9ydGVkTG5nIiwiZmFsbGJhY2tzIiwiZ2V0U2NyaXB0UGFydEZyb21Db2RlIiwiZmFsbGJhY2tDb2RlIiwiZmFsbGJhY2tDb2RlcyIsImFkZENvZGUiLCJzZXRzIiwibnIiLCJfcnVsZXNQbHVyYWxzVHlwZXMiLCJkZXByZWNhdGVkSnNvblZlcnNpb25zIiwic3VmZml4ZXNPcmRlciIsInplcm8iLCJvbmUiLCJ0d28iLCJmZXciLCJtYW55Iiwib3RoZXIiLCJQbHVyYWxSZXNvbHZlciIsInJ1bGVzIiwiY29tcGF0aWJpbGl0eUpTT04iLCJJbnRsIiwiUGx1cmFsUnVsZXMiLCJudW1iZXJzIiwicGx1cmFscyIsIl91bnVzZWQiLCJydWxlIiwiZ2V0UnVsZSIsInJlc29sdmVkT3B0aW9ucyIsInBsdXJhbENhdGVnb3JpZXMiLCJwbHVyYWxDYXRlZ29yeTEiLCJwbHVyYWxDYXRlZ29yeTIiLCJwbHVyYWxDYXRlZ29yeSIsInNlbGVjdCIsImdldFN1ZmZpeFJldHJvQ29tcGF0aWJsZSIsIm5vQWJzIiwiYWJzIiwic2ltcGxpZnlQbHVyYWxTdWZmaXgiLCJyZXR1cm5TdWZmaXgiLCJvd25LZXlzJDMiLCJfb2JqZWN0U3ByZWFkJDMiLCJJbnRlcnBvbGF0b3IiLCJlc2NhcGVWYWx1ZSIsImlPcHRzIiwidXNlUmF3VmFsdWVUb0VzY2FwZSIsInByZWZpeEVzY2FwZWQiLCJzdWZmaXhFc2NhcGVkIiwiZm9ybWF0U2VwYXJhdG9yIiwidW5lc2NhcGVQcmVmaXgiLCJ1bmVzY2FwZVN1ZmZpeCIsIm5lc3RpbmdQcmVmaXgiLCJuZXN0aW5nUHJlZml4RXNjYXBlZCIsIm5lc3RpbmdTdWZmaXgiLCJuZXN0aW5nU3VmZml4RXNjYXBlZCIsIm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yIiwibWF4UmVwbGFjZXMiLCJhbHdheXNGb3JtYXQiLCJyZXNldFJlZ0V4cCIsInJlZ2V4cFN0ciIsInJlZ2V4cFVuZXNjYXBlU3RyIiwicmVnZXhwVW5lc2NhcGUiLCJuZXN0aW5nUmVnZXhwU3RyIiwicmVwbGFjZXMiLCJyZWdleFNhZmUiLCJoYW5kbGVGb3JtYXQiLCJpbnRlcnBvbGF0aW9ua2V5IiwibWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyIiwicmVnZXgiLCJzYWZlVmFsdWUiLCJ0b2RvIiwibWF0Y2hlZFZhciIsInRlbXAiLCJjbG9uZWRPcHRpb25zIiwiaGFuZGxlSGFzT3B0aW9ucyIsImluaGVyaXRlZE9wdGlvbnMiLCJzZXAiLCJvcHRpb25zU3RyaW5nIiwiZm9ybWF0dGVycyIsImRvUmVkdWNlIiwiZWxlbSIsIm93bktleXMkNCIsIl9vYmplY3RTcHJlYWQkNCIsIkZvcm1hdHRlciIsImZvcm1hdHMiLCJOdW1iZXJGb3JtYXQiLCJjdXJyZW5jeSIsIkRhdGVUaW1lRm9ybWF0IiwicmVsYXRpdmV0aW1lIiwiUmVsYXRpdmVUaW1lRm9ybWF0IiwiTGlzdEZvcm1hdCIsIl9mb3JtYXQiLCJtZW0iLCJfcGFyc2VGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJmb3JtYXROYW1lIiwiZm9ybWF0T3B0aW9ucyIsIm9wdFN0ciIsIl9vcHQkc3BsaXQyIiwicGFyc2VJbnQiLCJwYXJzZUZvcm1hdFN0ciIsImZvcm1hdHRlZCIsInZhbE9wdGlvbnMiLCJmb3JtYXRQYXJhbXMiLCJvd25LZXlzJDUiLCJfb2JqZWN0U3ByZWFkJDUiLCJDb25uZWN0b3IiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0JDIiLCJ0b0xvYWQiLCJ0b0xvYWRMYW5ndWFnZXMiLCJ0b0xvYWROYW1lc3BhY2VzIiwiaGFzQWxsTmFtZXNwYWNlcyIsImVycm9ycyIsImFkZFJlc291cmNlQnVuZGxlIiwiX2dldExhc3RPZlBhdGgyIiwicHVzaFBhdGgiLCJ3aGF0IiwiZmNOYW1lIiwidHJpZWQiLCJxdWV1ZUxvYWQiLCJsb2FkT25lIiwicHJlcGFyZUxvYWRpbmciLCJfdGhpczUiLCJmYWxsYmFja1ZhbHVlIiwiaXNVcGRhdGUiLCJ0cmFuc2Zvcm1PcHRpb25zIiwib3duS2V5cyQ2IiwiX29iamVjdFNwcmVhZCQ2IiwiSTE4biIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QkMyIsImluc3QiLCJleHRlcm5hbCIsImlzQ2xvbmUiLCJpbml0SW1tZWRpYXRlIiwiZGVmT3B0cyIsInByZWxvYWQiLCJwbHVyYWxTZXBhcmF0b3IiLCJwYXJ0aWFsQnVuZGxlZExhbmd1YWdlcyIsInREZXNjcmlwdGlvbiIsImNyZWF0ZUNsYXNzT25EZW1hbmQiLCJDbGFzc09yT2JqZWN0IiwiZm9ybWF0dGVyIiwibHUiLCJsYW5ndWFnZURldGVjdG9yIiwiZGV0ZWN0aW9uIiwiX3RoaXMyJHN0b3JlIiwiX3RoaXMyJHN0b3JlMiIsImRlZmVycmVkIiwiZmluaXNoIiwidXNlZENhbGxiYWNrIiwic2V0TG5nUHJvcHMiLCJyZXNvbHZlZExhbmd1YWdlIiwibG5nSW5MbmdzIiwiaGFzTGFuZ3VhZ2VTb21lVHJhbnNsYXRpb25zIiwic2V0TG5nIiwiZ2V0QmVzdE1hdGNoRnJvbUNvZGVzIiwiY2FjaGVVc2VyTGFuZ3VhZ2UiLCJsb2FkUmVzb3VyY2VzIiwiZGV0ZWN0IiwiZml4ZWRUIiwicmVzdWx0S2V5IiwiX3RoaXMkdHJhbnNsYXRvciIsIl90aGlzJHRyYW5zbGF0b3IyIiwiZXhpc3RzIiwiX3RoaXM2IiwicHJlY2hlY2siLCJwcmVSZXN1bHQiLCJfdGhpczciLCJwcmVsb2FkZWQiLCJuZXdMbmdzIiwiX3RoaXM4IiwibWVyZ2VkT3B0aW9ucyIsInJlbG9hZFJlc291cmNlcyIsInNldERlZmF1bHROYW1lc3BhY2UiLCJsb2FkTGFuZ3VhZ2VzIiwiZmllbGRDb250ZW50UmVnRXhwIiwiY29va2llJDEiLCJsb29rdXAiLCJsb29rdXBDb29raWUiLCJuYW1lRVEiLCJtaW51dGVzIiwiY29va2llT3B0aW9ucyIsInNhbWVTaXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJtYXhBZ2UiLCJ0b1VUQ1N0cmluZyIsImh0dHBPbmx5Iiwic2VyaWFsaXplQ29va2llIiwiY29va2llTWludXRlcyIsImNvb2tpZURvbWFpbiIsInF1ZXJ5c3RyaW5nIiwibG9va3VwUXVlcnlzdHJpbmciLCJoYXNMb2NhbFN0b3JhZ2VTdXBwb3J0IiwibG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwidGVzdEtleSIsImxvb2t1cExvY2FsU3RvcmFnZSIsImhhc1Nlc3Npb25TdG9yYWdlU3VwcG9ydCIsInNlc3Npb25TdG9yYWdlQXZhaWxhYmxlIiwic2Vzc2lvblN0b3JhZ2UiLCJsb29rdXBTZXNzaW9uU3RvcmFnZSIsIm5hdmlnYXRvciQxIiwidXNlckxhbmd1YWdlIiwiaHRtbFRhZyIsImxvb2t1cEZyb21QYXRoSW5kZXgiLCJzdWJkb21haW4iLCJsb29rdXBGcm9tU3ViZG9tYWluSW5kZXgiLCJCcm93c2VyIiwiZGV0ZWN0b3JzIiwiY2FjaGVzIiwiZXhjbHVkZUNhY2hlRm9yIiwibG9va3VwRnJvbVVybEluZGV4IiwiYWRkRGV0ZWN0b3IiLCJkZXRlY3RvciIsImRldGVjdGlvbk9yZGVyIiwiZGV0ZWN0ZWQiLCJkZXRlY3Rvck5hbWUiLCJjYWNoZU5hbWUiLCJoYXNYTUxIdHRwUmVxdWVzdCIsIlhtbEh0dHBSZXF1ZXN0QXBpIiwiQWN0aXZlWE9iamVjdEFwaSIsIkFjdGl2ZVhPYmplY3QiLCJhZGRRdWVyeVN0cmluZyIsInF1ZXJ5U3RyaW5nIiwicXVlcnlTdHJpbmdQYXJhbXMiLCJjdXN0b21IZWFkZXJzIiwicmVxdWVzdE9wdGlvbnMiLCJyZXF1ZXN0V2l0aEZldGNoIiwiY3Jvc3NEb21haW4iLCJvdmVycmlkZU1pbWVUeXBlIiwicmVxdWVzdFdpdGhYbWxIdHRwUmVxdWVzdCIsIkJhY2tlbmQiLCJhbGxPcHRpb25zIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwibG9hZFBhdGgiLCJhZGRQYXRoIiwiYWxsb3dNdWx0aUxvYWRpbmciLCJwYXJzZVBheWxvYWQiLCJyZWxvYWRJbnRlcnZhbCIsInNldEludGVydmFsIiwiX3JlYWRBbnkiLCJsb2FkVXJsTGFuZ3VhZ2VzIiwibG9hZFVybE5hbWVzcGFjZXMiLCJtYXliZVByb21pc2UiLCJpc1Byb21pc2UiLCJyZXNvbHZlZExvYWRQYXRoIiwibG9hZFVybCIsInBhcnNlRXJyIiwiZmluaXNoZWQiLCJkYXRhQXJyYXkiLCJyZXNBcnJheSIsIl90aGlzJHNlcnZpY2VzIiwiY3VycmVudExhbmd1YWdlIiwiTGFuZ3VhZ2VEZXRlY3RvciIsImdldEVsZW1lbnRCeUlkIiwiaGlzdG9yeVJlZiIsIl9vcHRpb25zJHdpbmRvdyIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXhBbmRMb2NhdGlvbiIsIl93aW5kb3ckbG9jYXRpb24iLCJ1c3IiLCJibG9ja2VkUG9wVHgiLCJibG9ja2VycyIsIm5leHRBY3Rpb24iLCJfZ2V0SW5kZXhBbmRMb2NhdGlvbiIsIm5leHRJbmRleCIsIm5leHRMb2NhdGlvbiIsImRlbHRhIiwicmV0cnkiLCJhcHBseVR4IiwiX2dldEluZGV4QW5kTG9jYXRpb24yIiwiZ2V0TmV4dExvY2F0aW9uIiwiZ2V0SGlzdG9yeVN0YXRlQW5kVXJsIiwiYWxsb3dUeCIsIl9nZXRJbmRleEFuZExvY2F0aW9uMyIsInJlcGxhY2VTdGF0ZSIsIlB1c2giLCJfZ2V0SGlzdG9yeVN0YXRlQW5kVXIiLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJSZXBsYWNlIiwiX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiIsImJhY2siLCJsaXN0ZW4iLCJibG9jayIsImJsb2NrZXIiLCJ1bmJsb2NrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJzZXRJc0RhcmsiLCJzZXRUaGVtZSIsIm1lbW9WYWx1ZSIsImlzU2lkZWJhck9wZW5TdGF0ZSIsInNldElzU2lkZWJhck9wZW4iLCJBcHAiXSwic291cmNlUm9vdCI6IiJ9