"use strict";(self.webpackChunkpet_1=self.webpackChunkpet_1||[]).push([[117],{3117:(e,r,n)=>{n.r(r),n.d(r,{default:()=>b});var t=n(5893),o=n(7294),a=n(3005);var l=n(5380),s=n(9637),i=function(e){var r=(0,o.useState)(e),n=r[0],t=r[1];return{onChange:function(e){t(e.target.value)},value:n,resetValue:function(){t("")}}},u=n(1872),c=n(3556),d=n(2779),f=n(8793),v=n(5007),p=n(4417),h=function(e){return e.user},m=function(e){var r;return(null===(r=e.loginForm)||void 0===r?void 0:r.isLoading)||!1},j=function(e){var r;return null===(r=null==e?void 0:e.loginForm)||void 0===r?void 0:r.error},O=n(8994),y=n(3446),g=n(2327),x=function(){return x=Object.assign||function(e){for(var r,n=1,t=arguments.length;n<t;n++)for(var o in r=arguments[n])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e},x.apply(this,arguments)};const b=(0,o.memo)((function(e){var r=e.someClasses,n=function(e,r){var n={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&r.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(t=Object.getOwnPropertySymbols(e);o<t.length;o++)r.indexOf(t[o])<0&&Object.prototype.propertyIsEnumerable.call(e,t[o])&&(n[t[o]]=e[t[o]])}return n}(e,["someClasses"]),b=(0,g.$)().t,w=(0,u.dd)(),C=w.isModalOpen,P=w.closeModal,A=(0,v.v9)(m),N=(0,v.v9)(j),R=(0,v.v9)(h),z=R.authorized,E=R.authData,I=(0,O.P)(),S=I.addReducer,k=I.removeReducer;(0,o.useEffect)((function(){return S("loginForm",y.OU),function(){return k("loginForm")}}),[]);var F=(0,d.T)(),M=i(""),T=i(""),U=(0,o.useRef)(null);return(0,o.useEffect)((function(){var e;return z&&(e=setTimeout((function(){P()}),2e3)),function(){return clearTimeout(e)}}),[z]),(0,o.useEffect)((function(){M.resetValue(),T.resetValue(),U.current.focus()}),[C]),A?(0,t.jsx)("div",{className:(0,a.A)("Oeh6Y6gi",{},[]),children:(0,t.jsx)(p.a,{})}):(0,t.jsxs)("form",x({onSubmit:function(e){e.preventDefault();var r={username:M.value,password:T.value};F((0,f.a)(r))},className:(0,a.A)("GOzH6ilI",{},[r])},n,{children:[A&&(0,t.jsx)(p.a,{}),N&&(0,t.jsx)(l.x,{color:"error",children:N}),z&&(0,t.jsxs)(l.x,{color:"success",children:[b("вход выполнен")," ",E.username]}),(0,t.jsx)(l.x,{className:(0,a.A)("aNEi7yib",{},[]),weight:"bold",align:"center",tag:"h2",size:"large",children:b("войти")}),(0,t.jsxs)("div",{className:(0,a.A)("uRO2UG3T",{},[]),children:[(0,t.jsx)(s.I,x({title:b("имя"),ref:U,id:"name"},M,{placeholder:b("вася пупкин")})),(0,t.jsx)(s.I,x({title:b("пароль"),id:"password"},T,{placeholder:b("пароль")}))]}),(0,t.jsx)("div",{className:(0,a.A)("ext37eJj",{},[]),children:(0,t.jsx)(c.z,{type:"submit",children:(0,t.jsx)(l.x,{size:"large",children:b("войти")})})})]}))}))},8994:(e,r,n)=>{n.d(r,{P:()=>o});var t=n(5007),o=function(){var e=(0,t.oR)();return{addReducer:function(r,n){e.reducerManager.add(r,n)},removeReducer:function(r){e.reducerManager.remove(r)}}}},9637:(e,r,n)=>{n.d(r,{I:()=>s});var t=n(5893),o=n(7294),a=n(3005);var l=function(){return l=Object.assign||function(e){for(var r,n=1,t=arguments.length;n<t;n++)for(var o in r=arguments[n])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e},l.apply(this,arguments)},s=(0,o.forwardRef)((function(e,r){var n=e.someClasses,o=e.onChange,s=e.value,i=void 0===s?"":s,u=e.type,c=void 0===u?"text":u,d=e.title,f=e.id,v=e.placeholder,p=void 0===v?"Введите текст":v,h=function(e,r){var n={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&r.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(t=Object.getOwnPropertySymbols(e);o<t.length;o++)r.indexOf(t[o])<0&&Object.prototype.propertyIsEnumerable.call(e,t[o])&&(n[t[o]]=e[t[o]])}return n}(e,["someClasses","onChange","value","type","title","id","placeholder"]);return(0,t.jsxs)("div",l({className:(0,a.A)("OLjxvu_0",{},[n])},h,{children:[d&&(0,t.jsx)("span",{className:(0,a.A)("hcAi9zUY",{},[n]),children:d+">"}),(0,t.jsx)("input",{ref:r,id:f,placeholder:p,type:c,onChange:o,value:i})]}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,